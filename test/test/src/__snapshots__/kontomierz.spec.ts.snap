// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`kontomierz should work 1`] = `
"export namespace Kontomierz {
    export namespace Core {
        export namespace Contracts {
            export interface Auth {
            }
            export interface IBankAccountRelated {
                BankAccountId: string;
            }
            export interface ICategoryGroupRelated {
                CategoryGroupId: string;
            }
            export interface ICategoryOrCategoryGroupRelated {
                CategoryId: string;
            }
            export interface ICategoryRelated {
                CategoryId: string;
            }
            export interface ISubtransactionRelated {
                SubtransactionId: string;
            }
            export interface ITransactionRelated {
                TransactionId: string;
            }
            export interface IWalletRelated {
                WalletId: string;
            }
            export interface MoneyDTO {
                AmountSmallestUnit: number;
                CurrencyCode: string;
            }
            export interface PaginatedQuery {
                /**
                 * Zero-based.
                 */
                PageNumber: number;
                PageSize: number;
            }
            export namespace PaginatedQuery {
                export const MinPageSize = 1;
                export const MaxPageSize = 100;
            }
            export interface PaginatedResult<TResult> {
                Items: TResult[];
                TotalCount: number;
            }
            export namespace Auth {
                export interface Clients {
                }
                export namespace Clients {
                    export const AdminApp = \\"admin_app\\";
                    export const ClientApp = \\"client_app\\";
                }
                export interface KnownClaims {
                }
                export namespace KnownClaims {
                    export const UserId = \\"sub\\";
                    export const Role = \\"role\\";
                }
                export interface Permissions {
                }
                export namespace Permissions {
                    export const CoreApiAccess = \\"CoreApiAccess\\";
                    export const DebugApiAccess = \\"DebugApiAccess\\";
                    export const KontomatikImports = \\"KontomatikImports\\";
                }
                export interface Roles {
                }
                export namespace Roles {
                    export const User = \\"user\\";
                    export const DemoUser = \\"demo_user\\";
                }
                export interface Scopes {
                }
                export namespace Scopes {
                    export const InternalApi = \\"internal_api\\";
                }
            }
            export namespace AuthorizeWhenOwnsBankAccountAttribute {
                export interface IOwnBankAccount {
                }
            }
            export namespace AuthorizeWhenOwnsCategoryAttribute {
                export interface IOwnCategory {
                }
            }
            export namespace AuthorizeWhenOwnsCategoryGroupAttribute {
                export interface IOwnCategoryGroup {
                }
            }
            export namespace AuthorizeWhenOwnsCategoryOrCategoryGroupAttribute {
                export interface IOwnCategoryOrCategoryGroup {
                }
            }
            export namespace AuthorizeWhenOwnsSubtransactionAttribute {
                export interface IOwnSubtransaction {
                }
            }
            export namespace AuthorizeWhenOwnsTransactionAttribute {
                export interface IOwnTransaction {
                }
            }
            export namespace AuthorizeWhenOwnsWalletAttribute {
                export interface IOwnWallet {
                }
            }
            export namespace BankAccounts {
                export interface BankAccountDTO {
                    Id: string;
                    Type: BankAccountTypeDTO;
                    Iban: string;
                    Name: string;
                    FriendlyName?: string;
                    CreditCardNumber?: string;
                    CurrencyCode: string;
                    BalanceSmallestUnit?: number;
                    MultipleAccessType: MultipleAccessTypeDTO;
                    MostRecentImportDate: string;
                }
                export interface BankAccountsDTO {
                    Bank: BankDTO;
                    Accounts: BankAccountDTO[];
                }
                export interface BankDTO {
                    Target: string;
                    Name: string;
                }
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 * @attribute Kontomierz.Core.Contracts.AuthorizeWhenOwnsBankAccountAttribute
                 */
                export interface DeleteBankAccount extends Command, IBankAccountRelated {
                }
                export namespace DeleteBankAccount {
                    export const ErrorCodes = {
                        BankAccountIdInvalid: 1
                    } as const;
                    export type ErrorCodes = typeof ErrorCodes;
                }
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 */
                export interface MyBankAccounts extends Query<BankAccountsDTO[]> {
                }
                export enum BankAccountTypeDTO {
                    Account = 0,
                    CreditCard = 1
                }
                export enum MultipleAccessTypeDTO {
                    Active = 0,
                    Expired = 1,
                    Unsupported = 2
                }
            }
            export namespace Budgets {
                export interface BudgetDTO {
                    CategoryBudgets: CategoryBudgetDTO[];
                    OtherCategoriesPlannedBalancePlnSmallestUnit: number;
                    OtherCategoriesBalancePlnSmallestUnit: number;
                    OtherCategoryBalances: Categories.CategoryBalanceDTO[];
                }
                export interface CategoryBudgetDTO {
                    /**
                     * May be a CategoryGroup ID
                     */
                    CategoryId: string;
                    PlannedBalancePlnSmallestUnit: number;
                    Comment?: string;
                    Type: CategoryBudgetTypeDTO;
                    BalancePlnSmallestUnit: number;
                }
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 */
                export interface CopyBudgetValidation extends Query<CopyBudgetValidationDTO> {
                    /**
                     * Day is ignored
                     */
                    NewBillingCycle: string;
                }
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 */
                export interface CopyMostRecentBudgetPlan extends Command {
                    /**
                     * Day is ignored
                     */
                    NewBillingCycle: string;
                }
                export namespace CopyMostRecentBudgetPlan {
                    export const ErrorCodes = {
                        BudgetPlanAlreadyExistsForTheBillingCycle: 1,
                        NoPreviousBudgetPlansExist: 2
                    } as const;
                    export type ErrorCodes = typeof ErrorCodes;
                }
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 * @attribute Kontomierz.Core.Contracts.AuthorizeWhenOwnsCategoryOrCategoryGroupAttribute
                 */
                export interface DeleteCategoryBudgetPlan extends Command, ICategoryOrCategoryGroupRelated {
                    /**
                     * Day is ignored
                     */
                    BillingCycle: string;
                }
                export namespace DeleteCategoryBudgetPlan {
                    export const ErrorCodes = {
                        CategoryIdInvalid: 1
                    } as const;
                    export type ErrorCodes = typeof ErrorCodes;
                }
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 */
                export interface MyBudgetInBillingCycle extends Query<BudgetDTO> {
                    /**
                     * Day is ignored
                     */
                    BillingCycle: string;
                }
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 * @attribute Kontomierz.Core.Contracts.AuthorizeWhenOwnsCategoryOrCategoryGroupAttribute
                 */
                export interface PlanCategoryBudget extends Command, ICategoryOrCategoryGroupRelated {
                    /**
                     * Day is ignored
                     */
                    BillingCycle: string;
                    PlannedBalancePlnSmallestUnit: number;
                    Comment?: string;
                }
                export namespace PlanCategoryBudget {
                    export const ErrorCodes = {
                        CategoryIdInvalid: 1,
                        CategoryDoesNotExist: 2,
                        CategoryIsInAnotherBudgetPlanCategoryGroup: 3,
                        InvalidCategoryKind: 4,
                        BalanceIsNegative: 5,
                        CommentIsTooLong: 6
                    } as const;
                    export type ErrorCodes = typeof ErrorCodes;
                }
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 */
                export interface PlanOtherCategoriesBudget extends Command {
                    /**
                     * Day is ignored
                     */
                    BillingCycle: string;
                    PlannedBalancePlnSmallestUnit: number;
                }
                export namespace PlanOtherCategoriesBudget {
                    export const ErrorCodes = {
                        BalanceIsNegative: 1
                    } as const;
                    export type ErrorCodes = typeof ErrorCodes;
                }
                export enum CategoryBudgetTypeDTO {
                    Category = 0,
                    CategoryGroup = 1
                }
                export enum CopyBudgetValidationDTO {
                    Valid = 0,
                    BudgetPlanAlreadyExistsForTheBillingCycle = 1,
                    NoPreviousBudgetPlansExist = 2
                }
            }
            export namespace Categories {
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 * @attribute Kontomierz.Core.Contracts.AuthorizeWhenOwnsCategoryGroupAttribute
                 */
                export interface AddCategory extends Command, ICategoryGroupRelated {
                    Name: string;
                    Kind: CategoryKindDTO;
                }
                export namespace AddCategory {
                    export const ErrorCodes = {
                        InvalidCategoryGroupId: 1,
                        CategoryGroupDoesNotExist: 2,
                        NameRequired: 3,
                        NameTooLong: 4,
                        InvalidKind: 5
                    } as const;
                    export type ErrorCodes = typeof ErrorCodes;
                }
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 */
                export interface AddCategoryGroup extends Command {
                    Name: string;
                    Color: string;
                    Icon: CategoryGroupIconDTO;
                }
                export namespace AddCategoryGroup {
                    export const ErrorCodes = {
                        NameRequired: 1,
                        NameTooLong: 2,
                        ColorRequired: 3,
                        ColorInvalid: 4,
                        InvalidIcon: 5
                    } as const;
                    export type ErrorCodes = typeof ErrorCodes;
                }
                export interface CategoryBalanceDTO {
                    Id: string;
                    PlnBalanceSmallestUnit: number;
                }
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 */
                export interface CategoryBalances extends Query<CategoryBalancesDTO> {
                    TransactionDateInclusiveFrom?: string;
                    TransactionDateInclusiveTo?: string;
                    BankAccountIdsFilter?: string[];
                    WalletIdsFilter?: string[];
                }
                export interface CategoryBalancesDTO {
                    TotalPlnBalanceSmallestUnit: number;
                    CategoryGroups: CategoryGroupBalanceDTO[];
                }
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 */
                export interface CategoryBalancesSummary extends Query<CategoryGroupBalanceSummaryDTO[]> {
                    /**
                     * Day is ignored
                     */
                    BillingCycle: string;
                }
                export interface CategoryDTO {
                    Id: string;
                    Name: string;
                    Kind: CategoryKindDTO;
                }
                export interface CategoryGroupBalanceDTO {
                    Id: string;
                    PlnBalanceSmallestUnit: number;
                    Categories: CategoryBalanceDTO[];
                }
                export interface CategoryGroupBalanceSummaryDTO {
                    /**
                     * Other categories if null
                     */
                    Id?: string;
                    PlnBalanceSmallestUnit: number;
                    TotalBalancePercent: number;
                }
                export interface CategoryGroupDTO {
                    Id: string;
                    Name: string;
                    Color: string;
                    Icon: CategoryGroupIconDTO;
                    Categories: CategoryDTO[];
                }
                export interface CategoryGroupRelationsDTO {
                    Id: string;
                    CategoryIds: string[];
                }
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 * @attribute Kontomierz.Core.Contracts.AuthorizeWhenOwnsCategoryAttribute
                 */
                export interface DeleteCategory extends Command, ICategoryRelated {
                    CategorizationHandling: AfterCategoryDeletionCategorizationHandlingDTO;
                    MoveTransactionsToCategoryId?: string;
                }
                export namespace DeleteCategory {
                    export const ErrorCodes = {
                        InvalidCategoryId: 1,
                        CannotDeleteNoneCategory: 2,
                        InvalidCategorizationHandling: 3,
                        InvalidMoveTransactionsToCategoryId: 4,
                        CategoryToMoveTransactionsToDoesNotExist: 5,
                        CategoryToMoveTransactionsToMustBeDifferent: 6,
                        CategoryToMoveTransactionsToHasDifferentKind: 7
                    } as const;
                    export type ErrorCodes = typeof ErrorCodes;
                }
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 * @attribute Kontomierz.Core.Contracts.AuthorizeWhenOwnsCategoryGroupAttribute
                 */
                export interface DeleteCategoryGroup extends Command, ICategoryGroupRelated {
                }
                export namespace DeleteCategoryGroup {
                    export const ErrorCodes = {
                        InvalidCategoryGroupId: 1,
                        CannotDeleteNoneCategoryGroup: 2,
                        CategoryGroupHasSomeCategories: 3
                    } as const;
                    export type ErrorCodes = typeof ErrorCodes;
                }
                /**
                 * Order in the lists resembles expected order.
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 */
                export interface EditCategoriesRelations extends Command {
                    CategoriesRelations: CategoryGroupRelationsDTO[];
                }
                export namespace EditCategoriesRelations {
                    export const ErrorCodes = {
                        CategoriesRelationsCantBeNull: 1,
                        AllCategoryGroupRelationsCantBeNull: 2,
                        SomeCategoryGroupIdsAreInvalid: 3,
                        SomeCategoryIdsAreInvalid: 4,
                        CategoryGroupsAreNotSetEqual: 5,
                        CategoriesAreNotSetEqual: 6
                    } as const;
                    export type ErrorCodes = typeof ErrorCodes;
                }
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 * @attribute Kontomierz.Core.Contracts.AuthorizeWhenOwnsCategoryAttribute
                 */
                export interface EditCategory extends Command, ICategoryRelated {
                    Name: string;
                }
                export namespace EditCategory {
                    export const ErrorCodes = {
                        InvalidCategoryId: 1,
                        CategoryDoesNotExist: 2,
                        NameRequired: 3,
                        NameTooLong: 4
                    } as const;
                    export type ErrorCodes = typeof ErrorCodes;
                }
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 * @attribute Kontomierz.Core.Contracts.AuthorizeWhenOwnsCategoryGroupAttribute
                 */
                export interface EditCategoryGroup extends Command, ICategoryGroupRelated {
                    Name: string;
                    Color: string;
                    Icon: CategoryGroupIconDTO;
                }
                export namespace EditCategoryGroup {
                    export const ErrorCodes = {
                        InvalidCategoryGroupId: 1,
                        CategoryGroupDoesNotExist: 2,
                        NameRequired: 3,
                        NameTooLong: 4,
                        ColorRequired: 5,
                        ColorInvalid: 6,
                        InvalidIcon: 7
                    } as const;
                    export type ErrorCodes = typeof ErrorCodes;
                }
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 */
                export interface MyCategories extends Query<MyCategoriesDTO> {
                }
                export interface MyCategoriesDTO {
                    Uncategorized: CategoryGroupDTO;
                    CategoryGroups: CategoryGroupDTO[];
                }
                export enum AfterCategoryDeletionCategorizationHandlingDTO {
                    MoveToAnotherCategory = 0,
                    Recategorize = 1
                }
                export enum CategoryGroupIconDTO {
                    ShoppingBag = 0,
                    Home = 1,
                    Kid = 2,
                    Personal = 3,
                    Balance = 4,
                    Gift = 5,
                    Briefcase = 6,
                    CircleFull = 7,
                    CircleEmpty = 8,
                    GamingPad = 9,
                    Flag = 10,
                    FaceSmile = 11,
                    Key = 12,
                    Star = 13,
                    Atom = 14,
                    ActivityHeart = 15,
                    MedicalCross = 16,
                    PuzzlePiece = 17,
                    GraduationHat = 18,
                    Plane = 19,
                    Sun = 20,
                    Image = 21,
                    Palette = 22,
                    Building = 23,
                    Tag = 24,
                    Anchor = 25,
                    Mail = 26,
                    HeartRounded = 27,
                    Camera = 28,
                    ShoppingCart = 29,
                    File = 30,
                    MusicNote = 31,
                    CoinsHand = 32,
                    Car = 33
                }
                export enum CategoryKindDTO {
                    Expense = 0,
                    Income = 1
                }
            }
            export namespace Imports {
                export interface KontomatikImportRequestExceptionDTO {
                    Error: KontomatikImportRequestErrorDTO;
                    InternalKontomatikError: string;
                }
                export interface KontomatikImportResponseDTO {
                    Exceptions: KontomatikImportRequestExceptionDTO[];
                }
                export interface OperationValidationError {
                    PropertyName: string;
                    ErrorMessage: string;
                    ErrorCode: number;
                }
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 */
                export interface RequestImportFromKontomatik extends Operation<RequestImportFromKontomatikResponseDTO> {
                    SessionId: string;
                    SessionIdSignature: string;
                    MultipleAccessId?: string;
                    Target: string;
                    OfficialName: string;
                    Since: string;
                }
                export interface RequestImportFromKontomatikResponseDTO {
                    ValidationErrors: OperationValidationError[];
                    Response?: KontomatikImportResponseDTO;
                }
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 */
                export interface StartImportingAllBankAccountsWithMultipleAccess extends Command {
                }
                export namespace StartImportingAllBankAccountsWithMultipleAccess {
                    export const ErrorCodes = {
                        NoMultipleSessionAccessAreActive: 1,
                        SomeImportsAreAlreadyInProgress: 2
                    } as const;
                    export type ErrorCodes = typeof ErrorCodes;
                }
                export enum KontomatikImportRequestErrorDTO {
                    General = 0,
                    SessionExpired = 1,
                    ConcurrentSessionsLimitExceed = 2,
                    ServiceMaintenance = 3,
                    MultipleAccessLimitExceeded = 4
                }
            }
            export namespace Transactions {
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 * @attribute Kontomierz.Core.Contracts.AuthorizeWhenOwnsSubtransactionAttribute
                 */
                export interface AssignCustomSubtransactionTitle extends Command, ISubtransactionRelated {
                    Title?: string;
                }
                export namespace AssignCustomSubtransactionTitle {
                    export const ErrorCodes = {
                        SubtransactionIdNotValid: 1,
                        SubtransactionDoesNotExist: 2,
                        TitleTooLong: 3
                    } as const;
                    export type ErrorCodes = typeof ErrorCodes;
                }
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 * @attribute Kontomierz.Core.Contracts.AuthorizeWhenOwnsTransactionAttribute
                 */
                export interface AssignCustomTransactionTitle extends Command, ITransactionRelated {
                    Title?: string;
                }
                export namespace AssignCustomTransactionTitle {
                    export const ErrorCodes = {
                        TransactionIdNotValid: 1,
                        TransactionDoesNotExist: 2,
                        TitleTooLong: 3
                    } as const;
                    export type ErrorCodes = typeof ErrorCodes;
                }
                export interface BalanceInBillingCycleDTO {
                    BillingCycle: string;
                    BalancePlnSmallestUnit: number;
                    ExpensesPlnSmallestUnit: number;
                    IncomesPlnSmallestUnit: number;
                }
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 */
                export interface BalanceSummary extends Query<BalanceSummaryDTO> {
                    /**
                     * Day is ignored
                     */
                    BillingCycle: string;
                }
                export interface BalanceSummaryDTO {
                    BalancePlnSmallestUnit: number;
                    ExpensesPlnSmallestUnit: number;
                    ExpensesLastBillingCycleDifferencePercent?: number;
                    IncomesPlnSmallestUnit: number;
                    IncomesLastBillingCycleDifferencePercent?: number;
                }
                /**
                 * Up to 12 billing cycles ordered ascending.
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 */
                export interface BalancesByBillingCycles extends Query<BalanceInBillingCycleDTO[]> {
                    /**
                     * Day is ignored
                     */
                    BillingCycle: string;
                }
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 * @attribute Kontomierz.Core.Contracts.AuthorizeWhenOwnsSubtransactionAttribute
                 */
                export interface ConfirmTransactionCategory extends Command, ISubtransactionRelated {
                }
                export namespace ConfirmTransactionCategory {
                    export const ErrorCodes = {
                        SubtransactionIdInvalid: 1,
                        SubtransactionDoesNotExist: 2,
                        CannotConfirmTransactionsCategory: 3
                    } as const;
                    export type ErrorCodes = typeof ErrorCodes;
                }
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 * @attribute Kontomierz.Core.Contracts.AuthorizeWhenOwnsWalletAttribute
                 */
                export interface CreateWalletTransaction extends Command, IWalletRelated {
                    Name: string;
                    CategoryId: string;
                    TransactionDate: string;
                    AmountSmallestUnit: number;
                }
                export namespace CreateWalletTransaction {
                    export const ErrorCodes = {
                        WalletIdNotValid: 1,
                        WalletDoesNotExist: 2,
                        NameRequired: 3,
                        NameTooLong: 4,
                        CategoryIdNotValid: 5,
                        CategoryDoesNotExist: 6,
                        AmountDoesNotMatchCategoryKind: 7
                    } as const;
                    export type ErrorCodes = typeof ErrorCodes;
                }
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 * @attribute Kontomierz.Core.Contracts.AuthorizeWhenOwnsTransactionAttribute
                 */
                export interface DeleteTransaction extends Command, ITransactionRelated {
                }
                export namespace DeleteTransaction {
                    export const ErrorCodes = {
                        TransactionIdNotValid: 1
                    } as const;
                    export type ErrorCodes = typeof ErrorCodes;
                }
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 * @attribute Kontomierz.Core.Contracts.AuthorizeWhenOwnsTransactionAttribute
                 * @attribute Kontomierz.Core.Contracts.AuthorizeWhenOwnsWalletAttribute
                 */
                export interface EditWalletTransaction extends Command, ITransactionRelated, IWalletRelated {
                    Name: string;
                    CategoryId: string;
                    TransactionDate: string;
                    AmountSmallestUnit: number;
                }
                export namespace EditWalletTransaction {
                    export const ErrorCodes = {
                        TransactionIdNotValid: 1,
                        TransactionDoesNotExist: 2,
                        TransactionTypeNotValid: 3,
                        SplitTransactionsCannotBeEdited: 4,
                        WalletIdNotValid: 5,
                        WalletDoesNotExist: 6,
                        NameRequired: 7,
                        NameTooLong: 8,
                        CategoryIdNotValid: 9,
                        CategoryDoesNotExist: 10,
                        AmountDoesNotMatchCategoryKind: 11
                    } as const;
                    export type ErrorCodes = typeof ErrorCodes;
                }
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 * @attribute Kontomierz.Core.Contracts.AuthorizeWhenOwnsSubtransactionAttribute
                 */
                export interface MarkAsIrrelevant extends Command, ISubtransactionRelated {
                }
                export namespace MarkAsIrrelevant {
                    export const ErrorCodes = {
                        SubtransactionIdNotValid: 1,
                        SubtransactionDoesNotExist: 2
                    } as const;
                    export type ErrorCodes = typeof ErrorCodes;
                }
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 * @attribute Kontomierz.Core.Contracts.AuthorizeWhenOwnsSubtransactionAttribute
                 */
                export interface MarkAsRelevant extends Command, ISubtransactionRelated {
                }
                export namespace MarkAsRelevant {
                    export const ErrorCodes = {
                        SubtransactionIdNotValid: 1,
                        SubtransactionDoesNotExist: 2
                    } as const;
                    export type ErrorCodes = typeof ErrorCodes;
                }
                export interface NewSubtransactionDTO {
                    Id: string;
                    /**
                     * In the same currency as parent transaction.
                     */
                    AmountSmallestUnit: number;
                    CategoryId?: string;
                    UserAssignedTitle?: string;
                    Irrelevant: boolean;
                }
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 * @attribute Kontomierz.Core.Contracts.AuthorizeWhenOwnsSubtransactionAttribute
                 * @attribute Kontomierz.Core.Contracts.AuthorizeWhenOwnsCategoryAttribute
                 */
                export interface OverrideTransactionCategory extends Command, ISubtransactionRelated, ICategoryRelated {
                }
                export namespace OverrideTransactionCategory {
                    export const ErrorCodes = {
                        SubtransactionIdIsInvalid: 1,
                        SubtransactionDoesNotExist: 2,
                        CategoryIdIsInvalid: 3,
                        CategoryDoesNotExist: 4,
                        SubtransactionDoesNotMatchCategoryKind: 5
                    } as const;
                    export type ErrorCodes = typeof ErrorCodes;
                }
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 */
                export interface PaginatedTransactions extends Query<PaginatedResult<TransactionDTO>>, PaginatedQuery {
                    TransactionDateInclusiveFrom?: string;
                    TransactionDateInclusiveTo?: string;
                    /**
                     * Possibly a group category ID
                     */
                    CategoryIdFilter?: string;
                    BankAccountIdsFilter?: string[];
                    WalletIdsFilter?: string[];
                }
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 * @attribute Kontomierz.Core.Contracts.AuthorizeWhenOwnsTransactionAttribute
                 */
                export interface SplitTransaction extends Command, ITransactionRelated {
                    Subtransactions?: NewSubtransactionDTO[];
                }
                export namespace SplitTransaction {
                    export const ErrorCodes = {
                        TransactionIdNotValid: 1,
                        TransactionDoesNotExist: 2,
                        SubtransactionIdNotValid: 3,
                        SubtransactionIdNotUnique: 4,
                        SubtransactionAlreadyExists: 5,
                        CategoryIdNotValid: 6,
                        CategoryDoesNotExist: 7,
                        CategoryKindDoesNotMatch: 8,
                        AmountIncorrectSign: 9,
                        AmountSumDoesNotMatch: 10
                    } as const;
                    export type ErrorCodes = typeof ErrorCodes;
                }
                export interface SubtransactionDTO {
                    Id: string;
                    /**
                     * In the same currency as parent transaction.
                     */
                    AmountSmallestUnit: number;
                    AmountPlnSmallestUnit?: number;
                    CategoryId?: string;
                    CanConfirmCategory: boolean;
                    UserAssignedTitle?: string;
                    Irrelevant: boolean;
                }
                export interface TransactionDTO {
                    Id: string;
                    WalletId?: string;
                    WalletName?: string;
                    BankAccountId?: string;
                    BankAccountName?: string;
                    Bank?: BankAccounts.BankDTO;
                    TransactionDate: string;
                    BookedOnDate?: string;
                    AmountPlnSmallestUnit?: number;
                    AmountSmallestUnit: number;
                    CurrencyCode: string;
                    AccountBalanceAfterTransactionSmallestUnit?: number;
                    Title?: string;
                    OtherPartyName?: string;
                    OtherPartyIban?: string;
                    Kind?: string;
                    Status?: TransactionStatusDTO;
                    Comment?: string;
                    UserAssignedTitle?: string;
                    Subtransactions: SubtransactionDTO[];
                }
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 * @attribute Kontomierz.Core.Contracts.AuthorizeWhenOwnsTransactionAttribute
                 */
                export interface UpdateTransactionComment extends Command, ITransactionRelated {
                    Comment?: string;
                }
                export namespace UpdateTransactionComment {
                    export const ErrorCodes = {
                        TransactionIdNotValid: 1,
                        TransactionDoesNotExist: 2,
                        CommentTooLong: 3
                    } as const;
                    export type ErrorCodes = typeof ErrorCodes;
                }
                export enum TransactionStatusDTO {
                    Done = 0,
                    Pending = 1,
                    Rejected = 2,
                    Scheduled = 3,
                    Hold = 4
                }
            }
            export namespace Users {
                /**
                 * @attribute LeanCode.Contracts.Security.AllowUnauthorizedAttribute
                 */
                export interface CreateDemoSession extends Operation<string> {
                }
                /**
                 * @attribute LeanCode.Contracts.Security.AllowUnauthorizedAttribute
                 */
                export interface NewTestUserSession extends Query<string> {
                    Password: string;
                }
                export interface RegulationsDTO {
                    TermsOfService: string;
                    PrivacyPolicy: string;
                }
                /**
                 * @attribute LeanCode.Contracts.Security.AllowUnauthorizedAttribute
                 */
                export interface RegulationsLinks extends Query<RegulationsDTO> {
                }
            }
            export namespace Wallets {
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 */
                export interface CreateWallet extends Command {
                    Name: string;
                    InitialBalance: MoneyDTO;
                }
                export namespace CreateWallet {
                    export const ErrorCodes = {
                        NameRequired: 1,
                        NameTooLong: 2,
                        InitialBalanceRequired: 3,
                        InitialBalanceCurrencyCodeRequired: 5,
                        UnknownInitialBalanceCurrencyCode: 6
                    } as const;
                    export type ErrorCodes = typeof ErrorCodes;
                }
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 * @attribute Kontomierz.Core.Contracts.AuthorizeWhenOwnsWalletAttribute
                 */
                export interface DeleteWallet extends Command, IWalletRelated {
                }
                export namespace DeleteWallet {
                    export const ErrorCodes = {
                        WalletIdInvalid: 1
                    } as const;
                    export type ErrorCodes = typeof ErrorCodes;
                }
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 * @attribute Kontomierz.Core.Contracts.AuthorizeWhenOwnsWalletAttribute
                 */
                export interface EditWallet extends Command, IWalletRelated {
                    Name: string;
                }
                export namespace EditWallet {
                    export const ErrorCodes = {
                        InvalidWalletId: 1,
                        WalletDoesNotExist: 2,
                        NameRequired: 3,
                        NameTooLong: 4
                    } as const;
                    export type ErrorCodes = typeof ErrorCodes;
                }
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 */
                export interface MyWallets extends Query<WalletDTO[]> {
                }
                export interface WalletDTO {
                    Id: string;
                    Name: string;
                    Balance: MoneyDTO;
                    DateCreated: string;
                }
            }
        }
    }
}
export default function (cqrsClient: CQRS) {
    return {
        DeleteBankAccount: cqrsClient.createCommand<Kontomierz.Core.Contracts.BankAccounts.DeleteBankAccount, Kontomierz.Core.Contracts.BankAccounts.DeleteBankAccount.ErrorCodes>(\\"Kontomierz.Core.Contracts.BankAccounts.DeleteBankAccount\\", Kontomierz.Core.Contracts.BankAccounts.DeleteBankAccount.ErrorCodes),
        MyBankAccounts: cqrsClient.createQuery<Kontomierz.Core.Contracts.BankAccounts.MyBankAccounts, Kontomierz.Core.Contracts.BankAccounts.BankAccountsDTO[]>(\\"Kontomierz.Core.Contracts.BankAccounts.MyBankAccounts\\"),
        CopyBudgetValidation: cqrsClient.createQuery<Kontomierz.Core.Contracts.Budgets.CopyBudgetValidation, Kontomierz.Core.Contracts.Budgets.CopyBudgetValidationDTO>(\\"Kontomierz.Core.Contracts.Budgets.CopyBudgetValidation\\"),
        CopyMostRecentBudgetPlan: cqrsClient.createCommand<Kontomierz.Core.Contracts.Budgets.CopyMostRecentBudgetPlan, Kontomierz.Core.Contracts.Budgets.CopyMostRecentBudgetPlan.ErrorCodes>(\\"Kontomierz.Core.Contracts.Budgets.CopyMostRecentBudgetPlan\\", Kontomierz.Core.Contracts.Budgets.CopyMostRecentBudgetPlan.ErrorCodes),
        DeleteCategoryBudgetPlan: cqrsClient.createCommand<Kontomierz.Core.Contracts.Budgets.DeleteCategoryBudgetPlan, Kontomierz.Core.Contracts.Budgets.DeleteCategoryBudgetPlan.ErrorCodes>(\\"Kontomierz.Core.Contracts.Budgets.DeleteCategoryBudgetPlan\\", Kontomierz.Core.Contracts.Budgets.DeleteCategoryBudgetPlan.ErrorCodes),
        MyBudgetInBillingCycle: cqrsClient.createQuery<Kontomierz.Core.Contracts.Budgets.MyBudgetInBillingCycle, Kontomierz.Core.Contracts.Budgets.BudgetDTO | null | undefined>(\\"Kontomierz.Core.Contracts.Budgets.MyBudgetInBillingCycle\\"),
        PlanCategoryBudget: cqrsClient.createCommand<Kontomierz.Core.Contracts.Budgets.PlanCategoryBudget, Kontomierz.Core.Contracts.Budgets.PlanCategoryBudget.ErrorCodes>(\\"Kontomierz.Core.Contracts.Budgets.PlanCategoryBudget\\", Kontomierz.Core.Contracts.Budgets.PlanCategoryBudget.ErrorCodes),
        PlanOtherCategoriesBudget: cqrsClient.createCommand<Kontomierz.Core.Contracts.Budgets.PlanOtherCategoriesBudget, Kontomierz.Core.Contracts.Budgets.PlanOtherCategoriesBudget.ErrorCodes>(\\"Kontomierz.Core.Contracts.Budgets.PlanOtherCategoriesBudget\\", Kontomierz.Core.Contracts.Budgets.PlanOtherCategoriesBudget.ErrorCodes),
        AddCategory: cqrsClient.createCommand<Kontomierz.Core.Contracts.Categories.AddCategory, Kontomierz.Core.Contracts.Categories.AddCategory.ErrorCodes>(\\"Kontomierz.Core.Contracts.Categories.AddCategory\\", Kontomierz.Core.Contracts.Categories.AddCategory.ErrorCodes),
        AddCategoryGroup: cqrsClient.createCommand<Kontomierz.Core.Contracts.Categories.AddCategoryGroup, Kontomierz.Core.Contracts.Categories.AddCategoryGroup.ErrorCodes>(\\"Kontomierz.Core.Contracts.Categories.AddCategoryGroup\\", Kontomierz.Core.Contracts.Categories.AddCategoryGroup.ErrorCodes),
        CategoryBalances: cqrsClient.createQuery<Kontomierz.Core.Contracts.Categories.CategoryBalances, Kontomierz.Core.Contracts.Categories.CategoryBalancesDTO>(\\"Kontomierz.Core.Contracts.Categories.CategoryBalances\\"),
        CategoryBalancesSummary: cqrsClient.createQuery<Kontomierz.Core.Contracts.Categories.CategoryBalancesSummary, Kontomierz.Core.Contracts.Categories.CategoryGroupBalanceSummaryDTO[]>(\\"Kontomierz.Core.Contracts.Categories.CategoryBalancesSummary\\"),
        DeleteCategory: cqrsClient.createCommand<Kontomierz.Core.Contracts.Categories.DeleteCategory, Kontomierz.Core.Contracts.Categories.DeleteCategory.ErrorCodes>(\\"Kontomierz.Core.Contracts.Categories.DeleteCategory\\", Kontomierz.Core.Contracts.Categories.DeleteCategory.ErrorCodes),
        DeleteCategoryGroup: cqrsClient.createCommand<Kontomierz.Core.Contracts.Categories.DeleteCategoryGroup, Kontomierz.Core.Contracts.Categories.DeleteCategoryGroup.ErrorCodes>(\\"Kontomierz.Core.Contracts.Categories.DeleteCategoryGroup\\", Kontomierz.Core.Contracts.Categories.DeleteCategoryGroup.ErrorCodes),
        EditCategoriesRelations: cqrsClient.createCommand<Kontomierz.Core.Contracts.Categories.EditCategoriesRelations, Kontomierz.Core.Contracts.Categories.EditCategoriesRelations.ErrorCodes>(\\"Kontomierz.Core.Contracts.Categories.EditCategoriesRelations\\", Kontomierz.Core.Contracts.Categories.EditCategoriesRelations.ErrorCodes),
        EditCategory: cqrsClient.createCommand<Kontomierz.Core.Contracts.Categories.EditCategory, Kontomierz.Core.Contracts.Categories.EditCategory.ErrorCodes>(\\"Kontomierz.Core.Contracts.Categories.EditCategory\\", Kontomierz.Core.Contracts.Categories.EditCategory.ErrorCodes),
        EditCategoryGroup: cqrsClient.createCommand<Kontomierz.Core.Contracts.Categories.EditCategoryGroup, Kontomierz.Core.Contracts.Categories.EditCategoryGroup.ErrorCodes>(\\"Kontomierz.Core.Contracts.Categories.EditCategoryGroup\\", Kontomierz.Core.Contracts.Categories.EditCategoryGroup.ErrorCodes),
        MyCategories: cqrsClient.createQuery<Kontomierz.Core.Contracts.Categories.MyCategories, Kontomierz.Core.Contracts.Categories.MyCategoriesDTO>(\\"Kontomierz.Core.Contracts.Categories.MyCategories\\"),
        RequestImportFromKontomatik: cqrsClient.createQuery<Kontomierz.Core.Contracts.Imports.RequestImportFromKontomatik, Kontomierz.Core.Contracts.Imports.RequestImportFromKontomatikResponseDTO>(\\"Kontomierz.Core.Contracts.Imports.RequestImportFromKontomatik\\"),
        StartImportingAllBankAccountsWithMultipleAccess: cqrsClient.createCommand<Kontomierz.Core.Contracts.Imports.StartImportingAllBankAccountsWithMultipleAccess, Kontomierz.Core.Contracts.Imports.StartImportingAllBankAccountsWithMultipleAccess.ErrorCodes>(\\"Kontomierz.Core.Contracts.Imports.StartImportingAllBankAccountsWithMultipleAccess\\", Kontomierz.Core.Contracts.Imports.StartImportingAllBankAccountsWithMultipleAccess.ErrorCodes),
        AssignCustomSubtransactionTitle: cqrsClient.createCommand<Kontomierz.Core.Contracts.Transactions.AssignCustomSubtransactionTitle, Kontomierz.Core.Contracts.Transactions.AssignCustomSubtransactionTitle.ErrorCodes>(\\"Kontomierz.Core.Contracts.Transactions.AssignCustomSubtransactionTitle\\", Kontomierz.Core.Contracts.Transactions.AssignCustomSubtransactionTitle.ErrorCodes),
        AssignCustomTransactionTitle: cqrsClient.createCommand<Kontomierz.Core.Contracts.Transactions.AssignCustomTransactionTitle, Kontomierz.Core.Contracts.Transactions.AssignCustomTransactionTitle.ErrorCodes>(\\"Kontomierz.Core.Contracts.Transactions.AssignCustomTransactionTitle\\", Kontomierz.Core.Contracts.Transactions.AssignCustomTransactionTitle.ErrorCodes),
        BalanceSummary: cqrsClient.createQuery<Kontomierz.Core.Contracts.Transactions.BalanceSummary, Kontomierz.Core.Contracts.Transactions.BalanceSummaryDTO>(\\"Kontomierz.Core.Contracts.Transactions.BalanceSummary\\"),
        BalancesByBillingCycles: cqrsClient.createQuery<Kontomierz.Core.Contracts.Transactions.BalancesByBillingCycles, Kontomierz.Core.Contracts.Transactions.BalanceInBillingCycleDTO[]>(\\"Kontomierz.Core.Contracts.Transactions.BalancesByBillingCycles\\"),
        ConfirmTransactionCategory: cqrsClient.createCommand<Kontomierz.Core.Contracts.Transactions.ConfirmTransactionCategory, Kontomierz.Core.Contracts.Transactions.ConfirmTransactionCategory.ErrorCodes>(\\"Kontomierz.Core.Contracts.Transactions.ConfirmTransactionCategory\\", Kontomierz.Core.Contracts.Transactions.ConfirmTransactionCategory.ErrorCodes),
        CreateWalletTransaction: cqrsClient.createCommand<Kontomierz.Core.Contracts.Transactions.CreateWalletTransaction, Kontomierz.Core.Contracts.Transactions.CreateWalletTransaction.ErrorCodes>(\\"Kontomierz.Core.Contracts.Transactions.CreateWalletTransaction\\", Kontomierz.Core.Contracts.Transactions.CreateWalletTransaction.ErrorCodes),
        DeleteTransaction: cqrsClient.createCommand<Kontomierz.Core.Contracts.Transactions.DeleteTransaction, Kontomierz.Core.Contracts.Transactions.DeleteTransaction.ErrorCodes>(\\"Kontomierz.Core.Contracts.Transactions.DeleteTransaction\\", Kontomierz.Core.Contracts.Transactions.DeleteTransaction.ErrorCodes),
        EditWalletTransaction: cqrsClient.createCommand<Kontomierz.Core.Contracts.Transactions.EditWalletTransaction, Kontomierz.Core.Contracts.Transactions.EditWalletTransaction.ErrorCodes>(\\"Kontomierz.Core.Contracts.Transactions.EditWalletTransaction\\", Kontomierz.Core.Contracts.Transactions.EditWalletTransaction.ErrorCodes),
        MarkAsIrrelevant: cqrsClient.createCommand<Kontomierz.Core.Contracts.Transactions.MarkAsIrrelevant, Kontomierz.Core.Contracts.Transactions.MarkAsIrrelevant.ErrorCodes>(\\"Kontomierz.Core.Contracts.Transactions.MarkAsIrrelevant\\", Kontomierz.Core.Contracts.Transactions.MarkAsIrrelevant.ErrorCodes),
        MarkAsRelevant: cqrsClient.createCommand<Kontomierz.Core.Contracts.Transactions.MarkAsRelevant, Kontomierz.Core.Contracts.Transactions.MarkAsRelevant.ErrorCodes>(\\"Kontomierz.Core.Contracts.Transactions.MarkAsRelevant\\", Kontomierz.Core.Contracts.Transactions.MarkAsRelevant.ErrorCodes),
        OverrideTransactionCategory: cqrsClient.createCommand<Kontomierz.Core.Contracts.Transactions.OverrideTransactionCategory, Kontomierz.Core.Contracts.Transactions.OverrideTransactionCategory.ErrorCodes>(\\"Kontomierz.Core.Contracts.Transactions.OverrideTransactionCategory\\", Kontomierz.Core.Contracts.Transactions.OverrideTransactionCategory.ErrorCodes),
        PaginatedTransactions: cqrsClient.createQuery<Kontomierz.Core.Contracts.Transactions.PaginatedTransactions, Kontomierz.Core.Contracts.PaginatedResult<Kontomierz.Core.Contracts.Transactions.TransactionDTO>>(\\"Kontomierz.Core.Contracts.Transactions.PaginatedTransactions\\"),
        SplitTransaction: cqrsClient.createCommand<Kontomierz.Core.Contracts.Transactions.SplitTransaction, Kontomierz.Core.Contracts.Transactions.SplitTransaction.ErrorCodes>(\\"Kontomierz.Core.Contracts.Transactions.SplitTransaction\\", Kontomierz.Core.Contracts.Transactions.SplitTransaction.ErrorCodes),
        UpdateTransactionComment: cqrsClient.createCommand<Kontomierz.Core.Contracts.Transactions.UpdateTransactionComment, Kontomierz.Core.Contracts.Transactions.UpdateTransactionComment.ErrorCodes>(\\"Kontomierz.Core.Contracts.Transactions.UpdateTransactionComment\\", Kontomierz.Core.Contracts.Transactions.UpdateTransactionComment.ErrorCodes),
        CreateDemoSession: cqrsClient.createQuery<Kontomierz.Core.Contracts.Users.CreateDemoSession, string>(\\"Kontomierz.Core.Contracts.Users.CreateDemoSession\\"),
        NewTestUserSession: cqrsClient.createQuery<Kontomierz.Core.Contracts.Users.NewTestUserSession, string | null | undefined>(\\"Kontomierz.Core.Contracts.Users.NewTestUserSession\\"),
        RegulationsLinks: cqrsClient.createQuery<Kontomierz.Core.Contracts.Users.RegulationsLinks, Kontomierz.Core.Contracts.Users.RegulationsDTO>(\\"Kontomierz.Core.Contracts.Users.RegulationsLinks\\"),
        CreateWallet: cqrsClient.createCommand<Kontomierz.Core.Contracts.Wallets.CreateWallet, Kontomierz.Core.Contracts.Wallets.CreateWallet.ErrorCodes>(\\"Kontomierz.Core.Contracts.Wallets.CreateWallet\\", Kontomierz.Core.Contracts.Wallets.CreateWallet.ErrorCodes),
        DeleteWallet: cqrsClient.createCommand<Kontomierz.Core.Contracts.Wallets.DeleteWallet, Kontomierz.Core.Contracts.Wallets.DeleteWallet.ErrorCodes>(\\"Kontomierz.Core.Contracts.Wallets.DeleteWallet\\", Kontomierz.Core.Contracts.Wallets.DeleteWallet.ErrorCodes),
        EditWallet: cqrsClient.createCommand<Kontomierz.Core.Contracts.Wallets.EditWallet, Kontomierz.Core.Contracts.Wallets.EditWallet.ErrorCodes>(\\"Kontomierz.Core.Contracts.Wallets.EditWallet\\", Kontomierz.Core.Contracts.Wallets.EditWallet.ErrorCodes),
        MyWallets: cqrsClient.createQuery<Kontomierz.Core.Contracts.Wallets.MyWallets, Kontomierz.Core.Contracts.Wallets.WalletDTO[]>(\\"Kontomierz.Core.Contracts.Wallets.MyWallets\\")
    };
}
"
`;

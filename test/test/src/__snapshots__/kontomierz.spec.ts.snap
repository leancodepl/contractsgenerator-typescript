// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`kontomierz generates admin 1`] = `
Object {
  "test.ts": "const schema = {
    \\"components\\": [
        {
            \\"type\\": \\"table\\",
            \\"table\\": {
                \\"query\\": \\"MyWallets\\",
                \\"columns\\": [
                    {
                        \\"id\\": \\"Name\\",
                        \\"title\\": \\"Nazwa\\",
                        \\"sortable\\": false,
                        \\"type\\": 1,
                        \\"filter\\": {
                            \\"variant\\": \\"range\\",
                            \\"field\\": \\"NameFilter\\",
                            \\"type\\": 1
                        }
                    },
                    {
                        \\"id\\": \\"DateCreated\\",
                        \\"title\\": \\"Data stworzenia\\",
                        \\"sortable\\": false,
                        \\"type\\": 202
                    },
                    {
                        \\"id\\": \\"MigrationStatus\\",
                        \\"title\\": \\"Przyk≈Çadowy enum\\",
                        \\"sortable\\": false,
                        \\"type\\": \\"Kontomierz.Finances.Contracts.Migrations.MigrationStatusDTO\\"
                    }
                ]
            }
        }
    ],
    \\"enumsMaps\\": {
        \\"Kontomierz.Finances.Contracts.Migrations.MigrationStatusDTO\\": [
            [
                0,
                \\"NotStarted\\"
            ],
            [
                1,
                \\"InProgress\\"
            ]
        ]
    }
} as const;

export default schema;",
}
`;

exports[`kontomierz generates client with custom types map 1`] = `
Object {
  "test.ts": "export default function (cqrsClient: CQRS) {
    return {
        AssignCustomBankAccountName: cqrsClient.createCommand<Kontomierz.Finances.Contracts.BankAccounts.AssignCustomBankAccountName, Kontomierz.Finances.Contracts.BankAccounts.AssignCustomBankAccountName.ErrorCodes>(\\"Kontomierz.Finances.Contracts.BankAccounts.AssignCustomBankAccountName\\", Kontomierz.Finances.Contracts.BankAccounts.AssignCustomBankAccountName.ErrorCodes),
        DeleteBankAccount: cqrsClient.createCommand<Kontomierz.Finances.Contracts.BankAccounts.DeleteBankAccount, Kontomierz.Finances.Contracts.BankAccounts.DeleteBankAccount.ErrorCodes>(\\"Kontomierz.Finances.Contracts.BankAccounts.DeleteBankAccount\\", Kontomierz.Finances.Contracts.BankAccounts.DeleteBankAccount.ErrorCodes),
        MyBankAccounts: cqrsClient.createQuery<Kontomierz.Finances.Contracts.BankAccounts.MyBankAccounts, Kontomierz.Finances.Contracts.BankAccounts.MyBankAccountsDTO>(\\"Kontomierz.Finances.Contracts.BankAccounts.MyBankAccounts\\"),
        BudgetSummary: cqrsClient.createQuery<Kontomierz.Finances.Contracts.Budgets.BudgetSummary, Kontomierz.Finances.Contracts.Budgets.BudgetSummaryDTO>(\\"Kontomierz.Finances.Contracts.Budgets.BudgetSummary\\"),
        CopyBudgetValidation: cqrsClient.createQuery<Kontomierz.Finances.Contracts.Budgets.CopyBudgetValidation, Kontomierz.Finances.Contracts.Budgets.CopyBudgetValidationDTO>(\\"Kontomierz.Finances.Contracts.Budgets.CopyBudgetValidation\\"),
        CopyMostRecentBudgetPlan: cqrsClient.createCommand<Kontomierz.Finances.Contracts.Budgets.CopyMostRecentBudgetPlan, Kontomierz.Finances.Contracts.Budgets.CopyMostRecentBudgetPlan.ErrorCodes>(\\"Kontomierz.Finances.Contracts.Budgets.CopyMostRecentBudgetPlan\\", Kontomierz.Finances.Contracts.Budgets.CopyMostRecentBudgetPlan.ErrorCodes),
        DeleteCategoryBudgetPlan: cqrsClient.createCommand<Kontomierz.Finances.Contracts.Budgets.DeleteCategoryBudgetPlan, Kontomierz.Finances.Contracts.Budgets.DeleteCategoryBudgetPlan.ErrorCodes>(\\"Kontomierz.Finances.Contracts.Budgets.DeleteCategoryBudgetPlan\\", Kontomierz.Finances.Contracts.Budgets.DeleteCategoryBudgetPlan.ErrorCodes),
        MyBudgetInBillingCycle: cqrsClient.createQuery<Kontomierz.Finances.Contracts.Budgets.MyBudgetInBillingCycle, Kontomierz.Finances.Contracts.Budgets.BudgetDTO | null | undefined>(\\"Kontomierz.Finances.Contracts.Budgets.MyBudgetInBillingCycle\\"),
        PlanCategoryBudget: cqrsClient.createCommand<Kontomierz.Finances.Contracts.Budgets.PlanCategoryBudget, Kontomierz.Finances.Contracts.Budgets.PlanCategoryBudget.ErrorCodes>(\\"Kontomierz.Finances.Contracts.Budgets.PlanCategoryBudget\\", Kontomierz.Finances.Contracts.Budgets.PlanCategoryBudget.ErrorCodes),
        PlanOtherCategoriesBudget: cqrsClient.createCommand<Kontomierz.Finances.Contracts.Budgets.PlanOtherCategoriesBudget, Kontomierz.Finances.Contracts.Budgets.PlanOtherCategoriesBudget.ErrorCodes>(\\"Kontomierz.Finances.Contracts.Budgets.PlanOtherCategoriesBudget\\", Kontomierz.Finances.Contracts.Budgets.PlanOtherCategoriesBudget.ErrorCodes),
        AddCategory: cqrsClient.createCommand<Kontomierz.Finances.Contracts.Categories.AddCategory, Kontomierz.Finances.Contracts.Categories.AddCategory.ErrorCodes>(\\"Kontomierz.Finances.Contracts.Categories.AddCategory\\", Kontomierz.Finances.Contracts.Categories.AddCategory.ErrorCodes),
        AddCategoryGroup: cqrsClient.createCommand<Kontomierz.Finances.Contracts.Categories.AddCategoryGroup, Kontomierz.Finances.Contracts.Categories.AddCategoryGroup.ErrorCodes>(\\"Kontomierz.Finances.Contracts.Categories.AddCategoryGroup\\", Kontomierz.Finances.Contracts.Categories.AddCategoryGroup.ErrorCodes),
        CategoryBalances: cqrsClient.createQuery<Kontomierz.Finances.Contracts.Categories.CategoryBalances, Kontomierz.Finances.Contracts.Categories.CategoryBalancesDTO>(\\"Kontomierz.Finances.Contracts.Categories.CategoryBalances\\"),
        CategoryBalancesSummary: cqrsClient.createQuery<Kontomierz.Finances.Contracts.Categories.CategoryBalancesSummary, Kontomierz.Finances.Contracts.Categories.CategoryGroupBalanceSummaryDTO[]>(\\"Kontomierz.Finances.Contracts.Categories.CategoryBalancesSummary\\"),
        DeleteCategory: cqrsClient.createCommand<Kontomierz.Finances.Contracts.Categories.DeleteCategory, Kontomierz.Finances.Contracts.Categories.DeleteCategory.ErrorCodes>(\\"Kontomierz.Finances.Contracts.Categories.DeleteCategory\\", Kontomierz.Finances.Contracts.Categories.DeleteCategory.ErrorCodes),
        DeleteCategoryGroup: cqrsClient.createCommand<Kontomierz.Finances.Contracts.Categories.DeleteCategoryGroup, Kontomierz.Finances.Contracts.Categories.DeleteCategoryGroup.ErrorCodes>(\\"Kontomierz.Finances.Contracts.Categories.DeleteCategoryGroup\\", Kontomierz.Finances.Contracts.Categories.DeleteCategoryGroup.ErrorCodes),
        EditCategoriesRelations: cqrsClient.createCommand<Kontomierz.Finances.Contracts.Categories.EditCategoriesRelations, Kontomierz.Finances.Contracts.Categories.EditCategoriesRelations.ErrorCodes>(\\"Kontomierz.Finances.Contracts.Categories.EditCategoriesRelations\\", Kontomierz.Finances.Contracts.Categories.EditCategoriesRelations.ErrorCodes),
        EditCategory: cqrsClient.createCommand<Kontomierz.Finances.Contracts.Categories.EditCategory, Kontomierz.Finances.Contracts.Categories.EditCategory.ErrorCodes>(\\"Kontomierz.Finances.Contracts.Categories.EditCategory\\", Kontomierz.Finances.Contracts.Categories.EditCategory.ErrorCodes),
        EditCategoryGroup: cqrsClient.createCommand<Kontomierz.Finances.Contracts.Categories.EditCategoryGroup, Kontomierz.Finances.Contracts.Categories.EditCategoryGroup.ErrorCodes>(\\"Kontomierz.Finances.Contracts.Categories.EditCategoryGroup\\", Kontomierz.Finances.Contracts.Categories.EditCategoryGroup.ErrorCodes),
        MyCategories: cqrsClient.createQuery<Kontomierz.Finances.Contracts.Categories.MyCategories, Kontomierz.Finances.Contracts.Categories.MyCategoriesDTO>(\\"Kontomierz.Finances.Contracts.Categories.MyCategories\\"),
        MigrationState: cqrsClient.createQuery<Kontomierz.Finances.Contracts.Migrations.MigrationState, Kontomierz.Finances.Contracts.Migrations.MigrationStateDTO>(\\"Kontomierz.Finances.Contracts.Migrations.MigrationState\\"),
        StartMigration: cqrsClient.createCommand<Kontomierz.Finances.Contracts.Migrations.StartMigration, Kontomierz.Finances.Contracts.Migrations.StartMigration.ErrorCodes>(\\"Kontomierz.Finances.Contracts.Migrations.StartMigration\\", Kontomierz.Finances.Contracts.Migrations.StartMigration.ErrorCodes),
        AssignCustomSubtransactionTitle: cqrsClient.createCommand<Kontomierz.Finances.Contracts.Transactions.AssignCustomSubtransactionTitle, Kontomierz.Finances.Contracts.Transactions.AssignCustomSubtransactionTitle.ErrorCodes>(\\"Kontomierz.Finances.Contracts.Transactions.AssignCustomSubtransactionTitle\\", Kontomierz.Finances.Contracts.Transactions.AssignCustomSubtransactionTitle.ErrorCodes),
        AssignCustomTransactionTitle: cqrsClient.createCommand<Kontomierz.Finances.Contracts.Transactions.AssignCustomTransactionTitle, Kontomierz.Finances.Contracts.Transactions.AssignCustomTransactionTitle.ErrorCodes>(\\"Kontomierz.Finances.Contracts.Transactions.AssignCustomTransactionTitle\\", Kontomierz.Finances.Contracts.Transactions.AssignCustomTransactionTitle.ErrorCodes),
        BalanceInBillingCycle: cqrsClient.createQuery<Kontomierz.Finances.Contracts.Transactions.BalanceInBillingCycle, Kontomierz.Finances.Contracts.Transactions.BalanceInBillingCycleWithComparisonDTO>(\\"Kontomierz.Finances.Contracts.Transactions.BalanceInBillingCycle\\"),
        BalanceSummary: cqrsClient.createQuery<Kontomierz.Finances.Contracts.Transactions.BalanceSummary, Kontomierz.Finances.Contracts.Transactions.BalanceSummaryDTO>(\\"Kontomierz.Finances.Contracts.Transactions.BalanceSummary\\"),
        BalancesByBillingCycles: cqrsClient.createQuery<Kontomierz.Finances.Contracts.Transactions.BalancesByBillingCycles, Kontomierz.Finances.Contracts.Transactions.BalanceInBillingCycleDTO[]>(\\"Kontomierz.Finances.Contracts.Transactions.BalancesByBillingCycles\\"),
        BulkDeleteTransactions: cqrsClient.createCommand<Kontomierz.Finances.Contracts.Transactions.BulkActions.BulkDeleteTransactions, Kontomierz.Finances.Contracts.Transactions.BulkActions.BulkDeleteTransactions.ErrorCodes>(\\"Kontomierz.Finances.Contracts.Transactions.BulkActions.BulkDeleteTransactions\\", Kontomierz.Finances.Contracts.Transactions.BulkActions.BulkDeleteTransactions.ErrorCodes),
        BulkMarkAsIrrelevant: cqrsClient.createCommand<Kontomierz.Finances.Contracts.Transactions.BulkActions.BulkMarkAsIrrelevant, Kontomierz.Finances.Contracts.Transactions.BulkActions.BulkMarkAsIrrelevant.ErrorCodes>(\\"Kontomierz.Finances.Contracts.Transactions.BulkActions.BulkMarkAsIrrelevant\\", Kontomierz.Finances.Contracts.Transactions.BulkActions.BulkMarkAsIrrelevant.ErrorCodes),
        BulkMarkAsRelevant: cqrsClient.createCommand<Kontomierz.Finances.Contracts.Transactions.BulkActions.BulkMarkAsRelevant, Kontomierz.Finances.Contracts.Transactions.BulkActions.BulkMarkAsRelevant.ErrorCodes>(\\"Kontomierz.Finances.Contracts.Transactions.BulkActions.BulkMarkAsRelevant\\", Kontomierz.Finances.Contracts.Transactions.BulkActions.BulkMarkAsRelevant.ErrorCodes),
        BulkOverrideTransactionCategories: cqrsClient.createCommand<Kontomierz.Finances.Contracts.Transactions.BulkActions.BulkOverrideTransactionCategories, Kontomierz.Finances.Contracts.Transactions.BulkActions.BulkOverrideTransactionCategories.ErrorCodes>(\\"Kontomierz.Finances.Contracts.Transactions.BulkActions.BulkOverrideTransactionCategories\\", Kontomierz.Finances.Contracts.Transactions.BulkActions.BulkOverrideTransactionCategories.ErrorCodes),
        ConfirmTransactionCategory: cqrsClient.createCommand<Kontomierz.Finances.Contracts.Transactions.ConfirmTransactionCategory, Kontomierz.Finances.Contracts.Transactions.ConfirmTransactionCategory.ErrorCodes>(\\"Kontomierz.Finances.Contracts.Transactions.ConfirmTransactionCategory\\", Kontomierz.Finances.Contracts.Transactions.ConfirmTransactionCategory.ErrorCodes),
        CreateWalletTransaction: cqrsClient.createCommand<Kontomierz.Finances.Contracts.Transactions.CreateWalletTransaction, Kontomierz.Finances.Contracts.Transactions.CreateWalletTransaction.ErrorCodes>(\\"Kontomierz.Finances.Contracts.Transactions.CreateWalletTransaction\\", Kontomierz.Finances.Contracts.Transactions.CreateWalletTransaction.ErrorCodes),
        DeleteTransaction: cqrsClient.createCommand<Kontomierz.Finances.Contracts.Transactions.DeleteTransaction, Kontomierz.Finances.Contracts.Transactions.DeleteTransaction.ErrorCodes>(\\"Kontomierz.Finances.Contracts.Transactions.DeleteTransaction\\", Kontomierz.Finances.Contracts.Transactions.DeleteTransaction.ErrorCodes),
        EditWalletTransaction: cqrsClient.createCommand<Kontomierz.Finances.Contracts.Transactions.EditWalletTransaction, Kontomierz.Finances.Contracts.Transactions.EditWalletTransaction.ErrorCodes>(\\"Kontomierz.Finances.Contracts.Transactions.EditWalletTransaction\\", Kontomierz.Finances.Contracts.Transactions.EditWalletTransaction.ErrorCodes),
        MarkAsIrrelevant: cqrsClient.createCommand<Kontomierz.Finances.Contracts.Transactions.MarkAsIrrelevant, Kontomierz.Finances.Contracts.Transactions.MarkAsIrrelevant.ErrorCodes>(\\"Kontomierz.Finances.Contracts.Transactions.MarkAsIrrelevant\\", Kontomierz.Finances.Contracts.Transactions.MarkAsIrrelevant.ErrorCodes),
        MarkAsRelevant: cqrsClient.createCommand<Kontomierz.Finances.Contracts.Transactions.MarkAsRelevant, Kontomierz.Finances.Contracts.Transactions.MarkAsRelevant.ErrorCodes>(\\"Kontomierz.Finances.Contracts.Transactions.MarkAsRelevant\\", Kontomierz.Finances.Contracts.Transactions.MarkAsRelevant.ErrorCodes),
        OverrideTransactionCategory: cqrsClient.createCommand<Kontomierz.Finances.Contracts.Transactions.OverrideTransactionCategory, Kontomierz.Finances.Contracts.Transactions.OverrideTransactionCategory.ErrorCodes>(\\"Kontomierz.Finances.Contracts.Transactions.OverrideTransactionCategory\\", Kontomierz.Finances.Contracts.Transactions.OverrideTransactionCategory.ErrorCodes),
        PaginatedTransactions: cqrsClient.createQuery<Kontomierz.Finances.Contracts.Transactions.PaginatedTransactions, Kontomierz.Shared.Contracts.PaginatedResult<Kontomierz.Finances.Contracts.Transactions.TransactionDTO>>(\\"Kontomierz.Finances.Contracts.Transactions.PaginatedTransactions\\"),
        SplitTransaction: cqrsClient.createCommand<Kontomierz.Finances.Contracts.Transactions.SplitTransaction, Kontomierz.Finances.Contracts.Transactions.SplitTransaction.ErrorCodes>(\\"Kontomierz.Finances.Contracts.Transactions.SplitTransaction\\", Kontomierz.Finances.Contracts.Transactions.SplitTransaction.ErrorCodes),
        MyTags: cqrsClient.createQuery<Kontomierz.Finances.Contracts.Transactions.Tags.MyTags, Kontomierz.Finances.Contracts.Transactions.Tags.TagDTO[]>(\\"Kontomierz.Finances.Contracts.Transactions.Tags.MyTags\\"),
        TagTransaction: cqrsClient.createCommand<Kontomierz.Finances.Contracts.Transactions.Tags.TagTransaction, Kontomierz.Finances.Contracts.Transactions.Tags.TagTransaction.ErrorCodes>(\\"Kontomierz.Finances.Contracts.Transactions.Tags.TagTransaction\\", Kontomierz.Finances.Contracts.Transactions.Tags.TagTransaction.ErrorCodes),
        UpdateTransactionAmount: cqrsClient.createCommand<Kontomierz.Finances.Contracts.Transactions.UpdateTransactionAmount, Kontomierz.Finances.Contracts.Transactions.UpdateTransactionAmount.ErrorCodes>(\\"Kontomierz.Finances.Contracts.Transactions.UpdateTransactionAmount\\", Kontomierz.Finances.Contracts.Transactions.UpdateTransactionAmount.ErrorCodes),
        UpdateTransactionComment: cqrsClient.createCommand<Kontomierz.Finances.Contracts.Transactions.UpdateTransactionComment, Kontomierz.Finances.Contracts.Transactions.UpdateTransactionComment.ErrorCodes>(\\"Kontomierz.Finances.Contracts.Transactions.UpdateTransactionComment\\", Kontomierz.Finances.Contracts.Transactions.UpdateTransactionComment.ErrorCodes),
        UpdateTransactionDate: cqrsClient.createCommand<Kontomierz.Finances.Contracts.Transactions.UpdateTransactionDate, Kontomierz.Finances.Contracts.Transactions.UpdateTransactionDate.ErrorCodes>(\\"Kontomierz.Finances.Contracts.Transactions.UpdateTransactionDate\\", Kontomierz.Finances.Contracts.Transactions.UpdateTransactionDate.ErrorCodes),
        CreateDemoSession: cqrsClient.createOperation<Kontomierz.Finances.Contracts.Users.CreateDemoSession, CustomStringImpl>(\\"Kontomierz.Finances.Contracts.Users.CreateDemoSession\\"),
        DismissMigrationsBanner: cqrsClient.createCommand<Kontomierz.Finances.Contracts.Users.DismissMigrationsBanner, {}>(\\"Kontomierz.Finances.Contracts.Users.DismissMigrationsBanner\\", {}),
        RegulationsLinks: cqrsClient.createQuery<Kontomierz.Finances.Contracts.Users.RegulationsLinks, Kontomierz.Finances.Contracts.Users.RegulationsDTO>(\\"Kontomierz.Finances.Contracts.Users.RegulationsLinks\\"),
        Settings: cqrsClient.createQuery<Kontomierz.Finances.Contracts.Users.Settings, Kontomierz.Finances.Contracts.Users.UserSettingsDTO>(\\"Kontomierz.Finances.Contracts.Users.Settings\\"),
        UpdateBillingCycleStartDay: cqrsClient.createCommand<Kontomierz.Finances.Contracts.Users.UpdateBillingCycleStartDay, Kontomierz.Finances.Contracts.Users.UpdateBillingCycleStartDay.ErrorCodes>(\\"Kontomierz.Finances.Contracts.Users.UpdateBillingCycleStartDay\\", Kontomierz.Finances.Contracts.Users.UpdateBillingCycleStartDay.ErrorCodes),
        VerifyAdditionalEmailForMigration: cqrsClient.createOperation<Kontomierz.Finances.Contracts.Users.VerifyAdditionalEmailForMigration, Kontomierz.Finances.Contracts.Users.VerifyAdditionalEmailForMigrationResultDTO>(\\"Kontomierz.Finances.Contracts.Users.VerifyAdditionalEmailForMigration\\"),
        CreateWallet: cqrsClient.createCommand<Kontomierz.Finances.Contracts.Wallets.CreateWallet, Kontomierz.Finances.Contracts.Wallets.CreateWallet.ErrorCodes>(\\"Kontomierz.Finances.Contracts.Wallets.CreateWallet\\", Kontomierz.Finances.Contracts.Wallets.CreateWallet.ErrorCodes),
        DeleteWallet: cqrsClient.createCommand<Kontomierz.Finances.Contracts.Wallets.DeleteWallet, Kontomierz.Finances.Contracts.Wallets.DeleteWallet.ErrorCodes>(\\"Kontomierz.Finances.Contracts.Wallets.DeleteWallet\\", Kontomierz.Finances.Contracts.Wallets.DeleteWallet.ErrorCodes),
        EditWallet: cqrsClient.createCommand<Kontomierz.Finances.Contracts.Wallets.EditWallet, Kontomierz.Finances.Contracts.Wallets.EditWallet.ErrorCodes>(\\"Kontomierz.Finances.Contracts.Wallets.EditWallet\\", Kontomierz.Finances.Contracts.Wallets.EditWallet.ErrorCodes),
        EditWalletBalance: cqrsClient.createCommand<Kontomierz.Finances.Contracts.Wallets.EditWalletBalance, Kontomierz.Finances.Contracts.Wallets.EditWalletBalance.ErrorCodes>(\\"Kontomierz.Finances.Contracts.Wallets.EditWalletBalance\\", Kontomierz.Finances.Contracts.Wallets.EditWalletBalance.ErrorCodes),
        MyWallets: cqrsClient.createQuery<Kontomierz.Finances.Contracts.Wallets.MyWallets, LeanCode.Contracts.Admin.AdminQueryResult<Kontomierz.Finances.Contracts.Wallets.WalletDTO>>(\\"Kontomierz.Finances.Contracts.Wallets.MyWallets\\"),
        TransferMoneyBetweenWallets: cqrsClient.createCommand<Kontomierz.Finances.Contracts.Wallets.TransferMoneyBetweenWallets, Kontomierz.Finances.Contracts.Wallets.TransferMoneyBetweenWallets.ErrorCodes>(\\"Kontomierz.Finances.Contracts.Wallets.TransferMoneyBetweenWallets\\", Kontomierz.Finances.Contracts.Wallets.TransferMoneyBetweenWallets.ErrorCodes),
        CreateWealthItem: cqrsClient.createCommand<Kontomierz.Finances.Contracts.WealthItems.CreateWealthItem, Kontomierz.Finances.Contracts.WealthItems.CreateWealthItem.ErrorCodes>(\\"Kontomierz.Finances.Contracts.WealthItems.CreateWealthItem\\", Kontomierz.Finances.Contracts.WealthItems.CreateWealthItem.ErrorCodes),
        DeleteWealthItem: cqrsClient.createCommand<Kontomierz.Finances.Contracts.WealthItems.DeleteWealthItem, Kontomierz.Finances.Contracts.WealthItems.DeleteWealthItem.ErrorCodes>(\\"Kontomierz.Finances.Contracts.WealthItems.DeleteWealthItem\\", Kontomierz.Finances.Contracts.WealthItems.DeleteWealthItem.ErrorCodes),
        EditWealthItem: cqrsClient.createCommand<Kontomierz.Finances.Contracts.WealthItems.EditWealthItem, Kontomierz.Finances.Contracts.WealthItems.EditWealthItem.ErrorCodes>(\\"Kontomierz.Finances.Contracts.WealthItems.EditWealthItem\\", Kontomierz.Finances.Contracts.WealthItems.EditWealthItem.ErrorCodes),
        MyTotalWealth: cqrsClient.createQuery<Kontomierz.Finances.Contracts.WealthItems.MyTotalWealth, Kontomierz.Finances.Contracts.WealthItems.MyTotalWealthDTO>(\\"Kontomierz.Finances.Contracts.WealthItems.MyTotalWealth\\"),
        MyWealthItems: cqrsClient.createQuery<Kontomierz.Finances.Contracts.WealthItems.MyWealthItems, Kontomierz.Finances.Contracts.WealthItems.MyWealthItemsDTO>(\\"Kontomierz.Finances.Contracts.WealthItems.MyWealthItems\\"),
        ExampleQuery: cqrsClient.createQuery<Kontomierz.Imports.Contracts.ExampleQuery, CustomStringImpl>(\\"Kontomierz.Imports.Contracts.ExampleQuery\\"),
        RequestImportFromKontomatik: cqrsClient.createCommand<Kontomierz.Imports.Contracts.Imports.RequestImportFromKontomatik, Kontomierz.Imports.Contracts.Imports.RequestImportFromKontomatik.ErrorCodes>(\\"Kontomierz.Imports.Contracts.Imports.RequestImportFromKontomatik\\", Kontomierz.Imports.Contracts.Imports.RequestImportFromKontomatik.ErrorCodes),
        StartImportingAllBankAccountsWithMultipleAccess: cqrsClient.createCommand<Kontomierz.Imports.Contracts.Imports.StartImportingAllBankAccountsWithMultipleAccess, Kontomierz.Imports.Contracts.Imports.StartImportingAllBankAccountsWithMultipleAccess.ErrorCodes>(\\"Kontomierz.Imports.Contracts.Imports.StartImportingAllBankAccountsWithMultipleAccess\\", Kontomierz.Imports.Contracts.Imports.StartImportingAllBankAccountsWithMultipleAccess.ErrorCodes),
        AdminQuery: cqrsClient.createQuery<LeanCode.Contracts.Admin.AdminQuery, LeanCode.Contracts.Admin.AdminQueryResult<TResult>>(\\"LeanCode.Contracts.Admin.AdminQuery\\")
    };
}
",
}
`;

exports[`kontomierz generates client with defaults 1`] = `
Object {
  "test.ts": "export default function (cqrsClient: CQRS) {
    return {
        AssignCustomBankAccountName: cqrsClient.createCommand<Kontomierz.Finances.Contracts.BankAccounts.AssignCustomBankAccountName, Kontomierz.Finances.Contracts.BankAccounts.AssignCustomBankAccountName.ErrorCodes>(\\"Kontomierz.Finances.Contracts.BankAccounts.AssignCustomBankAccountName\\", Kontomierz.Finances.Contracts.BankAccounts.AssignCustomBankAccountName.ErrorCodes),
        DeleteBankAccount: cqrsClient.createCommand<Kontomierz.Finances.Contracts.BankAccounts.DeleteBankAccount, Kontomierz.Finances.Contracts.BankAccounts.DeleteBankAccount.ErrorCodes>(\\"Kontomierz.Finances.Contracts.BankAccounts.DeleteBankAccount\\", Kontomierz.Finances.Contracts.BankAccounts.DeleteBankAccount.ErrorCodes),
        MyBankAccounts: cqrsClient.createQuery<Kontomierz.Finances.Contracts.BankAccounts.MyBankAccounts, Kontomierz.Finances.Contracts.BankAccounts.MyBankAccountsDTO>(\\"Kontomierz.Finances.Contracts.BankAccounts.MyBankAccounts\\"),
        BudgetSummary: cqrsClient.createQuery<Kontomierz.Finances.Contracts.Budgets.BudgetSummary, Kontomierz.Finances.Contracts.Budgets.BudgetSummaryDTO>(\\"Kontomierz.Finances.Contracts.Budgets.BudgetSummary\\"),
        CopyBudgetValidation: cqrsClient.createQuery<Kontomierz.Finances.Contracts.Budgets.CopyBudgetValidation, Kontomierz.Finances.Contracts.Budgets.CopyBudgetValidationDTO>(\\"Kontomierz.Finances.Contracts.Budgets.CopyBudgetValidation\\"),
        CopyMostRecentBudgetPlan: cqrsClient.createCommand<Kontomierz.Finances.Contracts.Budgets.CopyMostRecentBudgetPlan, Kontomierz.Finances.Contracts.Budgets.CopyMostRecentBudgetPlan.ErrorCodes>(\\"Kontomierz.Finances.Contracts.Budgets.CopyMostRecentBudgetPlan\\", Kontomierz.Finances.Contracts.Budgets.CopyMostRecentBudgetPlan.ErrorCodes),
        DeleteCategoryBudgetPlan: cqrsClient.createCommand<Kontomierz.Finances.Contracts.Budgets.DeleteCategoryBudgetPlan, Kontomierz.Finances.Contracts.Budgets.DeleteCategoryBudgetPlan.ErrorCodes>(\\"Kontomierz.Finances.Contracts.Budgets.DeleteCategoryBudgetPlan\\", Kontomierz.Finances.Contracts.Budgets.DeleteCategoryBudgetPlan.ErrorCodes),
        MyBudgetInBillingCycle: cqrsClient.createQuery<Kontomierz.Finances.Contracts.Budgets.MyBudgetInBillingCycle, Kontomierz.Finances.Contracts.Budgets.BudgetDTO | null | undefined>(\\"Kontomierz.Finances.Contracts.Budgets.MyBudgetInBillingCycle\\"),
        PlanCategoryBudget: cqrsClient.createCommand<Kontomierz.Finances.Contracts.Budgets.PlanCategoryBudget, Kontomierz.Finances.Contracts.Budgets.PlanCategoryBudget.ErrorCodes>(\\"Kontomierz.Finances.Contracts.Budgets.PlanCategoryBudget\\", Kontomierz.Finances.Contracts.Budgets.PlanCategoryBudget.ErrorCodes),
        PlanOtherCategoriesBudget: cqrsClient.createCommand<Kontomierz.Finances.Contracts.Budgets.PlanOtherCategoriesBudget, Kontomierz.Finances.Contracts.Budgets.PlanOtherCategoriesBudget.ErrorCodes>(\\"Kontomierz.Finances.Contracts.Budgets.PlanOtherCategoriesBudget\\", Kontomierz.Finances.Contracts.Budgets.PlanOtherCategoriesBudget.ErrorCodes),
        AddCategory: cqrsClient.createCommand<Kontomierz.Finances.Contracts.Categories.AddCategory, Kontomierz.Finances.Contracts.Categories.AddCategory.ErrorCodes>(\\"Kontomierz.Finances.Contracts.Categories.AddCategory\\", Kontomierz.Finances.Contracts.Categories.AddCategory.ErrorCodes),
        AddCategoryGroup: cqrsClient.createCommand<Kontomierz.Finances.Contracts.Categories.AddCategoryGroup, Kontomierz.Finances.Contracts.Categories.AddCategoryGroup.ErrorCodes>(\\"Kontomierz.Finances.Contracts.Categories.AddCategoryGroup\\", Kontomierz.Finances.Contracts.Categories.AddCategoryGroup.ErrorCodes),
        CategoryBalances: cqrsClient.createQuery<Kontomierz.Finances.Contracts.Categories.CategoryBalances, Kontomierz.Finances.Contracts.Categories.CategoryBalancesDTO>(\\"Kontomierz.Finances.Contracts.Categories.CategoryBalances\\"),
        CategoryBalancesSummary: cqrsClient.createQuery<Kontomierz.Finances.Contracts.Categories.CategoryBalancesSummary, Kontomierz.Finances.Contracts.Categories.CategoryGroupBalanceSummaryDTO[]>(\\"Kontomierz.Finances.Contracts.Categories.CategoryBalancesSummary\\"),
        DeleteCategory: cqrsClient.createCommand<Kontomierz.Finances.Contracts.Categories.DeleteCategory, Kontomierz.Finances.Contracts.Categories.DeleteCategory.ErrorCodes>(\\"Kontomierz.Finances.Contracts.Categories.DeleteCategory\\", Kontomierz.Finances.Contracts.Categories.DeleteCategory.ErrorCodes),
        DeleteCategoryGroup: cqrsClient.createCommand<Kontomierz.Finances.Contracts.Categories.DeleteCategoryGroup, Kontomierz.Finances.Contracts.Categories.DeleteCategoryGroup.ErrorCodes>(\\"Kontomierz.Finances.Contracts.Categories.DeleteCategoryGroup\\", Kontomierz.Finances.Contracts.Categories.DeleteCategoryGroup.ErrorCodes),
        EditCategoriesRelations: cqrsClient.createCommand<Kontomierz.Finances.Contracts.Categories.EditCategoriesRelations, Kontomierz.Finances.Contracts.Categories.EditCategoriesRelations.ErrorCodes>(\\"Kontomierz.Finances.Contracts.Categories.EditCategoriesRelations\\", Kontomierz.Finances.Contracts.Categories.EditCategoriesRelations.ErrorCodes),
        EditCategory: cqrsClient.createCommand<Kontomierz.Finances.Contracts.Categories.EditCategory, Kontomierz.Finances.Contracts.Categories.EditCategory.ErrorCodes>(\\"Kontomierz.Finances.Contracts.Categories.EditCategory\\", Kontomierz.Finances.Contracts.Categories.EditCategory.ErrorCodes),
        EditCategoryGroup: cqrsClient.createCommand<Kontomierz.Finances.Contracts.Categories.EditCategoryGroup, Kontomierz.Finances.Contracts.Categories.EditCategoryGroup.ErrorCodes>(\\"Kontomierz.Finances.Contracts.Categories.EditCategoryGroup\\", Kontomierz.Finances.Contracts.Categories.EditCategoryGroup.ErrorCodes),
        MyCategories: cqrsClient.createQuery<Kontomierz.Finances.Contracts.Categories.MyCategories, Kontomierz.Finances.Contracts.Categories.MyCategoriesDTO>(\\"Kontomierz.Finances.Contracts.Categories.MyCategories\\"),
        MigrationState: cqrsClient.createQuery<Kontomierz.Finances.Contracts.Migrations.MigrationState, Kontomierz.Finances.Contracts.Migrations.MigrationStateDTO>(\\"Kontomierz.Finances.Contracts.Migrations.MigrationState\\"),
        StartMigration: cqrsClient.createCommand<Kontomierz.Finances.Contracts.Migrations.StartMigration, Kontomierz.Finances.Contracts.Migrations.StartMigration.ErrorCodes>(\\"Kontomierz.Finances.Contracts.Migrations.StartMigration\\", Kontomierz.Finances.Contracts.Migrations.StartMigration.ErrorCodes),
        AssignCustomSubtransactionTitle: cqrsClient.createCommand<Kontomierz.Finances.Contracts.Transactions.AssignCustomSubtransactionTitle, Kontomierz.Finances.Contracts.Transactions.AssignCustomSubtransactionTitle.ErrorCodes>(\\"Kontomierz.Finances.Contracts.Transactions.AssignCustomSubtransactionTitle\\", Kontomierz.Finances.Contracts.Transactions.AssignCustomSubtransactionTitle.ErrorCodes),
        AssignCustomTransactionTitle: cqrsClient.createCommand<Kontomierz.Finances.Contracts.Transactions.AssignCustomTransactionTitle, Kontomierz.Finances.Contracts.Transactions.AssignCustomTransactionTitle.ErrorCodes>(\\"Kontomierz.Finances.Contracts.Transactions.AssignCustomTransactionTitle\\", Kontomierz.Finances.Contracts.Transactions.AssignCustomTransactionTitle.ErrorCodes),
        BalanceInBillingCycle: cqrsClient.createQuery<Kontomierz.Finances.Contracts.Transactions.BalanceInBillingCycle, Kontomierz.Finances.Contracts.Transactions.BalanceInBillingCycleWithComparisonDTO>(\\"Kontomierz.Finances.Contracts.Transactions.BalanceInBillingCycle\\"),
        BalanceSummary: cqrsClient.createQuery<Kontomierz.Finances.Contracts.Transactions.BalanceSummary, Kontomierz.Finances.Contracts.Transactions.BalanceSummaryDTO>(\\"Kontomierz.Finances.Contracts.Transactions.BalanceSummary\\"),
        BalancesByBillingCycles: cqrsClient.createQuery<Kontomierz.Finances.Contracts.Transactions.BalancesByBillingCycles, Kontomierz.Finances.Contracts.Transactions.BalanceInBillingCycleDTO[]>(\\"Kontomierz.Finances.Contracts.Transactions.BalancesByBillingCycles\\"),
        BulkDeleteTransactions: cqrsClient.createCommand<Kontomierz.Finances.Contracts.Transactions.BulkActions.BulkDeleteTransactions, Kontomierz.Finances.Contracts.Transactions.BulkActions.BulkDeleteTransactions.ErrorCodes>(\\"Kontomierz.Finances.Contracts.Transactions.BulkActions.BulkDeleteTransactions\\", Kontomierz.Finances.Contracts.Transactions.BulkActions.BulkDeleteTransactions.ErrorCodes),
        BulkMarkAsIrrelevant: cqrsClient.createCommand<Kontomierz.Finances.Contracts.Transactions.BulkActions.BulkMarkAsIrrelevant, Kontomierz.Finances.Contracts.Transactions.BulkActions.BulkMarkAsIrrelevant.ErrorCodes>(\\"Kontomierz.Finances.Contracts.Transactions.BulkActions.BulkMarkAsIrrelevant\\", Kontomierz.Finances.Contracts.Transactions.BulkActions.BulkMarkAsIrrelevant.ErrorCodes),
        BulkMarkAsRelevant: cqrsClient.createCommand<Kontomierz.Finances.Contracts.Transactions.BulkActions.BulkMarkAsRelevant, Kontomierz.Finances.Contracts.Transactions.BulkActions.BulkMarkAsRelevant.ErrorCodes>(\\"Kontomierz.Finances.Contracts.Transactions.BulkActions.BulkMarkAsRelevant\\", Kontomierz.Finances.Contracts.Transactions.BulkActions.BulkMarkAsRelevant.ErrorCodes),
        BulkOverrideTransactionCategories: cqrsClient.createCommand<Kontomierz.Finances.Contracts.Transactions.BulkActions.BulkOverrideTransactionCategories, Kontomierz.Finances.Contracts.Transactions.BulkActions.BulkOverrideTransactionCategories.ErrorCodes>(\\"Kontomierz.Finances.Contracts.Transactions.BulkActions.BulkOverrideTransactionCategories\\", Kontomierz.Finances.Contracts.Transactions.BulkActions.BulkOverrideTransactionCategories.ErrorCodes),
        ConfirmTransactionCategory: cqrsClient.createCommand<Kontomierz.Finances.Contracts.Transactions.ConfirmTransactionCategory, Kontomierz.Finances.Contracts.Transactions.ConfirmTransactionCategory.ErrorCodes>(\\"Kontomierz.Finances.Contracts.Transactions.ConfirmTransactionCategory\\", Kontomierz.Finances.Contracts.Transactions.ConfirmTransactionCategory.ErrorCodes),
        CreateWalletTransaction: cqrsClient.createCommand<Kontomierz.Finances.Contracts.Transactions.CreateWalletTransaction, Kontomierz.Finances.Contracts.Transactions.CreateWalletTransaction.ErrorCodes>(\\"Kontomierz.Finances.Contracts.Transactions.CreateWalletTransaction\\", Kontomierz.Finances.Contracts.Transactions.CreateWalletTransaction.ErrorCodes),
        DeleteTransaction: cqrsClient.createCommand<Kontomierz.Finances.Contracts.Transactions.DeleteTransaction, Kontomierz.Finances.Contracts.Transactions.DeleteTransaction.ErrorCodes>(\\"Kontomierz.Finances.Contracts.Transactions.DeleteTransaction\\", Kontomierz.Finances.Contracts.Transactions.DeleteTransaction.ErrorCodes),
        EditWalletTransaction: cqrsClient.createCommand<Kontomierz.Finances.Contracts.Transactions.EditWalletTransaction, Kontomierz.Finances.Contracts.Transactions.EditWalletTransaction.ErrorCodes>(\\"Kontomierz.Finances.Contracts.Transactions.EditWalletTransaction\\", Kontomierz.Finances.Contracts.Transactions.EditWalletTransaction.ErrorCodes),
        MarkAsIrrelevant: cqrsClient.createCommand<Kontomierz.Finances.Contracts.Transactions.MarkAsIrrelevant, Kontomierz.Finances.Contracts.Transactions.MarkAsIrrelevant.ErrorCodes>(\\"Kontomierz.Finances.Contracts.Transactions.MarkAsIrrelevant\\", Kontomierz.Finances.Contracts.Transactions.MarkAsIrrelevant.ErrorCodes),
        MarkAsRelevant: cqrsClient.createCommand<Kontomierz.Finances.Contracts.Transactions.MarkAsRelevant, Kontomierz.Finances.Contracts.Transactions.MarkAsRelevant.ErrorCodes>(\\"Kontomierz.Finances.Contracts.Transactions.MarkAsRelevant\\", Kontomierz.Finances.Contracts.Transactions.MarkAsRelevant.ErrorCodes),
        OverrideTransactionCategory: cqrsClient.createCommand<Kontomierz.Finances.Contracts.Transactions.OverrideTransactionCategory, Kontomierz.Finances.Contracts.Transactions.OverrideTransactionCategory.ErrorCodes>(\\"Kontomierz.Finances.Contracts.Transactions.OverrideTransactionCategory\\", Kontomierz.Finances.Contracts.Transactions.OverrideTransactionCategory.ErrorCodes),
        PaginatedTransactions: cqrsClient.createQuery<Kontomierz.Finances.Contracts.Transactions.PaginatedTransactions, Kontomierz.Shared.Contracts.PaginatedResult<Kontomierz.Finances.Contracts.Transactions.TransactionDTO>>(\\"Kontomierz.Finances.Contracts.Transactions.PaginatedTransactions\\"),
        SplitTransaction: cqrsClient.createCommand<Kontomierz.Finances.Contracts.Transactions.SplitTransaction, Kontomierz.Finances.Contracts.Transactions.SplitTransaction.ErrorCodes>(\\"Kontomierz.Finances.Contracts.Transactions.SplitTransaction\\", Kontomierz.Finances.Contracts.Transactions.SplitTransaction.ErrorCodes),
        MyTags: cqrsClient.createQuery<Kontomierz.Finances.Contracts.Transactions.Tags.MyTags, Kontomierz.Finances.Contracts.Transactions.Tags.TagDTO[]>(\\"Kontomierz.Finances.Contracts.Transactions.Tags.MyTags\\"),
        TagTransaction: cqrsClient.createCommand<Kontomierz.Finances.Contracts.Transactions.Tags.TagTransaction, Kontomierz.Finances.Contracts.Transactions.Tags.TagTransaction.ErrorCodes>(\\"Kontomierz.Finances.Contracts.Transactions.Tags.TagTransaction\\", Kontomierz.Finances.Contracts.Transactions.Tags.TagTransaction.ErrorCodes),
        UpdateTransactionAmount: cqrsClient.createCommand<Kontomierz.Finances.Contracts.Transactions.UpdateTransactionAmount, Kontomierz.Finances.Contracts.Transactions.UpdateTransactionAmount.ErrorCodes>(\\"Kontomierz.Finances.Contracts.Transactions.UpdateTransactionAmount\\", Kontomierz.Finances.Contracts.Transactions.UpdateTransactionAmount.ErrorCodes),
        UpdateTransactionComment: cqrsClient.createCommand<Kontomierz.Finances.Contracts.Transactions.UpdateTransactionComment, Kontomierz.Finances.Contracts.Transactions.UpdateTransactionComment.ErrorCodes>(\\"Kontomierz.Finances.Contracts.Transactions.UpdateTransactionComment\\", Kontomierz.Finances.Contracts.Transactions.UpdateTransactionComment.ErrorCodes),
        UpdateTransactionDate: cqrsClient.createCommand<Kontomierz.Finances.Contracts.Transactions.UpdateTransactionDate, Kontomierz.Finances.Contracts.Transactions.UpdateTransactionDate.ErrorCodes>(\\"Kontomierz.Finances.Contracts.Transactions.UpdateTransactionDate\\", Kontomierz.Finances.Contracts.Transactions.UpdateTransactionDate.ErrorCodes),
        CreateDemoSession: cqrsClient.createOperation<Kontomierz.Finances.Contracts.Users.CreateDemoSession, string>(\\"Kontomierz.Finances.Contracts.Users.CreateDemoSession\\"),
        DismissMigrationsBanner: cqrsClient.createCommand<Kontomierz.Finances.Contracts.Users.DismissMigrationsBanner, {}>(\\"Kontomierz.Finances.Contracts.Users.DismissMigrationsBanner\\", {}),
        RegulationsLinks: cqrsClient.createQuery<Kontomierz.Finances.Contracts.Users.RegulationsLinks, Kontomierz.Finances.Contracts.Users.RegulationsDTO>(\\"Kontomierz.Finances.Contracts.Users.RegulationsLinks\\"),
        Settings: cqrsClient.createQuery<Kontomierz.Finances.Contracts.Users.Settings, Kontomierz.Finances.Contracts.Users.UserSettingsDTO>(\\"Kontomierz.Finances.Contracts.Users.Settings\\"),
        UpdateBillingCycleStartDay: cqrsClient.createCommand<Kontomierz.Finances.Contracts.Users.UpdateBillingCycleStartDay, Kontomierz.Finances.Contracts.Users.UpdateBillingCycleStartDay.ErrorCodes>(\\"Kontomierz.Finances.Contracts.Users.UpdateBillingCycleStartDay\\", Kontomierz.Finances.Contracts.Users.UpdateBillingCycleStartDay.ErrorCodes),
        VerifyAdditionalEmailForMigration: cqrsClient.createOperation<Kontomierz.Finances.Contracts.Users.VerifyAdditionalEmailForMigration, Kontomierz.Finances.Contracts.Users.VerifyAdditionalEmailForMigrationResultDTO>(\\"Kontomierz.Finances.Contracts.Users.VerifyAdditionalEmailForMigration\\"),
        CreateWallet: cqrsClient.createCommand<Kontomierz.Finances.Contracts.Wallets.CreateWallet, Kontomierz.Finances.Contracts.Wallets.CreateWallet.ErrorCodes>(\\"Kontomierz.Finances.Contracts.Wallets.CreateWallet\\", Kontomierz.Finances.Contracts.Wallets.CreateWallet.ErrorCodes),
        DeleteWallet: cqrsClient.createCommand<Kontomierz.Finances.Contracts.Wallets.DeleteWallet, Kontomierz.Finances.Contracts.Wallets.DeleteWallet.ErrorCodes>(\\"Kontomierz.Finances.Contracts.Wallets.DeleteWallet\\", Kontomierz.Finances.Contracts.Wallets.DeleteWallet.ErrorCodes),
        EditWallet: cqrsClient.createCommand<Kontomierz.Finances.Contracts.Wallets.EditWallet, Kontomierz.Finances.Contracts.Wallets.EditWallet.ErrorCodes>(\\"Kontomierz.Finances.Contracts.Wallets.EditWallet\\", Kontomierz.Finances.Contracts.Wallets.EditWallet.ErrorCodes),
        EditWalletBalance: cqrsClient.createCommand<Kontomierz.Finances.Contracts.Wallets.EditWalletBalance, Kontomierz.Finances.Contracts.Wallets.EditWalletBalance.ErrorCodes>(\\"Kontomierz.Finances.Contracts.Wallets.EditWalletBalance\\", Kontomierz.Finances.Contracts.Wallets.EditWalletBalance.ErrorCodes),
        MyWallets: cqrsClient.createQuery<Kontomierz.Finances.Contracts.Wallets.MyWallets, LeanCode.Contracts.Admin.AdminQueryResult<Kontomierz.Finances.Contracts.Wallets.WalletDTO>>(\\"Kontomierz.Finances.Contracts.Wallets.MyWallets\\"),
        TransferMoneyBetweenWallets: cqrsClient.createCommand<Kontomierz.Finances.Contracts.Wallets.TransferMoneyBetweenWallets, Kontomierz.Finances.Contracts.Wallets.TransferMoneyBetweenWallets.ErrorCodes>(\\"Kontomierz.Finances.Contracts.Wallets.TransferMoneyBetweenWallets\\", Kontomierz.Finances.Contracts.Wallets.TransferMoneyBetweenWallets.ErrorCodes),
        CreateWealthItem: cqrsClient.createCommand<Kontomierz.Finances.Contracts.WealthItems.CreateWealthItem, Kontomierz.Finances.Contracts.WealthItems.CreateWealthItem.ErrorCodes>(\\"Kontomierz.Finances.Contracts.WealthItems.CreateWealthItem\\", Kontomierz.Finances.Contracts.WealthItems.CreateWealthItem.ErrorCodes),
        DeleteWealthItem: cqrsClient.createCommand<Kontomierz.Finances.Contracts.WealthItems.DeleteWealthItem, Kontomierz.Finances.Contracts.WealthItems.DeleteWealthItem.ErrorCodes>(\\"Kontomierz.Finances.Contracts.WealthItems.DeleteWealthItem\\", Kontomierz.Finances.Contracts.WealthItems.DeleteWealthItem.ErrorCodes),
        EditWealthItem: cqrsClient.createCommand<Kontomierz.Finances.Contracts.WealthItems.EditWealthItem, Kontomierz.Finances.Contracts.WealthItems.EditWealthItem.ErrorCodes>(\\"Kontomierz.Finances.Contracts.WealthItems.EditWealthItem\\", Kontomierz.Finances.Contracts.WealthItems.EditWealthItem.ErrorCodes),
        MyTotalWealth: cqrsClient.createQuery<Kontomierz.Finances.Contracts.WealthItems.MyTotalWealth, Kontomierz.Finances.Contracts.WealthItems.MyTotalWealthDTO>(\\"Kontomierz.Finances.Contracts.WealthItems.MyTotalWealth\\"),
        MyWealthItems: cqrsClient.createQuery<Kontomierz.Finances.Contracts.WealthItems.MyWealthItems, Kontomierz.Finances.Contracts.WealthItems.MyWealthItemsDTO>(\\"Kontomierz.Finances.Contracts.WealthItems.MyWealthItems\\"),
        ExampleQuery: cqrsClient.createQuery<Kontomierz.Imports.Contracts.ExampleQuery, string>(\\"Kontomierz.Imports.Contracts.ExampleQuery\\"),
        RequestImportFromKontomatik: cqrsClient.createCommand<Kontomierz.Imports.Contracts.Imports.RequestImportFromKontomatik, Kontomierz.Imports.Contracts.Imports.RequestImportFromKontomatik.ErrorCodes>(\\"Kontomierz.Imports.Contracts.Imports.RequestImportFromKontomatik\\", Kontomierz.Imports.Contracts.Imports.RequestImportFromKontomatik.ErrorCodes),
        StartImportingAllBankAccountsWithMultipleAccess: cqrsClient.createCommand<Kontomierz.Imports.Contracts.Imports.StartImportingAllBankAccountsWithMultipleAccess, Kontomierz.Imports.Contracts.Imports.StartImportingAllBankAccountsWithMultipleAccess.ErrorCodes>(\\"Kontomierz.Imports.Contracts.Imports.StartImportingAllBankAccountsWithMultipleAccess\\", Kontomierz.Imports.Contracts.Imports.StartImportingAllBankAccountsWithMultipleAccess.ErrorCodes),
        AdminQuery: cqrsClient.createQuery<LeanCode.Contracts.Admin.AdminQuery, LeanCode.Contracts.Admin.AdminQueryResult<TResult>>(\\"LeanCode.Contracts.Admin.AdminQuery\\")
    };
}
",
}
`;

exports[`kontomierz generates client with name transforms 1`] = `
Object {
  "test.ts": "export default function (cqrsClient: CQRS) {
    return {
        AssignCustomBankAccountName: cqrsClient.createCommand<AssignCustomBankAccountName, AssignCustomBankAccountName.ErrorCodes>(\\"Kontomierz.Finances.Contracts.BankAccounts.AssignCustomBankAccountName\\", AssignCustomBankAccountName.ErrorCodes),
        DeleteBankAccount: cqrsClient.createCommand<DeleteBankAccount, DeleteBankAccount.ErrorCodes>(\\"Kontomierz.Finances.Contracts.BankAccounts.DeleteBankAccount\\", DeleteBankAccount.ErrorCodes),
        MyBankAccounts: cqrsClient.createQuery<MyBankAccounts, MyBankAccountsDTO>(\\"Kontomierz.Finances.Contracts.BankAccounts.MyBankAccounts\\"),
        BudgetSummary: cqrsClient.createQuery<BudgetSummary, BudgetSummaryDTO>(\\"Kontomierz.Finances.Contracts.Budgets.BudgetSummary\\"),
        CopyBudgetValidation: cqrsClient.createQuery<CopyBudgetValidation, CopyBudgetValidationDTO>(\\"Kontomierz.Finances.Contracts.Budgets.CopyBudgetValidation\\"),
        CopyMostRecentBudgetPlan: cqrsClient.createCommand<CopyMostRecentBudgetPlan, CopyMostRecentBudgetPlan.ErrorCodes>(\\"Kontomierz.Finances.Contracts.Budgets.CopyMostRecentBudgetPlan\\", CopyMostRecentBudgetPlan.ErrorCodes),
        DeleteCategoryBudgetPlan: cqrsClient.createCommand<DeleteCategoryBudgetPlan, DeleteCategoryBudgetPlan.ErrorCodes>(\\"Kontomierz.Finances.Contracts.Budgets.DeleteCategoryBudgetPlan\\", DeleteCategoryBudgetPlan.ErrorCodes),
        MyBudgetInBillingCycle: cqrsClient.createQuery<MyBudgetInBillingCycle, BudgetDTO | null | undefined>(\\"Kontomierz.Finances.Contracts.Budgets.MyBudgetInBillingCycle\\"),
        PlanCategoryBudget: cqrsClient.createCommand<PlanCategoryBudget, PlanCategoryBudget.ErrorCodes>(\\"Kontomierz.Finances.Contracts.Budgets.PlanCategoryBudget\\", PlanCategoryBudget.ErrorCodes),
        PlanOtherCategoriesBudget: cqrsClient.createCommand<PlanOtherCategoriesBudget, PlanOtherCategoriesBudget.ErrorCodes>(\\"Kontomierz.Finances.Contracts.Budgets.PlanOtherCategoriesBudget\\", PlanOtherCategoriesBudget.ErrorCodes),
        AddCategory: cqrsClient.createCommand<AddCategory, AddCategory.ErrorCodes>(\\"Kontomierz.Finances.Contracts.Categories.AddCategory\\", AddCategory.ErrorCodes),
        AddCategoryGroup: cqrsClient.createCommand<AddCategoryGroup, AddCategoryGroup.ErrorCodes>(\\"Kontomierz.Finances.Contracts.Categories.AddCategoryGroup\\", AddCategoryGroup.ErrorCodes),
        CategoryBalances: cqrsClient.createQuery<CategoryBalances, CategoryBalancesDTO>(\\"Kontomierz.Finances.Contracts.Categories.CategoryBalances\\"),
        CategoryBalancesSummary: cqrsClient.createQuery<CategoryBalancesSummary, CategoryGroupBalanceSummaryDTO[]>(\\"Kontomierz.Finances.Contracts.Categories.CategoryBalancesSummary\\"),
        DeleteCategory: cqrsClient.createCommand<DeleteCategory, DeleteCategory.ErrorCodes>(\\"Kontomierz.Finances.Contracts.Categories.DeleteCategory\\", DeleteCategory.ErrorCodes),
        DeleteCategoryGroup: cqrsClient.createCommand<DeleteCategoryGroup, DeleteCategoryGroup.ErrorCodes>(\\"Kontomierz.Finances.Contracts.Categories.DeleteCategoryGroup\\", DeleteCategoryGroup.ErrorCodes),
        EditCategoriesRelations: cqrsClient.createCommand<EditCategoriesRelations, EditCategoriesRelations.ErrorCodes>(\\"Kontomierz.Finances.Contracts.Categories.EditCategoriesRelations\\", EditCategoriesRelations.ErrorCodes),
        EditCategory: cqrsClient.createCommand<EditCategory, EditCategory.ErrorCodes>(\\"Kontomierz.Finances.Contracts.Categories.EditCategory\\", EditCategory.ErrorCodes),
        EditCategoryGroup: cqrsClient.createCommand<EditCategoryGroup, EditCategoryGroup.ErrorCodes>(\\"Kontomierz.Finances.Contracts.Categories.EditCategoryGroup\\", EditCategoryGroup.ErrorCodes),
        MyCategories: cqrsClient.createQuery<MyCategories, MyCategoriesDTO>(\\"Kontomierz.Finances.Contracts.Categories.MyCategories\\"),
        MigrationState: cqrsClient.createQuery<MigrationState, MigrationStateDTO>(\\"Kontomierz.Finances.Contracts.Migrations.MigrationState\\"),
        StartMigration: cqrsClient.createCommand<StartMigration, StartMigration.ErrorCodes>(\\"Kontomierz.Finances.Contracts.Migrations.StartMigration\\", StartMigration.ErrorCodes),
        AssignCustomSubtransactionTitle: cqrsClient.createCommand<AssignCustomSubtransactionTitle, AssignCustomSubtransactionTitle.ErrorCodes>(\\"Kontomierz.Finances.Contracts.Transactions.AssignCustomSubtransactionTitle\\", AssignCustomSubtransactionTitle.ErrorCodes),
        AssignCustomTransactionTitle: cqrsClient.createCommand<AssignCustomTransactionTitle, AssignCustomTransactionTitle.ErrorCodes>(\\"Kontomierz.Finances.Contracts.Transactions.AssignCustomTransactionTitle\\", AssignCustomTransactionTitle.ErrorCodes),
        BalanceInBillingCycle: cqrsClient.createQuery<BalanceInBillingCycle, BalanceInBillingCycleWithComparisonDTO>(\\"Kontomierz.Finances.Contracts.Transactions.BalanceInBillingCycle\\"),
        BalanceSummary: cqrsClient.createQuery<BalanceSummary, BalanceSummaryDTO>(\\"Kontomierz.Finances.Contracts.Transactions.BalanceSummary\\"),
        BalancesByBillingCycles: cqrsClient.createQuery<BalancesByBillingCycles, BalanceInBillingCycleDTO[]>(\\"Kontomierz.Finances.Contracts.Transactions.BalancesByBillingCycles\\"),
        BulkDeleteTransactions: cqrsClient.createCommand<BulkDeleteTransactions, BulkDeleteTransactions.ErrorCodes>(\\"Kontomierz.Finances.Contracts.Transactions.BulkActions.BulkDeleteTransactions\\", BulkDeleteTransactions.ErrorCodes),
        BulkMarkAsIrrelevant: cqrsClient.createCommand<BulkMarkAsIrrelevant, BulkMarkAsIrrelevant.ErrorCodes>(\\"Kontomierz.Finances.Contracts.Transactions.BulkActions.BulkMarkAsIrrelevant\\", BulkMarkAsIrrelevant.ErrorCodes),
        BulkMarkAsRelevant: cqrsClient.createCommand<BulkMarkAsRelevant, BulkMarkAsRelevant.ErrorCodes>(\\"Kontomierz.Finances.Contracts.Transactions.BulkActions.BulkMarkAsRelevant\\", BulkMarkAsRelevant.ErrorCodes),
        BulkOverrideTransactionCategories: cqrsClient.createCommand<BulkOverrideTransactionCategories, BulkOverrideTransactionCategories.ErrorCodes>(\\"Kontomierz.Finances.Contracts.Transactions.BulkActions.BulkOverrideTransactionCategories\\", BulkOverrideTransactionCategories.ErrorCodes),
        ConfirmTransactionCategory: cqrsClient.createCommand<ConfirmTransactionCategory, ConfirmTransactionCategory.ErrorCodes>(\\"Kontomierz.Finances.Contracts.Transactions.ConfirmTransactionCategory\\", ConfirmTransactionCategory.ErrorCodes),
        CreateWalletTransaction: cqrsClient.createCommand<CreateWalletTransaction, CreateWalletTransaction.ErrorCodes>(\\"Kontomierz.Finances.Contracts.Transactions.CreateWalletTransaction\\", CreateWalletTransaction.ErrorCodes),
        DeleteTransaction: cqrsClient.createCommand<DeleteTransaction, DeleteTransaction.ErrorCodes>(\\"Kontomierz.Finances.Contracts.Transactions.DeleteTransaction\\", DeleteTransaction.ErrorCodes),
        EditWalletTransaction: cqrsClient.createCommand<EditWalletTransaction, EditWalletTransaction.ErrorCodes>(\\"Kontomierz.Finances.Contracts.Transactions.EditWalletTransaction\\", EditWalletTransaction.ErrorCodes),
        MarkAsIrrelevant: cqrsClient.createCommand<MarkAsIrrelevant, MarkAsIrrelevant.ErrorCodes>(\\"Kontomierz.Finances.Contracts.Transactions.MarkAsIrrelevant\\", MarkAsIrrelevant.ErrorCodes),
        MarkAsRelevant: cqrsClient.createCommand<MarkAsRelevant, MarkAsRelevant.ErrorCodes>(\\"Kontomierz.Finances.Contracts.Transactions.MarkAsRelevant\\", MarkAsRelevant.ErrorCodes),
        OverrideTransactionCategory: cqrsClient.createCommand<OverrideTransactionCategory, OverrideTransactionCategory.ErrorCodes>(\\"Kontomierz.Finances.Contracts.Transactions.OverrideTransactionCategory\\", OverrideTransactionCategory.ErrorCodes),
        PaginatedTransactions: cqrsClient.createQuery<PaginatedTransactions, PaginatedResult<TransactionDTO>>(\\"Kontomierz.Finances.Contracts.Transactions.PaginatedTransactions\\"),
        SplitTransaction: cqrsClient.createCommand<SplitTransaction, SplitTransaction.ErrorCodes>(\\"Kontomierz.Finances.Contracts.Transactions.SplitTransaction\\", SplitTransaction.ErrorCodes),
        MyTags: cqrsClient.createQuery<MyTags, TagDTO[]>(\\"Kontomierz.Finances.Contracts.Transactions.Tags.MyTags\\"),
        TagTransaction: cqrsClient.createCommand<TagTransaction, TagTransaction.ErrorCodes>(\\"Kontomierz.Finances.Contracts.Transactions.Tags.TagTransaction\\", TagTransaction.ErrorCodes),
        UpdateTransactionAmount: cqrsClient.createCommand<UpdateTransactionAmount, UpdateTransactionAmount.ErrorCodes>(\\"Kontomierz.Finances.Contracts.Transactions.UpdateTransactionAmount\\", UpdateTransactionAmount.ErrorCodes),
        UpdateTransactionComment: cqrsClient.createCommand<UpdateTransactionComment, UpdateTransactionComment.ErrorCodes>(\\"Kontomierz.Finances.Contracts.Transactions.UpdateTransactionComment\\", UpdateTransactionComment.ErrorCodes),
        UpdateTransactionDate: cqrsClient.createCommand<UpdateTransactionDate, UpdateTransactionDate.ErrorCodes>(\\"Kontomierz.Finances.Contracts.Transactions.UpdateTransactionDate\\", UpdateTransactionDate.ErrorCodes),
        CreateDemoSession: cqrsClient.createOperation<CreateDemoSession, CustomStringImpl>(\\"Kontomierz.Finances.Contracts.Users.CreateDemoSession\\"),
        DismissMigrationsBanner: cqrsClient.createCommand<DismissMigrationsBanner, {}>(\\"Kontomierz.Finances.Contracts.Users.DismissMigrationsBanner\\", {}),
        RegulationsLinks: cqrsClient.createQuery<RegulationsLinks, RegulationsDTO>(\\"Kontomierz.Finances.Contracts.Users.RegulationsLinks\\"),
        Settings: cqrsClient.createQuery<Settings, UserSettingsDTO>(\\"Kontomierz.Finances.Contracts.Users.Settings\\"),
        UpdateBillingCycleStartDay: cqrsClient.createCommand<UpdateBillingCycleStartDay, UpdateBillingCycleStartDay.ErrorCodes>(\\"Kontomierz.Finances.Contracts.Users.UpdateBillingCycleStartDay\\", UpdateBillingCycleStartDay.ErrorCodes),
        VerifyAdditionalEmailForMigration: cqrsClient.createOperation<VerifyAdditionalEmailForMigration, VerifyAdditionalEmailForMigrationResultDTO>(\\"Kontomierz.Finances.Contracts.Users.VerifyAdditionalEmailForMigration\\"),
        CreateWallet: cqrsClient.createCommand<CreateWallet, CreateWallet.ErrorCodes>(\\"Kontomierz.Finances.Contracts.Wallets.CreateWallet\\", CreateWallet.ErrorCodes),
        DeleteWallet: cqrsClient.createCommand<DeleteWallet, DeleteWallet.ErrorCodes>(\\"Kontomierz.Finances.Contracts.Wallets.DeleteWallet\\", DeleteWallet.ErrorCodes),
        EditWallet: cqrsClient.createCommand<EditWallet, EditWallet.ErrorCodes>(\\"Kontomierz.Finances.Contracts.Wallets.EditWallet\\", EditWallet.ErrorCodes),
        EditWalletBalance: cqrsClient.createCommand<EditWalletBalance, EditWalletBalance.ErrorCodes>(\\"Kontomierz.Finances.Contracts.Wallets.EditWalletBalance\\", EditWalletBalance.ErrorCodes),
        MyWallets: cqrsClient.createQuery<MyWallets, AdminQueryResult<WalletDTO>>(\\"Kontomierz.Finances.Contracts.Wallets.MyWallets\\"),
        TransferMoneyBetweenWallets: cqrsClient.createCommand<TransferMoneyBetweenWallets, TransferMoneyBetweenWallets.ErrorCodes>(\\"Kontomierz.Finances.Contracts.Wallets.TransferMoneyBetweenWallets\\", TransferMoneyBetweenWallets.ErrorCodes),
        CreateWealthItem: cqrsClient.createCommand<CreateWealthItem, CreateWealthItem.ErrorCodes>(\\"Kontomierz.Finances.Contracts.WealthItems.CreateWealthItem\\", CreateWealthItem.ErrorCodes),
        DeleteWealthItem: cqrsClient.createCommand<DeleteWealthItem, DeleteWealthItem.ErrorCodes>(\\"Kontomierz.Finances.Contracts.WealthItems.DeleteWealthItem\\", DeleteWealthItem.ErrorCodes),
        EditWealthItem: cqrsClient.createCommand<EditWealthItem, EditWealthItem.ErrorCodes>(\\"Kontomierz.Finances.Contracts.WealthItems.EditWealthItem\\", EditWealthItem.ErrorCodes),
        MyTotalWealth: cqrsClient.createQuery<MyTotalWealth, MyTotalWealthDTO>(\\"Kontomierz.Finances.Contracts.WealthItems.MyTotalWealth\\"),
        MyWealthItems: cqrsClient.createQuery<MyWealthItems, MyWealthItemsDTO>(\\"Kontomierz.Finances.Contracts.WealthItems.MyWealthItems\\"),
        ExampleQuery: cqrsClient.createQuery<ExampleQuery, CustomStringImpl>(\\"Kontomierz.Imports.Contracts.ExampleQuery\\"),
        RequestImportFromKontomatik: cqrsClient.createCommand<RequestImportFromKontomatik, RequestImportFromKontomatik.ErrorCodes>(\\"Kontomierz.Imports.Contracts.Imports.RequestImportFromKontomatik\\", RequestImportFromKontomatik.ErrorCodes),
        StartImportingAllBankAccountsWithMultipleAccess: cqrsClient.createCommand<StartImportingAllBankAccountsWithMultipleAccess, StartImportingAllBankAccountsWithMultipleAccess.ErrorCodes>(\\"Kontomierz.Imports.Contracts.Imports.StartImportingAllBankAccountsWithMultipleAccess\\", StartImportingAllBankAccountsWithMultipleAccess.ErrorCodes),
        AdminQuery: cqrsClient.createQuery<AdminQuery, AdminQueryResult<TResult>>(\\"LeanCode.Contracts.Admin.AdminQuery\\")
    };
}
",
}
`;

exports[`kontomierz generates contracts with custom types map 1`] = `
Object {
  "test.ts": "export namespace Kontomierz {
    export namespace Finances {
        export namespace Contracts {
            export interface IBankAccountRelated {
                BankAccountId: string;
            }
            export interface IBothWalletsRelated {
                SourceWalletId: string;
                TargetWalletId: string;
            }
            export interface ICategoryGroupRelated {
                CategoryGroupId: string;
            }
            export interface ICategoryOrCategoryGroupRelated {
                CategoryId: string;
            }
            export interface ICategoryRelated {
                CategoryId: string;
            }
            export interface ISubtransactionRelated {
                SubtransactionId: string;
            }
            export interface ISubtransactionsRelated {
                SubtransactionIds?: string[] | null;
            }
            export interface ITransactionRelated {
                TransactionId: string;
            }
            export interface IWalletRelated {
                WalletId: string;
            }
            export interface IWealthItemRelated {
                WealthItemId: string;
            }
            export interface Permissions {
            }
            export namespace Permissions {
                export const SystemApiAccess = \\"SystemApiAccess\\";
                export const AdminApiAccess = \\"AdminApiAccess\\";
                export const FinancesApiAccess = \\"FinancesApiAccess\\";
                export const DebugApiAccess = \\"DebugApiAccess\\";
                export const OldKontomierzMigration = \\"OldKontomierzMigration\\";
                export const Billtech = \\"Billtech\\";
            }
            export namespace AuthorizeWhenOwnsBankAccountAttribute {
                export interface IOwnBankAccount {
                }
            }
            export namespace AuthorizeWhenOwnsBothWalletsAttribute {
                export interface IOwnBothWallets {
                }
            }
            export namespace AuthorizeWhenOwnsCategoryAttribute {
                export interface IOwnCategory {
                }
            }
            export namespace AuthorizeWhenOwnsCategoryGroupAttribute {
                export interface IOwnCategoryGroup {
                }
            }
            export namespace AuthorizeWhenOwnsCategoryOrCategoryGroupAttribute {
                export interface IOwnCategoryOrCategoryGroup {
                }
            }
            export namespace AuthorizeWhenOwnsSubtransactionAttribute {
                export interface IOwnSubtransaction {
                }
            }
            export namespace AuthorizeWhenOwnsSubtransactionsAttribute {
                export interface IOwnSubtransactions {
                }
            }
            export namespace AuthorizeWhenOwnsTransactionAttribute {
                export interface IOwnTransaction {
                }
            }
            export namespace AuthorizeWhenOwnsWalletAttribute {
                export interface IOwnWallet {
                }
            }
            export namespace AuthorizeWhenOwnsWealthItemAttribute {
                export interface IOwnWealthItem {
                }
            }
            export namespace BankAccounts {
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 * @attribute Kontomierz.Finances.Contracts.AuthorizeWhenOwnsBankAccountAttribute
                 */
                export interface AssignCustomBankAccountName extends Command, IBankAccountRelated {
                    Name?: string | null;
                }
                export namespace AssignCustomBankAccountName {
                    export const ErrorCodes = {
                        BankAccountIdInvalid: 1,
                        BankAccountDoesNotExist: 2,
                        NameTooLong: 3
                    } as const;
                    export type ErrorCodes = typeof ErrorCodes;
                }
                export interface BankAccountDTO {
                    Id: string;
                    Type: BankAccountTypeDTO;
                    Iban?: string | null;
                    IbanHash: string;
                    Name: string;
                    FriendlyName?: string | null;
                    UserAssignedName?: string | null;
                    CreditCardNumber?: string | null;
                    CurrencyCode: string;
                    BalanceSmallestUnit?: number | null;
                    MultipleAccessType: MultipleAccessTypeDTO;
                    MostRecentImport?: ImportDTO | null;
                }
                export interface BankAccountsDTO {
                    Bank: Shared.Contracts.BankDTO;
                    Accounts: BankAccountDTO[];
                }
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 * @attribute Kontomierz.Finances.Contracts.AuthorizeWhenOwnsBankAccountAttribute
                 */
                export interface DeleteBankAccount extends Command, IBankAccountRelated {
                }
                export namespace DeleteBankAccount {
                    export const ErrorCodes = {
                        BankAccountIdInvalid: 1
                    } as const;
                    export type ErrorCodes = typeof ErrorCodes;
                }
                export interface ImportDTO {
                    Id: string;
                    KontomatikSessionId?: string | null;
                    KontomatikMultipleAccess?: string | null;
                    Status: BankAccountImportStatusDTO;
                    Date: ApiDateTimeOffset;
                    /**
                     * If \`Status\` is \`Failed\` and this property is null it means it's an error on our side.
                     */
                    KontomatikErrorName?: string | null;
                }
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 */
                export interface MyBankAccounts extends Query<MyBankAccountsDTO> {
                }
                export interface MyBankAccountsDTO {
                    UnknownAccountsImportsInProgress: boolean;
                    BanksWithAccounts: BankAccountsDTO[];
                }
                export enum BankAccountImportStatusDTO {
                    Completed = 0,
                    InProgress = 1,
                    Failed = 2
                }
                export enum BankAccountTypeDTO {
                    Account = 0,
                    CreditCard = 1
                }
                export enum MultipleAccessTypeDTO {
                    Unknown = -1,
                    Active = 0,
                    Expired = 1,
                    Unsupported = 2
                }
            }
            export namespace Budgets {
                export interface BudgetDTO {
                    CategoryBudgets: CategoryBudgetDTO[];
                    OtherCategoriesPlannedBalancePlnSmallestUnit: number;
                    OtherCategoriesBalancePlnSmallestUnit: number;
                    OtherCategoryBalances: Categories.CategoryBalanceDTO[];
                }
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 */
                export interface BudgetSummary extends Query<BudgetSummaryDTO> {
                    /**
                     * Day is ignored
                     */
                    BillingCycle: ApiDate;
                }
                export interface BudgetSummaryDTO {
                    PlannedExpensesPlnSmallestUnit: number;
                    ExpensesPlnSmallestUnit: number;
                }
                export interface CategoryBudgetDTO {
                    /**
                     * May be a CategoryGroup ID
                     */
                    CategoryId: string;
                    PlannedBalancePlnSmallestUnit: number;
                    Comment?: string | null;
                    Type: CategoryBudgetTypeDTO;
                    BalancePlnSmallestUnit: number;
                }
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 */
                export interface CopyBudgetValidation extends Query<CopyBudgetValidationDTO> {
                    /**
                     * Day is ignored
                     */
                    NewBillingCycle: ApiDate;
                }
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 */
                export interface CopyMostRecentBudgetPlan extends Command {
                    /**
                     * Day is ignored
                     */
                    NewBillingCycle: ApiDate;
                }
                export namespace CopyMostRecentBudgetPlan {
                    export const ErrorCodes = {
                        BudgetPlanAlreadyExistsForTheBillingCycle: 1,
                        NoPreviousBudgetPlansExist: 2
                    } as const;
                    export type ErrorCodes = typeof ErrorCodes;
                }
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 * @attribute Kontomierz.Finances.Contracts.AuthorizeWhenOwnsCategoryOrCategoryGroupAttribute
                 */
                export interface DeleteCategoryBudgetPlan extends Command, ICategoryOrCategoryGroupRelated {
                    /**
                     * Day is ignored
                     */
                    BillingCycle: ApiDate;
                }
                export namespace DeleteCategoryBudgetPlan {
                    export const ErrorCodes = {
                        CategoryIdInvalid: 1
                    } as const;
                    export type ErrorCodes = typeof ErrorCodes;
                }
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 */
                export interface MyBudgetInBillingCycle extends Query<BudgetDTO> {
                    /**
                     * Day is ignored
                     */
                    BillingCycle: ApiDate;
                }
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 * @attribute Kontomierz.Finances.Contracts.AuthorizeWhenOwnsCategoryOrCategoryGroupAttribute
                 */
                export interface PlanCategoryBudget extends Command, ICategoryOrCategoryGroupRelated {
                    /**
                     * Day is ignored
                     */
                    BillingCycle: ApiDate;
                    PlannedBalancePlnSmallestUnit: number;
                    Comment?: string | null;
                }
                export namespace PlanCategoryBudget {
                    export const ErrorCodes = {
                        CategoryIdInvalid: 1,
                        CategoryDoesNotExist: 2,
                        CategoryIsInAnotherBudgetPlanCategoryGroup: 3,
                        InvalidCategoryKind: 4,
                        BalanceIsNegative: 5,
                        CommentIsTooLong: 6
                    } as const;
                    export type ErrorCodes = typeof ErrorCodes;
                }
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 */
                export interface PlanOtherCategoriesBudget extends Command {
                    /**
                     * Day is ignored
                     */
                    BillingCycle: ApiDate;
                    PlannedBalancePlnSmallestUnit: number;
                }
                export namespace PlanOtherCategoriesBudget {
                    export const ErrorCodes = {
                        BalanceIsNegative: 1
                    } as const;
                    export type ErrorCodes = typeof ErrorCodes;
                }
                export enum CategoryBudgetTypeDTO {
                    Category = 0,
                    CategoryGroup = 1
                }
                export enum CopyBudgetValidationDTO {
                    Valid = 0,
                    BudgetPlanAlreadyExistsForTheBillingCycle = 1,
                    NoPreviousBudgetPlansExist = 2
                }
            }
            export namespace Categories {
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 * @attribute Kontomierz.Finances.Contracts.AuthorizeWhenOwnsCategoryGroupAttribute
                 */
                export interface AddCategory extends Command, ICategoryGroupRelated {
                    Name: string;
                    Kind: CategoryKindDTO;
                }
                export namespace AddCategory {
                    export const ErrorCodes = {
                        InvalidCategoryGroupId: 1,
                        CategoryGroupDoesNotExist: 2,
                        NameRequired: 3,
                        NameTooLong: 4,
                        InvalidKind: 5
                    } as const;
                    export type ErrorCodes = typeof ErrorCodes;
                }
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 */
                export interface AddCategoryGroup extends Command {
                    Name: string;
                    Color: string;
                    Icon: CategoryGroupIconDTO;
                }
                export namespace AddCategoryGroup {
                    export const ErrorCodes = {
                        NameRequired: 1,
                        NameTooLong: 2,
                        ColorRequired: 3,
                        ColorInvalid: 4,
                        InvalidIcon: 5
                    } as const;
                    export type ErrorCodes = typeof ErrorCodes;
                }
                export interface CategoryBalanceDTO {
                    Id: string;
                    PlnBalanceSmallestUnit: number;
                }
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 */
                export interface CategoryBalances extends Query<CategoryBalancesDTO> {
                    TransactionDateInclusiveFrom?: ApiDate | null;
                    TransactionDateInclusiveTo?: ApiDate | null;
                    TransactionFilter?: string | null;
                    RelevantFilter?: boolean | null;
                    CategoryConfirmedFilter?: boolean | null;
                    IncomeFilter?: boolean | null;
                    BankAccountIdsFilter?: string[] | null;
                    WalletIdsFilter?: string[] | null;
                    TagIdsFilter?: string[] | null;
                }
                export interface CategoryBalancesDTO {
                    TotalPlnBalanceSmallestUnit: number;
                    CategoryGroups: CategoryGroupBalanceDTO[];
                }
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 */
                export interface CategoryBalancesSummary extends Query<CategoryGroupBalanceSummaryDTO[]> {
                    /**
                     * Day is ignored
                     */
                    BillingCycle: ApiDate;
                }
                export interface CategoryDTO {
                    Id: string;
                    Name: string;
                    Kind: CategoryKindDTO;
                }
                export interface CategoryGroupBalanceDTO {
                    Id: string;
                    PlnBalanceSmallestUnit: number;
                    Categories: CategoryBalanceDTO[];
                }
                export interface CategoryGroupBalanceSummaryDTO {
                    /**
                     * Other categories if null
                     */
                    Id?: string | null;
                    PlnBalanceSmallestUnit: number;
                    TotalBalancePercent: number;
                }
                export interface CategoryGroupDTO {
                    Id: string;
                    Name: string;
                    Color: string;
                    Icon: CategoryGroupIconDTO;
                    Categories: CategoryDTO[];
                }
                export interface CategoryGroupRelationsDTO {
                    Id: string;
                    CategoryIds: string[];
                }
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 * @attribute Kontomierz.Finances.Contracts.AuthorizeWhenOwnsCategoryAttribute
                 */
                export interface DeleteCategory extends Command, ICategoryRelated {
                    CategorizationHandling: AfterCategoryDeletionCategorizationHandlingDTO;
                    MoveTransactionsToCategoryId?: string | null;
                }
                export namespace DeleteCategory {
                    export const ErrorCodes = {
                        InvalidCategoryId: 1,
                        CannotDeleteNoneCategory: 2,
                        InvalidCategorizationHandling: 3,
                        InvalidMoveTransactionsToCategoryId: 4,
                        CategoryToMoveTransactionsToDoesNotExist: 5,
                        CategoryToMoveTransactionsToMustBeDifferent: 6,
                        CategoryToMoveTransactionsToHasDifferentKind: 7
                    } as const;
                    export type ErrorCodes = typeof ErrorCodes;
                }
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 * @attribute Kontomierz.Finances.Contracts.AuthorizeWhenOwnsCategoryGroupAttribute
                 */
                export interface DeleteCategoryGroup extends Command, ICategoryGroupRelated {
                }
                export namespace DeleteCategoryGroup {
                    export const ErrorCodes = {
                        InvalidCategoryGroupId: 1,
                        CannotDeleteNoneCategoryGroup: 2,
                        CategoryGroupHasSomeCategories: 3
                    } as const;
                    export type ErrorCodes = typeof ErrorCodes;
                }
                /**
                 * Order in the lists resembles expected order.
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 */
                export interface EditCategoriesRelations extends Command {
                    CategoriesRelations: CategoryGroupRelationsDTO[];
                }
                export namespace EditCategoriesRelations {
                    export const ErrorCodes = {
                        CategoriesRelationsCantBeNull: 1,
                        AllCategoryGroupRelationsCantBeNull: 2,
                        SomeCategoryGroupIdsAreInvalid: 3,
                        SomeCategoryIdsAreInvalid: 4,
                        CategoryGroupsAreNotSetEqual: 5,
                        CategoriesAreNotSetEqual: 6
                    } as const;
                    export type ErrorCodes = typeof ErrorCodes;
                }
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 * @attribute Kontomierz.Finances.Contracts.AuthorizeWhenOwnsCategoryAttribute
                 */
                export interface EditCategory extends Command, ICategoryRelated {
                    Name: string;
                }
                export namespace EditCategory {
                    export const ErrorCodes = {
                        InvalidCategoryId: 1,
                        CategoryDoesNotExist: 2,
                        NameRequired: 3,
                        NameTooLong: 4
                    } as const;
                    export type ErrorCodes = typeof ErrorCodes;
                }
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 * @attribute Kontomierz.Finances.Contracts.AuthorizeWhenOwnsCategoryGroupAttribute
                 */
                export interface EditCategoryGroup extends Command, ICategoryGroupRelated {
                    Name: string;
                    Color: string;
                    Icon: CategoryGroupIconDTO;
                }
                export namespace EditCategoryGroup {
                    export const ErrorCodes = {
                        InvalidCategoryGroupId: 1,
                        CategoryGroupDoesNotExist: 2,
                        NameRequired: 3,
                        NameTooLong: 4,
                        ColorRequired: 5,
                        ColorInvalid: 6,
                        InvalidIcon: 7
                    } as const;
                    export type ErrorCodes = typeof ErrorCodes;
                }
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 */
                export interface MyCategories extends Query<MyCategoriesDTO> {
                }
                export interface MyCategoriesDTO {
                    Uncategorized: CategoryGroupDTO;
                    CategoryGroups: CategoryGroupDTO[];
                }
                export enum AfterCategoryDeletionCategorizationHandlingDTO {
                    MoveToAnotherCategory = 0,
                    Recategorize = 1
                }
                export enum CategoryGroupIconDTO {
                    ShoppingBag = 0,
                    Home = 1,
                    Kid = 2,
                    Personal = 3,
                    Balance = 4,
                    Gift = 5,
                    Briefcase = 6,
                    CircleFull = 7,
                    CircleEmpty = 8,
                    GamingPad = 9,
                    Flag = 10,
                    FaceSmile = 11,
                    Key = 12,
                    Star = 13,
                    Atom = 14,
                    ActivityHeart = 15,
                    MedicalCross = 16,
                    PuzzlePiece = 17,
                    GraduationHat = 18,
                    Plane = 19,
                    Sun = 20,
                    Image = 21,
                    Palette = 22,
                    Building = 23,
                    Tag = 24,
                    Anchor = 25,
                    Mail = 26,
                    HeartRounded = 27,
                    Camera = 28,
                    ShoppingCart = 29,
                    File = 30,
                    MusicNote = 31,
                    CoinsHand = 32,
                    Car = 33,
                    Archive = 34,
                    HelpCircle = 35
                }
                export enum CategoryKindDTO {
                    Expense = 0,
                    Income = 1
                }
            }
            export namespace Migrations {
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 */
                export interface MigrationState extends Query<MigrationStateDTO> {
                }
                export interface MigrationStateDTO {
                    Status: MigrationStatusDTO;
                }
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 */
                export interface StartMigration extends Command {
                    Email: string;
                }
                export namespace StartMigration {
                    export const ErrorCodes = {
                        EmailNotConfirmed: 1,
                        NoOldKontomierzUserFound: 2,
                        MigrationAlreadyInProgress: 3
                    } as const;
                    export type ErrorCodes = typeof ErrorCodes;
                }
                export enum MigrationStatusDTO {
                    NotStarted = 0,
                    InProgress = 1
                }
            }
            export namespace Transactions {
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 * @attribute Kontomierz.Finances.Contracts.AuthorizeWhenOwnsSubtransactionAttribute
                 */
                export interface AssignCustomSubtransactionTitle extends Command, ISubtransactionRelated {
                    Title?: string | null;
                }
                export namespace AssignCustomSubtransactionTitle {
                    export const ErrorCodes = {
                        SubtransactionIdNotValid: 1,
                        SubtransactionDoesNotExist: 2,
                        TitleTooLong: 3
                    } as const;
                    export type ErrorCodes = typeof ErrorCodes;
                }
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 * @attribute Kontomierz.Finances.Contracts.AuthorizeWhenOwnsTransactionAttribute
                 */
                export interface AssignCustomTransactionTitle extends Command, ITransactionRelated {
                    Title?: string | null;
                }
                export namespace AssignCustomTransactionTitle {
                    export const ErrorCodes = {
                        TransactionIdNotValid: 1,
                        TransactionDoesNotExist: 2,
                        TitleTooLong: 3
                    } as const;
                    export type ErrorCodes = typeof ErrorCodes;
                }
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 */
                export interface BalanceInBillingCycle extends Query<BalanceInBillingCycleWithComparisonDTO> {
                    /**
                     * Day is ignored
                     */
                    BillingCycle: ApiDate;
                }
                export interface BalanceInBillingCycleDTO {
                    BillingCycle: ApiDate;
                    BalancePlnSmallestUnit: number;
                    ExpensesPlnSmallestUnit: number;
                    IncomesPlnSmallestUnit: number;
                }
                export interface BalanceInBillingCycleWithComparisonDTO {
                    BalancePlnSmallestUnit: number;
                    ExpensesPlnSmallestUnit: number;
                    ExpensesLastBillingCycleDifferencePercent?: number | null;
                    IncomesPlnSmallestUnit: number;
                    IncomesLastBillingCycleDifferencePercent?: number | null;
                }
                /**
                 * Keep filters in sync with \`PaginatedTransactions\` query.
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 */
                export interface BalanceSummary extends Query<BalanceSummaryDTO> {
                    TransactionDateInclusiveFrom?: ApiDate | null;
                    TransactionDateInclusiveTo?: ApiDate | null;
                    Filter?: string | null;
                    RelevantFilter?: boolean | null;
                    CategoryConfirmedFilter?: boolean | null;
                    IncomeFilter?: boolean | null;
                    /**
                     * Possibly a group category ID
                     */
                    CategoryIdFilter?: string | null;
                    BankAccountIdsFilter?: string[] | null;
                    WalletIdsFilter?: string[] | null;
                    TagIdsFilter?: string[] | null;
                }
                export interface BalanceSummaryDTO {
                    ExpensesPlnSmallestUnit: number;
                    IncomesPlnSmallestUnit: number;
                }
                /**
                 * Up to 12 billing cycles ordered ascending.
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 */
                export interface BalancesByBillingCycles extends Query<BalanceInBillingCycleDTO[]> {
                    /**
                     * Day is ignored
                     */
                    BillingCycle: ApiDate;
                }
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 * @attribute Kontomierz.Finances.Contracts.AuthorizeWhenOwnsSubtransactionAttribute
                 */
                export interface ConfirmTransactionCategory extends Command, ISubtransactionRelated {
                }
                export namespace ConfirmTransactionCategory {
                    export const ErrorCodes = {
                        SubtransactionIdInvalid: 1,
                        SubtransactionDoesNotExist: 2,
                        CannotConfirmTransactionsCategory: 3
                    } as const;
                    export type ErrorCodes = typeof ErrorCodes;
                }
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 * @attribute Kontomierz.Finances.Contracts.AuthorizeWhenOwnsWalletAttribute
                 */
                export interface CreateWalletTransaction extends Command, IWalletRelated {
                    Name: string;
                    CategoryId: string;
                    TransactionDate: ApiDate;
                    AmountSmallestUnit: number;
                }
                export namespace CreateWalletTransaction {
                    export const ErrorCodes = {
                        WalletIdNotValid: 1,
                        WalletDoesNotExist: 2,
                        NameRequired: 3,
                        NameTooLong: 4,
                        CategoryIdNotValid: 5,
                        CategoryDoesNotExist: 6,
                        AmountDoesNotMatchCategoryKind: 7
                    } as const;
                    export type ErrorCodes = typeof ErrorCodes;
                }
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 * @attribute Kontomierz.Finances.Contracts.AuthorizeWhenOwnsTransactionAttribute
                 */
                export interface DeleteTransaction extends Command, ITransactionRelated {
                }
                export namespace DeleteTransaction {
                    export const ErrorCodes = {
                        TransactionIdNotValid: 1
                    } as const;
                    export type ErrorCodes = typeof ErrorCodes;
                }
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 * @attribute Kontomierz.Finances.Contracts.AuthorizeWhenOwnsTransactionAttribute
                 * @attribute Kontomierz.Finances.Contracts.AuthorizeWhenOwnsWalletAttribute
                 */
                export interface EditWalletTransaction extends Command, ITransactionRelated, IWalletRelated {
                    Name: string;
                    CategoryId: string;
                    TransactionDate: ApiDate;
                    AmountSmallestUnit: number;
                }
                export namespace EditWalletTransaction {
                    export const ErrorCodes = {
                        TransactionIdNotValid: 1,
                        TransactionDoesNotExist: 2,
                        TransactionTypeNotValid: 3,
                        SplitTransactionsCannotBeEdited: 4,
                        WalletIdNotValid: 5,
                        WalletDoesNotExist: 6,
                        NameRequired: 7,
                        NameTooLong: 8,
                        CategoryIdNotValid: 9,
                        CategoryDoesNotExist: 10,
                        AmountDoesNotMatchCategoryKind: 11
                    } as const;
                    export type ErrorCodes = typeof ErrorCodes;
                }
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 * @attribute Kontomierz.Finances.Contracts.AuthorizeWhenOwnsSubtransactionAttribute
                 */
                export interface MarkAsIrrelevant extends Command, ISubtransactionRelated {
                }
                export namespace MarkAsIrrelevant {
                    export const ErrorCodes = {
                        SubtransactionIdNotValid: 1,
                        SubtransactionDoesNotExist: 2
                    } as const;
                    export type ErrorCodes = typeof ErrorCodes;
                }
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 * @attribute Kontomierz.Finances.Contracts.AuthorizeWhenOwnsSubtransactionAttribute
                 */
                export interface MarkAsRelevant extends Command, ISubtransactionRelated {
                }
                export namespace MarkAsRelevant {
                    export const ErrorCodes = {
                        SubtransactionIdNotValid: 1,
                        SubtransactionDoesNotExist: 2
                    } as const;
                    export type ErrorCodes = typeof ErrorCodes;
                }
                export interface NewSubtransactionDTO {
                    Id: string;
                    /**
                     * In the same currency as parent transaction.
                     */
                    AmountSmallestUnit: number;
                    CategoryId?: string | null;
                    UserAssignedTitle?: string | null;
                    Irrelevant: boolean;
                }
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 * @attribute Kontomierz.Finances.Contracts.AuthorizeWhenOwnsSubtransactionAttribute
                 * @attribute Kontomierz.Finances.Contracts.AuthorizeWhenOwnsCategoryAttribute
                 */
                export interface OverrideTransactionCategory extends Command, ISubtransactionRelated, ICategoryRelated {
                }
                export namespace OverrideTransactionCategory {
                    export const ErrorCodes = {
                        SubtransactionIdIsInvalid: 1,
                        SubtransactionDoesNotExist: 2,
                        CategoryIdIsInvalid: 3,
                        CategoryDoesNotExist: 4,
                        SubtransactionDoesNotMatchCategoryKind: 5
                    } as const;
                    export type ErrorCodes = typeof ErrorCodes;
                }
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 */
                export interface PaginatedTransactions extends Shared.Contracts.SortedQuery<TransactionDTO, PaginatedTransactionsSortFieldDTO> {
                    TransactionDateInclusiveFrom?: ApiDate | null;
                    TransactionDateInclusiveTo?: ApiDate | null;
                    Filter?: string | null;
                    RelevantFilter?: boolean | null;
                    CategoryConfirmedFilter?: boolean | null;
                    IncomeFilter?: boolean | null;
                    /**
                     * Possibly a group category ID
                     */
                    CategoryIdFilter?: string | null;
                    BankAccountIdsFilter?: string[] | null;
                    WalletIdsFilter?: string[] | null;
                    TagIdsFilter?: string[] | null;
                }
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 * @attribute Kontomierz.Finances.Contracts.AuthorizeWhenOwnsTransactionAttribute
                 */
                export interface SplitTransaction extends Command, ITransactionRelated {
                    Subtransactions?: NewSubtransactionDTO[] | null;
                }
                export namespace SplitTransaction {
                    export const ErrorCodes = {
                        TransactionIdNotValid: 1,
                        TransactionDoesNotExist: 2,
                        SubtransactionIdNotValid: 3,
                        SubtransactionIdNotUnique: 4,
                        SubtransactionAlreadyExists: 5,
                        CategoryIdNotValid: 6,
                        CategoryDoesNotExist: 7,
                        CategoryKindDoesNotMatch: 8,
                        AmountIncorrectSign: 9,
                        AmountSumDoesNotMatch: 10,
                        SubtransactionTitleTooLong: 11
                    } as const;
                    export type ErrorCodes = typeof ErrorCodes;
                }
                export interface SubtransactionDTO {
                    Id: string;
                    /**
                     * In the same currency as parent transaction.
                     */
                    AmountSmallestUnit: number;
                    AmountPlnSmallestUnit?: number | null;
                    CategoryId?: string | null;
                    CanConfirmCategory: boolean;
                    UserAssignedTitle?: string | null;
                    Irrelevant: boolean;
                }
                export interface TransactionDTO {
                    Id: string;
                    WalletId?: string | null;
                    WalletName?: string | null;
                    BankAccountId?: string | null;
                    BankAccountName?: string | null;
                    Bank?: Shared.Contracts.BankDTO | null;
                    TransactionDate: ApiDate;
                    OriginalTransactionDate: ApiDate;
                    BookedOnDate?: ApiDate | null;
                    AmountPlnSmallestUnit?: number | null;
                    AmountSmallestUnit: number;
                    OriginalAmountSmallestUnit: number;
                    CurrencyCode: string;
                    AccountBalanceAfterTransactionSmallestUnit?: number | null;
                    Title?: string | null;
                    OtherPartyName?: string | null;
                    OtherPartyIban?: string | null;
                    Kind?: string | null;
                    Status?: TransactionStatusDTO | null;
                    Comment?: string | null;
                    UserAssignedTitle?: string | null;
                    Subtransactions: SubtransactionDTO[];
                    Tags: Tags.TagDTO[];
                }
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 * @attribute Kontomierz.Finances.Contracts.AuthorizeWhenOwnsTransactionAttribute
                 */
                export interface UpdateTransactionAmount extends Command, ITransactionRelated {
                    AmountSmallestUnit: number;
                }
                export namespace UpdateTransactionAmount {
                    export const ErrorCodes = {
                        TransactionIdNotValid: 1,
                        TransactionDoesNotExist: 2,
                        SplitTransactionsCannotBeUpdated: 3,
                        AmountSignDoesNotMatch: 4
                    } as const;
                    export type ErrorCodes = typeof ErrorCodes;
                }
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 * @attribute Kontomierz.Finances.Contracts.AuthorizeWhenOwnsTransactionAttribute
                 */
                export interface UpdateTransactionComment extends Command, ITransactionRelated {
                    Comment?: string | null;
                }
                export namespace UpdateTransactionComment {
                    export const ErrorCodes = {
                        TransactionIdNotValid: 1,
                        TransactionDoesNotExist: 2,
                        CommentTooLong: 3
                    } as const;
                    export type ErrorCodes = typeof ErrorCodes;
                }
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 * @attribute Kontomierz.Finances.Contracts.AuthorizeWhenOwnsTransactionAttribute
                 */
                export interface UpdateTransactionDate extends Command, ITransactionRelated {
                    TransactionDate: ApiDate;
                }
                export namespace UpdateTransactionDate {
                    export const ErrorCodes = {
                        TransactionIdNotValid: 1,
                        TransactionDoesNotExist: 2
                    } as const;
                    export type ErrorCodes = typeof ErrorCodes;
                }
                export enum PaginatedTransactionsSortFieldDTO {
                    Date = 0,
                    Amount = 1
                }
                export enum TransactionStatusDTO {
                    Done = 0,
                    Pending = 1,
                    Rejected = 2,
                    Scheduled = 3,
                    Hold = 4
                }
                export namespace BulkActions {
                    /**
                     * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                     * @attribute Kontomierz.Finances.Contracts.AuthorizeWhenOwnsSubtransactionsAttribute
                     */
                    export interface BulkDeleteTransactions extends Command, ISubtransactionsRelated {
                    }
                    export namespace BulkDeleteTransactions {
                        export const ErrorCodes = {
                            SomeSubtransactionIdsNotValid: 1,
                            TooManySubtransactions: 2
                        } as const;
                        export type ErrorCodes = typeof ErrorCodes;
                    }
                    /**
                     * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                     * @attribute Kontomierz.Finances.Contracts.AuthorizeWhenOwnsSubtransactionsAttribute
                     */
                    export interface BulkMarkAsIrrelevant extends Command, ISubtransactionsRelated {
                    }
                    export namespace BulkMarkAsIrrelevant {
                        export const ErrorCodes = {
                            SomeSubtransactionIdsNotValid: 1,
                            SomeSubtransactionsDoNotExist: 2,
                            TooManySubtransactions: 3
                        } as const;
                        export type ErrorCodes = typeof ErrorCodes;
                    }
                    /**
                     * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                     * @attribute Kontomierz.Finances.Contracts.AuthorizeWhenOwnsSubtransactionsAttribute
                     */
                    export interface BulkMarkAsRelevant extends Command, ISubtransactionsRelated {
                    }
                    export namespace BulkMarkAsRelevant {
                        export const ErrorCodes = {
                            SomeSubtransactionIdsNotValid: 1,
                            SomeSubtransactionsDoNotExist: 2,
                            TooManySubtransactions: 3
                        } as const;
                        export type ErrorCodes = typeof ErrorCodes;
                    }
                    /**
                     * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                     * @attribute Kontomierz.Finances.Contracts.AuthorizeWhenOwnsSubtransactionsAttribute
                     * @attribute Kontomierz.Finances.Contracts.AuthorizeWhenOwnsCategoryAttribute
                     */
                    export interface BulkOverrideTransactionCategories extends Command, ISubtransactionsRelated, ICategoryRelated {
                    }
                    export namespace BulkOverrideTransactionCategories {
                        export const ErrorCodes = {
                            SomeSubtransactionIdsNotValid: 1,
                            SomeSubtransactionsDoNotExist: 2,
                            TooManySubtransactions: 3,
                            CategoryIdIsInvalid: 4,
                            CategoryDoesNotExist: 5,
                            SubtransactionsDoNotMatchCategoryKind: 6
                        } as const;
                        export type ErrorCodes = typeof ErrorCodes;
                    }
                }
                export namespace Tags {
                    /**
                     * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                     */
                    export interface MyTags extends Query<TagDTO[]> {
                        FilterByTransactions: boolean;
                        TransactionDateInclusiveFrom?: ApiDate | null;
                        TransactionDateInclusiveTo?: ApiDate | null;
                        TransactionFilter?: string | null;
                        RelevantFilter?: boolean | null;
                        CategoryConfirmedFilter?: boolean | null;
                        IncomeFilter?: boolean | null;
                        /**
                         * Possibly a group category ID
                         */
                        CategoryIdFilter?: string | null;
                        BankAccountIdsFilter?: string[] | null;
                        WalletIdsFilter?: string[] | null;
                    }
                    export interface TagDTO {
                        Id: string;
                        Name: string;
                    }
                    /**
                     * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                     * @attribute Kontomierz.Finances.Contracts.AuthorizeWhenOwnsTransactionAttribute
                     */
                    export interface TagTransaction extends Command, ITransactionRelated {
                        Tags?: string[] | null;
                    }
                    export namespace TagTransaction {
                        export const ErrorCodes = {
                            TransactionIdNotValid: 1,
                            TransactionDoesNotExist: 2
                        } as const;
                        export type ErrorCodes = typeof ErrorCodes;
                    }
                }
            }
            export namespace Users {
                /**
                 * @attribute LeanCode.Contracts.Security.AllowUnauthorizedAttribute
                 */
                export interface CreateDemoSession extends Operation<string> {
                }
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 */
                export interface DismissMigrationsBanner extends Command {
                }
                export interface RegulationsDTO {
                    TermsOfService: string;
                    PrivacyPolicy: string;
                }
                /**
                 * @attribute LeanCode.Contracts.Security.AllowUnauthorizedAttribute
                 */
                export interface RegulationsLinks extends Query<RegulationsDTO> {
                }
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 */
                export interface Settings extends Query<UserSettingsDTO> {
                }
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 */
                export interface UpdateBillingCycleStartDay extends Command {
                    BillingCycleStartDay: number;
                    BillingCycleEndsWithStartDay: boolean;
                }
                export namespace UpdateBillingCycleStartDay {
                    export const ErrorCodes = {
                        InvalidStartDay: 1
                    } as const;
                    export type ErrorCodes = typeof ErrorCodes;
                }
                export interface UserSettingsDTO {
                    BillingCycleStartDay: number;
                    BillingCycleEndsWithStartDay: boolean;
                    MigrationsBannerDismissed: boolean;
                }
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 */
                export interface VerifyAdditionalEmailForMigration extends Operation<VerifyAdditionalEmailForMigrationResultDTO> {
                    Email: string;
                }
                export interface VerifyAdditionalEmailForMigrationResultDTO {
                    ValidationError?: VerifyAdditionalEmailForMigrationErrorDTO | null;
                    VerificationFlowId?: string | null;
                }
                export enum VerifyAdditionalEmailForMigrationErrorDTO {
                    EmailNotValid = 0,
                    NoSuchEmailInOldKontomierz = 1,
                    EmailVerificationConflict = 2
                }
            }
            export namespace Wallets {
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 */
                export interface CreateWallet extends Command {
                    Name: string;
                    InitialBalance: Shared.Contracts.MoneyDTO;
                }
                export namespace CreateWallet {
                    export const ErrorCodes = {
                        NameRequired: 1,
                        NameTooLong: 2,
                        InitialBalanceRequired: 3,
                        InitialBalanceCurrencyCodeRequired: 5,
                        UnknownInitialBalanceCurrencyCode: 6
                    } as const;
                    export type ErrorCodes = typeof ErrorCodes;
                }
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 * @attribute Kontomierz.Finances.Contracts.AuthorizeWhenOwnsWalletAttribute
                 */
                export interface DeleteWallet extends Command, IWalletRelated {
                }
                export namespace DeleteWallet {
                    export const ErrorCodes = {
                        WalletIdInvalid: 1
                    } as const;
                    export type ErrorCodes = typeof ErrorCodes;
                }
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 * @attribute Kontomierz.Finances.Contracts.AuthorizeWhenOwnsWalletAttribute
                 */
                export interface EditWallet extends Command, IWalletRelated {
                    Name: string;
                }
                export namespace EditWallet {
                    export const ErrorCodes = {
                        InvalidWalletId: 1,
                        WalletDoesNotExist: 2,
                        NameRequired: 3,
                        NameTooLong: 4
                    } as const;
                    export type ErrorCodes = typeof ErrorCodes;
                }
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 * @attribute Kontomierz.Finances.Contracts.AuthorizeWhenOwnsWalletAttribute
                 */
                export interface EditWalletBalance extends Command, IWalletRelated {
                    BalanceAmountSmallestUnit: number;
                }
                export namespace EditWalletBalance {
                    export const ErrorCodes = {
                        InvalidWalletId: 1,
                        WalletDoesNotExist: 2
                    } as const;
                    export type ErrorCodes = typeof ErrorCodes;
                }
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 */
                export interface MyWallets extends LeanCode.Contracts.Admin.AdminQuery<WalletDTO> {
                    /**
                     * @attribute LeanCode.Contracts.Admin.AdminFilterFor
                     */
                    NameFilter: LeanCode.Contracts.Admin.AdminFilterRange<string>;
                }
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 * @attribute Kontomierz.Finances.Contracts.AuthorizeWhenOwnsBothWalletsAttribute
                 */
                export interface TransferMoneyBetweenWallets extends Command, IBothWalletsRelated {
                    Name: string;
                    TransactionDate: ApiDate;
                    AmountSmallestUnit: number;
                }
                export namespace TransferMoneyBetweenWallets {
                    export const ErrorCodes = {
                        SourceWalletIdNotValid: 1,
                        SourceWalletDoesNotExist: 2,
                        TargetWalletIdNotValid: 3,
                        TargetWalletDoesNotExist: 4,
                        SourceAndTargetMustBeDifferent: 5,
                        CurrencyMismatch: 6,
                        NameRequired: 7,
                        NameTooLong: 8,
                        AmountIsNotPositive: 9
                    } as const;
                    export type ErrorCodes = typeof ErrorCodes;
                }
                export interface WalletDTO {
                    Id: string;
                    /**
                     * @attribute LeanCode.Contracts.Admin.AdminColumn
                     */
                    Name: string;
                    Balance: Shared.Contracts.MoneyDTO;
                    /**
                     * @attribute LeanCode.Contracts.Admin.AdminColumn
                     */
                    DateCreated: ApiDateTimeOffset;
                    /**
                     * @attribute LeanCode.Contracts.Admin.AdminColumn
                     */
                    MigrationStatus: Migrations.MigrationStatusDTO;
                }
            }
            export namespace WealthItems {
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 */
                export interface CreateWealthItem extends Command {
                    Type: WealthItemTypeDTO;
                    Name: string;
                    Value: Shared.Contracts.MoneyDTO;
                }
                export namespace CreateWealthItem {
                    export const ErrorCodes = {
                        InvalidType: 1,
                        NameRequired: 2,
                        NameTooLong: 3,
                        ValueRequired: 4,
                        ValueCurrencyCodeRequired: 5,
                        UnknownValueCurrencyCode: 6,
                        ValueSignWealthItemTypeMismatch: 7
                    } as const;
                    export type ErrorCodes = typeof ErrorCodes;
                }
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 * @attribute Kontomierz.Finances.Contracts.AuthorizeWhenOwnsWealthItemAttribute
                 */
                export interface DeleteWealthItem extends Command, IWealthItemRelated {
                }
                export namespace DeleteWealthItem {
                    export const ErrorCodes = {
                        InvalidWealthItemId: 1
                    } as const;
                    export type ErrorCodes = typeof ErrorCodes;
                }
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 * @attribute Kontomierz.Finances.Contracts.AuthorizeWhenOwnsWealthItemAttribute
                 */
                export interface EditWealthItem extends Command, IWealthItemRelated {
                    Type: WealthItemTypeDTO;
                    Name: string;
                    Value: Shared.Contracts.MoneyDTO;
                }
                export namespace EditWealthItem {
                    export const ErrorCodes = {
                        InvalidWealthItemId: 1,
                        WealthItemDoesNotExist: 2,
                        InvalidType: 3,
                        NameRequired: 4,
                        NameTooLong: 5,
                        ValueRequired: 6,
                        ValueCurrencyCodeRequired: 7,
                        UnknownValueCurrencyCode: 8,
                        ValueSignWealthItemTypeMismatch: 9
                    } as const;
                    export type ErrorCodes = typeof ErrorCodes;
                }
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 */
                export interface MyTotalWealth extends Query<MyTotalWealthDTO> {
                }
                export interface MyTotalWealthDTO {
                    BankAccountsPlnSmallestUnit: number;
                    WalletsPlnSmallestUnit: number;
                    WealthItemsPlnSmallestUnit: number;
                    GrandTotalPlnSmallestUnit: number;
                }
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 */
                export interface MyWealthItems extends Query<MyWealthItemsDTO> {
                }
                export interface MyWealthItemsDTO {
                    Assets: WealthItemDTO[];
                    Liabilities: WealthItemDTO[];
                }
                export interface WealthItemDTO {
                    Id: string;
                    Name: string;
                    Value: Shared.Contracts.MoneyDTO;
                    DateCreated: ApiDateTimeOffset;
                }
                export enum WealthItemTypeDTO {
                    Asset = 0,
                    Liability = 1
                }
            }
        }
    }
    export namespace Imports {
        export namespace Contracts {
            /**
             * @attribute LeanCode.Contracts.Security.AllowUnauthorizedAttribute
             */
            export interface ExampleQuery extends Query<string> {
            }
            export interface Permissions {
            }
            export namespace Permissions {
                export const SystemApiAccess = \\"SystemApiAccess\\";
                export const KontomatikImports = \\"KontomatikImports\\";
                export const DebugApiAccess = \\"DebugApiAccess\\";
                export const OldKontomierzMigration = \\"OldKontomierzMigration\\";
            }
            export namespace Imports {
                export interface KontomatikImportRequestExceptionDTO {
                    Error: KontomatikImportRequestErrorDTO;
                    InternalKontomatikError: string;
                }
                export interface KontomatikImportResponseDTO {
                    Exceptions: KontomatikImportRequestExceptionDTO[];
                }
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 */
                export interface RequestImportFromKontomatik extends Command {
                    SessionId: string;
                    SessionIdSignature: string;
                    MultipleAccessId?: string | null;
                    Target: string;
                    OfficialName: string;
                    Since: ApiDate;
                }
                export namespace RequestImportFromKontomatik {
                    export const ErrorCodes = {
                        SessionIdRequired: 1,
                        SessionIdSignatureRequired: 2,
                        TargetRequired: 3,
                        OfficialNameRequired: 4
                    } as const;
                    export type ErrorCodes = typeof ErrorCodes;
                }
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 */
                export interface StartImportingAllBankAccountsWithMultipleAccess extends Command {
                }
                export namespace StartImportingAllBankAccountsWithMultipleAccess {
                    export const ErrorCodes = {
                        NoMultipleSessionAccessAreActive: 1,
                        SomeImportsAreAlreadyInProgress: 2
                    } as const;
                    export type ErrorCodes = typeof ErrorCodes;
                }
                export enum KontomatikImportRequestErrorDTO {
                    General = 0,
                    SessionExpired = 1,
                    ConcurrentSessionsLimitExceed = 2,
                    ServiceMaintenance = 3,
                    MultipleAccessLimitExceeded = 4
                }
            }
        }
    }
    export namespace Shared {
        export namespace Contracts {
            export interface AuthConsts {
            }
            export interface BankDTO {
                Target: string;
                Name: string;
            }
            export interface MoneyDTO {
                AmountSmallestUnit: number;
                CurrencyCode: string;
            }
            export interface PaginatedQuery<TResult> extends Query<PaginatedResult<TResult>> {
                /**
                 * Zero-based.
                 */
                PageNumber: number;
                PageSize: number;
            }
            export namespace PaginatedQuery {
                export const MinPageSize = 1;
                export const MaxPageSize = 100;
            }
            export interface PaginatedResult<TResult> {
                Items: TResult[];
                TotalCount: number;
            }
            export interface SortedQuery<TResult, TSort> extends PaginatedQuery<TResult> {
                SortBy: TSort;
                SortByDescending: boolean;
            }
            export namespace AuthConsts {
                export interface InternalIdentities {
                }
                export namespace InternalIdentities {
                    export const ServerToServerApiKeyHeader = \\"X-Api-Key\\";
                }
                export interface KnownClaims {
                }
                export namespace KnownClaims {
                    export const UserId = \\"sub\\";
                    export const Role = \\"role\\";
                }
                export interface Roles {
                }
                export namespace Roles {
                    export const System = \\"system\\";
                    export const Admin = \\"admin\\";
                    export const User = \\"user\\";
                    export const DemoUser = \\"demo_user\\";
                }
                export interface Scopes {
                }
                export namespace Scopes {
                    export const InternalApi = \\"internal_api\\";
                }
            }
        }
    }
}
export namespace LeanCode {
    export namespace Contracts {
        export namespace Admin {
            export interface AdminFilterRange<T> {
                From?: T | null;
                To?: T | null;
            }
            export interface AdminQuery<TResult> extends Query<AdminQueryResult<TResult>> {
                Page: number;
                PageSize: number;
                SortOrder?: SortOrderDTO | null;
                SortBy?: string | null;
            }
            export interface AdminQueryResult<TResult> {
                Total: number;
                Items: TResult[];
            }
            export enum SortOrderDTO {
                Descending = 0,
                Ascending = 1
            }
        }
    }
}
",
}
`;

exports[`kontomierz generates contracts with defaults 1`] = `
Object {
  "test.ts": "export namespace Kontomierz {
    export namespace Finances {
        export namespace Contracts {
            export interface IBankAccountRelated {
                BankAccountId: string;
            }
            export interface IBothWalletsRelated {
                SourceWalletId: string;
                TargetWalletId: string;
            }
            export interface ICategoryGroupRelated {
                CategoryGroupId: string;
            }
            export interface ICategoryOrCategoryGroupRelated {
                CategoryId: string;
            }
            export interface ICategoryRelated {
                CategoryId: string;
            }
            export interface ISubtransactionRelated {
                SubtransactionId: string;
            }
            export interface ISubtransactionsRelated {
                SubtransactionIds?: string[] | null;
            }
            export interface ITransactionRelated {
                TransactionId: string;
            }
            export interface IWalletRelated {
                WalletId: string;
            }
            export interface IWealthItemRelated {
                WealthItemId: string;
            }
            export interface Permissions {
            }
            export namespace Permissions {
                export const SystemApiAccess = \\"SystemApiAccess\\";
                export const AdminApiAccess = \\"AdminApiAccess\\";
                export const FinancesApiAccess = \\"FinancesApiAccess\\";
                export const DebugApiAccess = \\"DebugApiAccess\\";
                export const OldKontomierzMigration = \\"OldKontomierzMigration\\";
                export const Billtech = \\"Billtech\\";
            }
            export namespace AuthorizeWhenOwnsBankAccountAttribute {
                export interface IOwnBankAccount {
                }
            }
            export namespace AuthorizeWhenOwnsBothWalletsAttribute {
                export interface IOwnBothWallets {
                }
            }
            export namespace AuthorizeWhenOwnsCategoryAttribute {
                export interface IOwnCategory {
                }
            }
            export namespace AuthorizeWhenOwnsCategoryGroupAttribute {
                export interface IOwnCategoryGroup {
                }
            }
            export namespace AuthorizeWhenOwnsCategoryOrCategoryGroupAttribute {
                export interface IOwnCategoryOrCategoryGroup {
                }
            }
            export namespace AuthorizeWhenOwnsSubtransactionAttribute {
                export interface IOwnSubtransaction {
                }
            }
            export namespace AuthorizeWhenOwnsSubtransactionsAttribute {
                export interface IOwnSubtransactions {
                }
            }
            export namespace AuthorizeWhenOwnsTransactionAttribute {
                export interface IOwnTransaction {
                }
            }
            export namespace AuthorizeWhenOwnsWalletAttribute {
                export interface IOwnWallet {
                }
            }
            export namespace AuthorizeWhenOwnsWealthItemAttribute {
                export interface IOwnWealthItem {
                }
            }
            export namespace BankAccounts {
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 * @attribute Kontomierz.Finances.Contracts.AuthorizeWhenOwnsBankAccountAttribute
                 */
                export interface AssignCustomBankAccountName extends Command, IBankAccountRelated {
                    Name?: string | null;
                }
                export namespace AssignCustomBankAccountName {
                    export const ErrorCodes = {
                        BankAccountIdInvalid: 1,
                        BankAccountDoesNotExist: 2,
                        NameTooLong: 3
                    } as const;
                    export type ErrorCodes = typeof ErrorCodes;
                }
                export interface BankAccountDTO {
                    Id: string;
                    Type: BankAccountTypeDTO;
                    Iban?: string | null;
                    IbanHash: string;
                    Name: string;
                    FriendlyName?: string | null;
                    UserAssignedName?: string | null;
                    CreditCardNumber?: string | null;
                    CurrencyCode: string;
                    BalanceSmallestUnit?: number | null;
                    MultipleAccessType: MultipleAccessTypeDTO;
                    MostRecentImport?: ImportDTO | null;
                }
                export interface BankAccountsDTO {
                    Bank: Shared.Contracts.BankDTO;
                    Accounts: BankAccountDTO[];
                }
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 * @attribute Kontomierz.Finances.Contracts.AuthorizeWhenOwnsBankAccountAttribute
                 */
                export interface DeleteBankAccount extends Command, IBankAccountRelated {
                }
                export namespace DeleteBankAccount {
                    export const ErrorCodes = {
                        BankAccountIdInvalid: 1
                    } as const;
                    export type ErrorCodes = typeof ErrorCodes;
                }
                export interface ImportDTO {
                    Id: string;
                    KontomatikSessionId?: string | null;
                    KontomatikMultipleAccess?: string | null;
                    Status: BankAccountImportStatusDTO;
                    Date: string;
                    /**
                     * If \`Status\` is \`Failed\` and this property is null it means it's an error on our side.
                     */
                    KontomatikErrorName?: string | null;
                }
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 */
                export interface MyBankAccounts extends Query<MyBankAccountsDTO> {
                }
                export interface MyBankAccountsDTO {
                    UnknownAccountsImportsInProgress: boolean;
                    BanksWithAccounts: BankAccountsDTO[];
                }
                export enum BankAccountImportStatusDTO {
                    Completed = 0,
                    InProgress = 1,
                    Failed = 2
                }
                export enum BankAccountTypeDTO {
                    Account = 0,
                    CreditCard = 1
                }
                export enum MultipleAccessTypeDTO {
                    Unknown = -1,
                    Active = 0,
                    Expired = 1,
                    Unsupported = 2
                }
            }
            export namespace Budgets {
                export interface BudgetDTO {
                    CategoryBudgets: CategoryBudgetDTO[];
                    OtherCategoriesPlannedBalancePlnSmallestUnit: number;
                    OtherCategoriesBalancePlnSmallestUnit: number;
                    OtherCategoryBalances: Categories.CategoryBalanceDTO[];
                }
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 */
                export interface BudgetSummary extends Query<BudgetSummaryDTO> {
                    /**
                     * Day is ignored
                     */
                    BillingCycle: string;
                }
                export interface BudgetSummaryDTO {
                    PlannedExpensesPlnSmallestUnit: number;
                    ExpensesPlnSmallestUnit: number;
                }
                export interface CategoryBudgetDTO {
                    /**
                     * May be a CategoryGroup ID
                     */
                    CategoryId: string;
                    PlannedBalancePlnSmallestUnit: number;
                    Comment?: string | null;
                    Type: CategoryBudgetTypeDTO;
                    BalancePlnSmallestUnit: number;
                }
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 */
                export interface CopyBudgetValidation extends Query<CopyBudgetValidationDTO> {
                    /**
                     * Day is ignored
                     */
                    NewBillingCycle: string;
                }
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 */
                export interface CopyMostRecentBudgetPlan extends Command {
                    /**
                     * Day is ignored
                     */
                    NewBillingCycle: string;
                }
                export namespace CopyMostRecentBudgetPlan {
                    export const ErrorCodes = {
                        BudgetPlanAlreadyExistsForTheBillingCycle: 1,
                        NoPreviousBudgetPlansExist: 2
                    } as const;
                    export type ErrorCodes = typeof ErrorCodes;
                }
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 * @attribute Kontomierz.Finances.Contracts.AuthorizeWhenOwnsCategoryOrCategoryGroupAttribute
                 */
                export interface DeleteCategoryBudgetPlan extends Command, ICategoryOrCategoryGroupRelated {
                    /**
                     * Day is ignored
                     */
                    BillingCycle: string;
                }
                export namespace DeleteCategoryBudgetPlan {
                    export const ErrorCodes = {
                        CategoryIdInvalid: 1
                    } as const;
                    export type ErrorCodes = typeof ErrorCodes;
                }
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 */
                export interface MyBudgetInBillingCycle extends Query<BudgetDTO> {
                    /**
                     * Day is ignored
                     */
                    BillingCycle: string;
                }
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 * @attribute Kontomierz.Finances.Contracts.AuthorizeWhenOwnsCategoryOrCategoryGroupAttribute
                 */
                export interface PlanCategoryBudget extends Command, ICategoryOrCategoryGroupRelated {
                    /**
                     * Day is ignored
                     */
                    BillingCycle: string;
                    PlannedBalancePlnSmallestUnit: number;
                    Comment?: string | null;
                }
                export namespace PlanCategoryBudget {
                    export const ErrorCodes = {
                        CategoryIdInvalid: 1,
                        CategoryDoesNotExist: 2,
                        CategoryIsInAnotherBudgetPlanCategoryGroup: 3,
                        InvalidCategoryKind: 4,
                        BalanceIsNegative: 5,
                        CommentIsTooLong: 6
                    } as const;
                    export type ErrorCodes = typeof ErrorCodes;
                }
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 */
                export interface PlanOtherCategoriesBudget extends Command {
                    /**
                     * Day is ignored
                     */
                    BillingCycle: string;
                    PlannedBalancePlnSmallestUnit: number;
                }
                export namespace PlanOtherCategoriesBudget {
                    export const ErrorCodes = {
                        BalanceIsNegative: 1
                    } as const;
                    export type ErrorCodes = typeof ErrorCodes;
                }
                export enum CategoryBudgetTypeDTO {
                    Category = 0,
                    CategoryGroup = 1
                }
                export enum CopyBudgetValidationDTO {
                    Valid = 0,
                    BudgetPlanAlreadyExistsForTheBillingCycle = 1,
                    NoPreviousBudgetPlansExist = 2
                }
            }
            export namespace Categories {
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 * @attribute Kontomierz.Finances.Contracts.AuthorizeWhenOwnsCategoryGroupAttribute
                 */
                export interface AddCategory extends Command, ICategoryGroupRelated {
                    Name: string;
                    Kind: CategoryKindDTO;
                }
                export namespace AddCategory {
                    export const ErrorCodes = {
                        InvalidCategoryGroupId: 1,
                        CategoryGroupDoesNotExist: 2,
                        NameRequired: 3,
                        NameTooLong: 4,
                        InvalidKind: 5
                    } as const;
                    export type ErrorCodes = typeof ErrorCodes;
                }
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 */
                export interface AddCategoryGroup extends Command {
                    Name: string;
                    Color: string;
                    Icon: CategoryGroupIconDTO;
                }
                export namespace AddCategoryGroup {
                    export const ErrorCodes = {
                        NameRequired: 1,
                        NameTooLong: 2,
                        ColorRequired: 3,
                        ColorInvalid: 4,
                        InvalidIcon: 5
                    } as const;
                    export type ErrorCodes = typeof ErrorCodes;
                }
                export interface CategoryBalanceDTO {
                    Id: string;
                    PlnBalanceSmallestUnit: number;
                }
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 */
                export interface CategoryBalances extends Query<CategoryBalancesDTO> {
                    TransactionDateInclusiveFrom?: string | null;
                    TransactionDateInclusiveTo?: string | null;
                    TransactionFilter?: string | null;
                    RelevantFilter?: boolean | null;
                    CategoryConfirmedFilter?: boolean | null;
                    IncomeFilter?: boolean | null;
                    BankAccountIdsFilter?: string[] | null;
                    WalletIdsFilter?: string[] | null;
                    TagIdsFilter?: string[] | null;
                }
                export interface CategoryBalancesDTO {
                    TotalPlnBalanceSmallestUnit: number;
                    CategoryGroups: CategoryGroupBalanceDTO[];
                }
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 */
                export interface CategoryBalancesSummary extends Query<CategoryGroupBalanceSummaryDTO[]> {
                    /**
                     * Day is ignored
                     */
                    BillingCycle: string;
                }
                export interface CategoryDTO {
                    Id: string;
                    Name: string;
                    Kind: CategoryKindDTO;
                }
                export interface CategoryGroupBalanceDTO {
                    Id: string;
                    PlnBalanceSmallestUnit: number;
                    Categories: CategoryBalanceDTO[];
                }
                export interface CategoryGroupBalanceSummaryDTO {
                    /**
                     * Other categories if null
                     */
                    Id?: string | null;
                    PlnBalanceSmallestUnit: number;
                    TotalBalancePercent: number;
                }
                export interface CategoryGroupDTO {
                    Id: string;
                    Name: string;
                    Color: string;
                    Icon: CategoryGroupIconDTO;
                    Categories: CategoryDTO[];
                }
                export interface CategoryGroupRelationsDTO {
                    Id: string;
                    CategoryIds: string[];
                }
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 * @attribute Kontomierz.Finances.Contracts.AuthorizeWhenOwnsCategoryAttribute
                 */
                export interface DeleteCategory extends Command, ICategoryRelated {
                    CategorizationHandling: AfterCategoryDeletionCategorizationHandlingDTO;
                    MoveTransactionsToCategoryId?: string | null;
                }
                export namespace DeleteCategory {
                    export const ErrorCodes = {
                        InvalidCategoryId: 1,
                        CannotDeleteNoneCategory: 2,
                        InvalidCategorizationHandling: 3,
                        InvalidMoveTransactionsToCategoryId: 4,
                        CategoryToMoveTransactionsToDoesNotExist: 5,
                        CategoryToMoveTransactionsToMustBeDifferent: 6,
                        CategoryToMoveTransactionsToHasDifferentKind: 7
                    } as const;
                    export type ErrorCodes = typeof ErrorCodes;
                }
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 * @attribute Kontomierz.Finances.Contracts.AuthorizeWhenOwnsCategoryGroupAttribute
                 */
                export interface DeleteCategoryGroup extends Command, ICategoryGroupRelated {
                }
                export namespace DeleteCategoryGroup {
                    export const ErrorCodes = {
                        InvalidCategoryGroupId: 1,
                        CannotDeleteNoneCategoryGroup: 2,
                        CategoryGroupHasSomeCategories: 3
                    } as const;
                    export type ErrorCodes = typeof ErrorCodes;
                }
                /**
                 * Order in the lists resembles expected order.
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 */
                export interface EditCategoriesRelations extends Command {
                    CategoriesRelations: CategoryGroupRelationsDTO[];
                }
                export namespace EditCategoriesRelations {
                    export const ErrorCodes = {
                        CategoriesRelationsCantBeNull: 1,
                        AllCategoryGroupRelationsCantBeNull: 2,
                        SomeCategoryGroupIdsAreInvalid: 3,
                        SomeCategoryIdsAreInvalid: 4,
                        CategoryGroupsAreNotSetEqual: 5,
                        CategoriesAreNotSetEqual: 6
                    } as const;
                    export type ErrorCodes = typeof ErrorCodes;
                }
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 * @attribute Kontomierz.Finances.Contracts.AuthorizeWhenOwnsCategoryAttribute
                 */
                export interface EditCategory extends Command, ICategoryRelated {
                    Name: string;
                }
                export namespace EditCategory {
                    export const ErrorCodes = {
                        InvalidCategoryId: 1,
                        CategoryDoesNotExist: 2,
                        NameRequired: 3,
                        NameTooLong: 4
                    } as const;
                    export type ErrorCodes = typeof ErrorCodes;
                }
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 * @attribute Kontomierz.Finances.Contracts.AuthorizeWhenOwnsCategoryGroupAttribute
                 */
                export interface EditCategoryGroup extends Command, ICategoryGroupRelated {
                    Name: string;
                    Color: string;
                    Icon: CategoryGroupIconDTO;
                }
                export namespace EditCategoryGroup {
                    export const ErrorCodes = {
                        InvalidCategoryGroupId: 1,
                        CategoryGroupDoesNotExist: 2,
                        NameRequired: 3,
                        NameTooLong: 4,
                        ColorRequired: 5,
                        ColorInvalid: 6,
                        InvalidIcon: 7
                    } as const;
                    export type ErrorCodes = typeof ErrorCodes;
                }
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 */
                export interface MyCategories extends Query<MyCategoriesDTO> {
                }
                export interface MyCategoriesDTO {
                    Uncategorized: CategoryGroupDTO;
                    CategoryGroups: CategoryGroupDTO[];
                }
                export enum AfterCategoryDeletionCategorizationHandlingDTO {
                    MoveToAnotherCategory = 0,
                    Recategorize = 1
                }
                export enum CategoryGroupIconDTO {
                    ShoppingBag = 0,
                    Home = 1,
                    Kid = 2,
                    Personal = 3,
                    Balance = 4,
                    Gift = 5,
                    Briefcase = 6,
                    CircleFull = 7,
                    CircleEmpty = 8,
                    GamingPad = 9,
                    Flag = 10,
                    FaceSmile = 11,
                    Key = 12,
                    Star = 13,
                    Atom = 14,
                    ActivityHeart = 15,
                    MedicalCross = 16,
                    PuzzlePiece = 17,
                    GraduationHat = 18,
                    Plane = 19,
                    Sun = 20,
                    Image = 21,
                    Palette = 22,
                    Building = 23,
                    Tag = 24,
                    Anchor = 25,
                    Mail = 26,
                    HeartRounded = 27,
                    Camera = 28,
                    ShoppingCart = 29,
                    File = 30,
                    MusicNote = 31,
                    CoinsHand = 32,
                    Car = 33,
                    Archive = 34,
                    HelpCircle = 35
                }
                export enum CategoryKindDTO {
                    Expense = 0,
                    Income = 1
                }
            }
            export namespace Migrations {
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 */
                export interface MigrationState extends Query<MigrationStateDTO> {
                }
                export interface MigrationStateDTO {
                    Status: MigrationStatusDTO;
                }
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 */
                export interface StartMigration extends Command {
                    Email: string;
                }
                export namespace StartMigration {
                    export const ErrorCodes = {
                        EmailNotConfirmed: 1,
                        NoOldKontomierzUserFound: 2,
                        MigrationAlreadyInProgress: 3
                    } as const;
                    export type ErrorCodes = typeof ErrorCodes;
                }
                export enum MigrationStatusDTO {
                    NotStarted = 0,
                    InProgress = 1
                }
            }
            export namespace Transactions {
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 * @attribute Kontomierz.Finances.Contracts.AuthorizeWhenOwnsSubtransactionAttribute
                 */
                export interface AssignCustomSubtransactionTitle extends Command, ISubtransactionRelated {
                    Title?: string | null;
                }
                export namespace AssignCustomSubtransactionTitle {
                    export const ErrorCodes = {
                        SubtransactionIdNotValid: 1,
                        SubtransactionDoesNotExist: 2,
                        TitleTooLong: 3
                    } as const;
                    export type ErrorCodes = typeof ErrorCodes;
                }
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 * @attribute Kontomierz.Finances.Contracts.AuthorizeWhenOwnsTransactionAttribute
                 */
                export interface AssignCustomTransactionTitle extends Command, ITransactionRelated {
                    Title?: string | null;
                }
                export namespace AssignCustomTransactionTitle {
                    export const ErrorCodes = {
                        TransactionIdNotValid: 1,
                        TransactionDoesNotExist: 2,
                        TitleTooLong: 3
                    } as const;
                    export type ErrorCodes = typeof ErrorCodes;
                }
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 */
                export interface BalanceInBillingCycle extends Query<BalanceInBillingCycleWithComparisonDTO> {
                    /**
                     * Day is ignored
                     */
                    BillingCycle: string;
                }
                export interface BalanceInBillingCycleDTO {
                    BillingCycle: string;
                    BalancePlnSmallestUnit: number;
                    ExpensesPlnSmallestUnit: number;
                    IncomesPlnSmallestUnit: number;
                }
                export interface BalanceInBillingCycleWithComparisonDTO {
                    BalancePlnSmallestUnit: number;
                    ExpensesPlnSmallestUnit: number;
                    ExpensesLastBillingCycleDifferencePercent?: number | null;
                    IncomesPlnSmallestUnit: number;
                    IncomesLastBillingCycleDifferencePercent?: number | null;
                }
                /**
                 * Keep filters in sync with \`PaginatedTransactions\` query.
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 */
                export interface BalanceSummary extends Query<BalanceSummaryDTO> {
                    TransactionDateInclusiveFrom?: string | null;
                    TransactionDateInclusiveTo?: string | null;
                    Filter?: string | null;
                    RelevantFilter?: boolean | null;
                    CategoryConfirmedFilter?: boolean | null;
                    IncomeFilter?: boolean | null;
                    /**
                     * Possibly a group category ID
                     */
                    CategoryIdFilter?: string | null;
                    BankAccountIdsFilter?: string[] | null;
                    WalletIdsFilter?: string[] | null;
                    TagIdsFilter?: string[] | null;
                }
                export interface BalanceSummaryDTO {
                    ExpensesPlnSmallestUnit: number;
                    IncomesPlnSmallestUnit: number;
                }
                /**
                 * Up to 12 billing cycles ordered ascending.
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 */
                export interface BalancesByBillingCycles extends Query<BalanceInBillingCycleDTO[]> {
                    /**
                     * Day is ignored
                     */
                    BillingCycle: string;
                }
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 * @attribute Kontomierz.Finances.Contracts.AuthorizeWhenOwnsSubtransactionAttribute
                 */
                export interface ConfirmTransactionCategory extends Command, ISubtransactionRelated {
                }
                export namespace ConfirmTransactionCategory {
                    export const ErrorCodes = {
                        SubtransactionIdInvalid: 1,
                        SubtransactionDoesNotExist: 2,
                        CannotConfirmTransactionsCategory: 3
                    } as const;
                    export type ErrorCodes = typeof ErrorCodes;
                }
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 * @attribute Kontomierz.Finances.Contracts.AuthorizeWhenOwnsWalletAttribute
                 */
                export interface CreateWalletTransaction extends Command, IWalletRelated {
                    Name: string;
                    CategoryId: string;
                    TransactionDate: string;
                    AmountSmallestUnit: number;
                }
                export namespace CreateWalletTransaction {
                    export const ErrorCodes = {
                        WalletIdNotValid: 1,
                        WalletDoesNotExist: 2,
                        NameRequired: 3,
                        NameTooLong: 4,
                        CategoryIdNotValid: 5,
                        CategoryDoesNotExist: 6,
                        AmountDoesNotMatchCategoryKind: 7
                    } as const;
                    export type ErrorCodes = typeof ErrorCodes;
                }
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 * @attribute Kontomierz.Finances.Contracts.AuthorizeWhenOwnsTransactionAttribute
                 */
                export interface DeleteTransaction extends Command, ITransactionRelated {
                }
                export namespace DeleteTransaction {
                    export const ErrorCodes = {
                        TransactionIdNotValid: 1
                    } as const;
                    export type ErrorCodes = typeof ErrorCodes;
                }
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 * @attribute Kontomierz.Finances.Contracts.AuthorizeWhenOwnsTransactionAttribute
                 * @attribute Kontomierz.Finances.Contracts.AuthorizeWhenOwnsWalletAttribute
                 */
                export interface EditWalletTransaction extends Command, ITransactionRelated, IWalletRelated {
                    Name: string;
                    CategoryId: string;
                    TransactionDate: string;
                    AmountSmallestUnit: number;
                }
                export namespace EditWalletTransaction {
                    export const ErrorCodes = {
                        TransactionIdNotValid: 1,
                        TransactionDoesNotExist: 2,
                        TransactionTypeNotValid: 3,
                        SplitTransactionsCannotBeEdited: 4,
                        WalletIdNotValid: 5,
                        WalletDoesNotExist: 6,
                        NameRequired: 7,
                        NameTooLong: 8,
                        CategoryIdNotValid: 9,
                        CategoryDoesNotExist: 10,
                        AmountDoesNotMatchCategoryKind: 11
                    } as const;
                    export type ErrorCodes = typeof ErrorCodes;
                }
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 * @attribute Kontomierz.Finances.Contracts.AuthorizeWhenOwnsSubtransactionAttribute
                 */
                export interface MarkAsIrrelevant extends Command, ISubtransactionRelated {
                }
                export namespace MarkAsIrrelevant {
                    export const ErrorCodes = {
                        SubtransactionIdNotValid: 1,
                        SubtransactionDoesNotExist: 2
                    } as const;
                    export type ErrorCodes = typeof ErrorCodes;
                }
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 * @attribute Kontomierz.Finances.Contracts.AuthorizeWhenOwnsSubtransactionAttribute
                 */
                export interface MarkAsRelevant extends Command, ISubtransactionRelated {
                }
                export namespace MarkAsRelevant {
                    export const ErrorCodes = {
                        SubtransactionIdNotValid: 1,
                        SubtransactionDoesNotExist: 2
                    } as const;
                    export type ErrorCodes = typeof ErrorCodes;
                }
                export interface NewSubtransactionDTO {
                    Id: string;
                    /**
                     * In the same currency as parent transaction.
                     */
                    AmountSmallestUnit: number;
                    CategoryId?: string | null;
                    UserAssignedTitle?: string | null;
                    Irrelevant: boolean;
                }
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 * @attribute Kontomierz.Finances.Contracts.AuthorizeWhenOwnsSubtransactionAttribute
                 * @attribute Kontomierz.Finances.Contracts.AuthorizeWhenOwnsCategoryAttribute
                 */
                export interface OverrideTransactionCategory extends Command, ISubtransactionRelated, ICategoryRelated {
                }
                export namespace OverrideTransactionCategory {
                    export const ErrorCodes = {
                        SubtransactionIdIsInvalid: 1,
                        SubtransactionDoesNotExist: 2,
                        CategoryIdIsInvalid: 3,
                        CategoryDoesNotExist: 4,
                        SubtransactionDoesNotMatchCategoryKind: 5
                    } as const;
                    export type ErrorCodes = typeof ErrorCodes;
                }
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 */
                export interface PaginatedTransactions extends Shared.Contracts.SortedQuery<TransactionDTO, PaginatedTransactionsSortFieldDTO> {
                    TransactionDateInclusiveFrom?: string | null;
                    TransactionDateInclusiveTo?: string | null;
                    Filter?: string | null;
                    RelevantFilter?: boolean | null;
                    CategoryConfirmedFilter?: boolean | null;
                    IncomeFilter?: boolean | null;
                    /**
                     * Possibly a group category ID
                     */
                    CategoryIdFilter?: string | null;
                    BankAccountIdsFilter?: string[] | null;
                    WalletIdsFilter?: string[] | null;
                    TagIdsFilter?: string[] | null;
                }
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 * @attribute Kontomierz.Finances.Contracts.AuthorizeWhenOwnsTransactionAttribute
                 */
                export interface SplitTransaction extends Command, ITransactionRelated {
                    Subtransactions?: NewSubtransactionDTO[] | null;
                }
                export namespace SplitTransaction {
                    export const ErrorCodes = {
                        TransactionIdNotValid: 1,
                        TransactionDoesNotExist: 2,
                        SubtransactionIdNotValid: 3,
                        SubtransactionIdNotUnique: 4,
                        SubtransactionAlreadyExists: 5,
                        CategoryIdNotValid: 6,
                        CategoryDoesNotExist: 7,
                        CategoryKindDoesNotMatch: 8,
                        AmountIncorrectSign: 9,
                        AmountSumDoesNotMatch: 10,
                        SubtransactionTitleTooLong: 11
                    } as const;
                    export type ErrorCodes = typeof ErrorCodes;
                }
                export interface SubtransactionDTO {
                    Id: string;
                    /**
                     * In the same currency as parent transaction.
                     */
                    AmountSmallestUnit: number;
                    AmountPlnSmallestUnit?: number | null;
                    CategoryId?: string | null;
                    CanConfirmCategory: boolean;
                    UserAssignedTitle?: string | null;
                    Irrelevant: boolean;
                }
                export interface TransactionDTO {
                    Id: string;
                    WalletId?: string | null;
                    WalletName?: string | null;
                    BankAccountId?: string | null;
                    BankAccountName?: string | null;
                    Bank?: Shared.Contracts.BankDTO | null;
                    TransactionDate: string;
                    OriginalTransactionDate: string;
                    BookedOnDate?: string | null;
                    AmountPlnSmallestUnit?: number | null;
                    AmountSmallestUnit: number;
                    OriginalAmountSmallestUnit: number;
                    CurrencyCode: string;
                    AccountBalanceAfterTransactionSmallestUnit?: number | null;
                    Title?: string | null;
                    OtherPartyName?: string | null;
                    OtherPartyIban?: string | null;
                    Kind?: string | null;
                    Status?: TransactionStatusDTO | null;
                    Comment?: string | null;
                    UserAssignedTitle?: string | null;
                    Subtransactions: SubtransactionDTO[];
                    Tags: Tags.TagDTO[];
                }
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 * @attribute Kontomierz.Finances.Contracts.AuthorizeWhenOwnsTransactionAttribute
                 */
                export interface UpdateTransactionAmount extends Command, ITransactionRelated {
                    AmountSmallestUnit: number;
                }
                export namespace UpdateTransactionAmount {
                    export const ErrorCodes = {
                        TransactionIdNotValid: 1,
                        TransactionDoesNotExist: 2,
                        SplitTransactionsCannotBeUpdated: 3,
                        AmountSignDoesNotMatch: 4
                    } as const;
                    export type ErrorCodes = typeof ErrorCodes;
                }
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 * @attribute Kontomierz.Finances.Contracts.AuthorizeWhenOwnsTransactionAttribute
                 */
                export interface UpdateTransactionComment extends Command, ITransactionRelated {
                    Comment?: string | null;
                }
                export namespace UpdateTransactionComment {
                    export const ErrorCodes = {
                        TransactionIdNotValid: 1,
                        TransactionDoesNotExist: 2,
                        CommentTooLong: 3
                    } as const;
                    export type ErrorCodes = typeof ErrorCodes;
                }
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 * @attribute Kontomierz.Finances.Contracts.AuthorizeWhenOwnsTransactionAttribute
                 */
                export interface UpdateTransactionDate extends Command, ITransactionRelated {
                    TransactionDate: string;
                }
                export namespace UpdateTransactionDate {
                    export const ErrorCodes = {
                        TransactionIdNotValid: 1,
                        TransactionDoesNotExist: 2
                    } as const;
                    export type ErrorCodes = typeof ErrorCodes;
                }
                export enum PaginatedTransactionsSortFieldDTO {
                    Date = 0,
                    Amount = 1
                }
                export enum TransactionStatusDTO {
                    Done = 0,
                    Pending = 1,
                    Rejected = 2,
                    Scheduled = 3,
                    Hold = 4
                }
                export namespace BulkActions {
                    /**
                     * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                     * @attribute Kontomierz.Finances.Contracts.AuthorizeWhenOwnsSubtransactionsAttribute
                     */
                    export interface BulkDeleteTransactions extends Command, ISubtransactionsRelated {
                    }
                    export namespace BulkDeleteTransactions {
                        export const ErrorCodes = {
                            SomeSubtransactionIdsNotValid: 1,
                            TooManySubtransactions: 2
                        } as const;
                        export type ErrorCodes = typeof ErrorCodes;
                    }
                    /**
                     * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                     * @attribute Kontomierz.Finances.Contracts.AuthorizeWhenOwnsSubtransactionsAttribute
                     */
                    export interface BulkMarkAsIrrelevant extends Command, ISubtransactionsRelated {
                    }
                    export namespace BulkMarkAsIrrelevant {
                        export const ErrorCodes = {
                            SomeSubtransactionIdsNotValid: 1,
                            SomeSubtransactionsDoNotExist: 2,
                            TooManySubtransactions: 3
                        } as const;
                        export type ErrorCodes = typeof ErrorCodes;
                    }
                    /**
                     * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                     * @attribute Kontomierz.Finances.Contracts.AuthorizeWhenOwnsSubtransactionsAttribute
                     */
                    export interface BulkMarkAsRelevant extends Command, ISubtransactionsRelated {
                    }
                    export namespace BulkMarkAsRelevant {
                        export const ErrorCodes = {
                            SomeSubtransactionIdsNotValid: 1,
                            SomeSubtransactionsDoNotExist: 2,
                            TooManySubtransactions: 3
                        } as const;
                        export type ErrorCodes = typeof ErrorCodes;
                    }
                    /**
                     * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                     * @attribute Kontomierz.Finances.Contracts.AuthorizeWhenOwnsSubtransactionsAttribute
                     * @attribute Kontomierz.Finances.Contracts.AuthorizeWhenOwnsCategoryAttribute
                     */
                    export interface BulkOverrideTransactionCategories extends Command, ISubtransactionsRelated, ICategoryRelated {
                    }
                    export namespace BulkOverrideTransactionCategories {
                        export const ErrorCodes = {
                            SomeSubtransactionIdsNotValid: 1,
                            SomeSubtransactionsDoNotExist: 2,
                            TooManySubtransactions: 3,
                            CategoryIdIsInvalid: 4,
                            CategoryDoesNotExist: 5,
                            SubtransactionsDoNotMatchCategoryKind: 6
                        } as const;
                        export type ErrorCodes = typeof ErrorCodes;
                    }
                }
                export namespace Tags {
                    /**
                     * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                     */
                    export interface MyTags extends Query<TagDTO[]> {
                        FilterByTransactions: boolean;
                        TransactionDateInclusiveFrom?: string | null;
                        TransactionDateInclusiveTo?: string | null;
                        TransactionFilter?: string | null;
                        RelevantFilter?: boolean | null;
                        CategoryConfirmedFilter?: boolean | null;
                        IncomeFilter?: boolean | null;
                        /**
                         * Possibly a group category ID
                         */
                        CategoryIdFilter?: string | null;
                        BankAccountIdsFilter?: string[] | null;
                        WalletIdsFilter?: string[] | null;
                    }
                    export interface TagDTO {
                        Id: string;
                        Name: string;
                    }
                    /**
                     * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                     * @attribute Kontomierz.Finances.Contracts.AuthorizeWhenOwnsTransactionAttribute
                     */
                    export interface TagTransaction extends Command, ITransactionRelated {
                        Tags?: string[] | null;
                    }
                    export namespace TagTransaction {
                        export const ErrorCodes = {
                            TransactionIdNotValid: 1,
                            TransactionDoesNotExist: 2
                        } as const;
                        export type ErrorCodes = typeof ErrorCodes;
                    }
                }
            }
            export namespace Users {
                /**
                 * @attribute LeanCode.Contracts.Security.AllowUnauthorizedAttribute
                 */
                export interface CreateDemoSession extends Operation<string> {
                }
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 */
                export interface DismissMigrationsBanner extends Command {
                }
                export interface RegulationsDTO {
                    TermsOfService: string;
                    PrivacyPolicy: string;
                }
                /**
                 * @attribute LeanCode.Contracts.Security.AllowUnauthorizedAttribute
                 */
                export interface RegulationsLinks extends Query<RegulationsDTO> {
                }
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 */
                export interface Settings extends Query<UserSettingsDTO> {
                }
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 */
                export interface UpdateBillingCycleStartDay extends Command {
                    BillingCycleStartDay: number;
                    BillingCycleEndsWithStartDay: boolean;
                }
                export namespace UpdateBillingCycleStartDay {
                    export const ErrorCodes = {
                        InvalidStartDay: 1
                    } as const;
                    export type ErrorCodes = typeof ErrorCodes;
                }
                export interface UserSettingsDTO {
                    BillingCycleStartDay: number;
                    BillingCycleEndsWithStartDay: boolean;
                    MigrationsBannerDismissed: boolean;
                }
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 */
                export interface VerifyAdditionalEmailForMigration extends Operation<VerifyAdditionalEmailForMigrationResultDTO> {
                    Email: string;
                }
                export interface VerifyAdditionalEmailForMigrationResultDTO {
                    ValidationError?: VerifyAdditionalEmailForMigrationErrorDTO | null;
                    VerificationFlowId?: string | null;
                }
                export enum VerifyAdditionalEmailForMigrationErrorDTO {
                    EmailNotValid = 0,
                    NoSuchEmailInOldKontomierz = 1,
                    EmailVerificationConflict = 2
                }
            }
            export namespace Wallets {
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 */
                export interface CreateWallet extends Command {
                    Name: string;
                    InitialBalance: Shared.Contracts.MoneyDTO;
                }
                export namespace CreateWallet {
                    export const ErrorCodes = {
                        NameRequired: 1,
                        NameTooLong: 2,
                        InitialBalanceRequired: 3,
                        InitialBalanceCurrencyCodeRequired: 5,
                        UnknownInitialBalanceCurrencyCode: 6
                    } as const;
                    export type ErrorCodes = typeof ErrorCodes;
                }
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 * @attribute Kontomierz.Finances.Contracts.AuthorizeWhenOwnsWalletAttribute
                 */
                export interface DeleteWallet extends Command, IWalletRelated {
                }
                export namespace DeleteWallet {
                    export const ErrorCodes = {
                        WalletIdInvalid: 1
                    } as const;
                    export type ErrorCodes = typeof ErrorCodes;
                }
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 * @attribute Kontomierz.Finances.Contracts.AuthorizeWhenOwnsWalletAttribute
                 */
                export interface EditWallet extends Command, IWalletRelated {
                    Name: string;
                }
                export namespace EditWallet {
                    export const ErrorCodes = {
                        InvalidWalletId: 1,
                        WalletDoesNotExist: 2,
                        NameRequired: 3,
                        NameTooLong: 4
                    } as const;
                    export type ErrorCodes = typeof ErrorCodes;
                }
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 * @attribute Kontomierz.Finances.Contracts.AuthorizeWhenOwnsWalletAttribute
                 */
                export interface EditWalletBalance extends Command, IWalletRelated {
                    BalanceAmountSmallestUnit: number;
                }
                export namespace EditWalletBalance {
                    export const ErrorCodes = {
                        InvalidWalletId: 1,
                        WalletDoesNotExist: 2
                    } as const;
                    export type ErrorCodes = typeof ErrorCodes;
                }
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 */
                export interface MyWallets extends LeanCode.Contracts.Admin.AdminQuery<WalletDTO> {
                    /**
                     * @attribute LeanCode.Contracts.Admin.AdminFilterFor
                     */
                    NameFilter: LeanCode.Contracts.Admin.AdminFilterRange<string>;
                }
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 * @attribute Kontomierz.Finances.Contracts.AuthorizeWhenOwnsBothWalletsAttribute
                 */
                export interface TransferMoneyBetweenWallets extends Command, IBothWalletsRelated {
                    Name: string;
                    TransactionDate: string;
                    AmountSmallestUnit: number;
                }
                export namespace TransferMoneyBetweenWallets {
                    export const ErrorCodes = {
                        SourceWalletIdNotValid: 1,
                        SourceWalletDoesNotExist: 2,
                        TargetWalletIdNotValid: 3,
                        TargetWalletDoesNotExist: 4,
                        SourceAndTargetMustBeDifferent: 5,
                        CurrencyMismatch: 6,
                        NameRequired: 7,
                        NameTooLong: 8,
                        AmountIsNotPositive: 9
                    } as const;
                    export type ErrorCodes = typeof ErrorCodes;
                }
                export interface WalletDTO {
                    Id: string;
                    /**
                     * @attribute LeanCode.Contracts.Admin.AdminColumn
                     */
                    Name: string;
                    Balance: Shared.Contracts.MoneyDTO;
                    /**
                     * @attribute LeanCode.Contracts.Admin.AdminColumn
                     */
                    DateCreated: string;
                    /**
                     * @attribute LeanCode.Contracts.Admin.AdminColumn
                     */
                    MigrationStatus: Migrations.MigrationStatusDTO;
                }
            }
            export namespace WealthItems {
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 */
                export interface CreateWealthItem extends Command {
                    Type: WealthItemTypeDTO;
                    Name: string;
                    Value: Shared.Contracts.MoneyDTO;
                }
                export namespace CreateWealthItem {
                    export const ErrorCodes = {
                        InvalidType: 1,
                        NameRequired: 2,
                        NameTooLong: 3,
                        ValueRequired: 4,
                        ValueCurrencyCodeRequired: 5,
                        UnknownValueCurrencyCode: 6,
                        ValueSignWealthItemTypeMismatch: 7
                    } as const;
                    export type ErrorCodes = typeof ErrorCodes;
                }
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 * @attribute Kontomierz.Finances.Contracts.AuthorizeWhenOwnsWealthItemAttribute
                 */
                export interface DeleteWealthItem extends Command, IWealthItemRelated {
                }
                export namespace DeleteWealthItem {
                    export const ErrorCodes = {
                        InvalidWealthItemId: 1
                    } as const;
                    export type ErrorCodes = typeof ErrorCodes;
                }
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 * @attribute Kontomierz.Finances.Contracts.AuthorizeWhenOwnsWealthItemAttribute
                 */
                export interface EditWealthItem extends Command, IWealthItemRelated {
                    Type: WealthItemTypeDTO;
                    Name: string;
                    Value: Shared.Contracts.MoneyDTO;
                }
                export namespace EditWealthItem {
                    export const ErrorCodes = {
                        InvalidWealthItemId: 1,
                        WealthItemDoesNotExist: 2,
                        InvalidType: 3,
                        NameRequired: 4,
                        NameTooLong: 5,
                        ValueRequired: 6,
                        ValueCurrencyCodeRequired: 7,
                        UnknownValueCurrencyCode: 8,
                        ValueSignWealthItemTypeMismatch: 9
                    } as const;
                    export type ErrorCodes = typeof ErrorCodes;
                }
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 */
                export interface MyTotalWealth extends Query<MyTotalWealthDTO> {
                }
                export interface MyTotalWealthDTO {
                    BankAccountsPlnSmallestUnit: number;
                    WalletsPlnSmallestUnit: number;
                    WealthItemsPlnSmallestUnit: number;
                    GrandTotalPlnSmallestUnit: number;
                }
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 */
                export interface MyWealthItems extends Query<MyWealthItemsDTO> {
                }
                export interface MyWealthItemsDTO {
                    Assets: WealthItemDTO[];
                    Liabilities: WealthItemDTO[];
                }
                export interface WealthItemDTO {
                    Id: string;
                    Name: string;
                    Value: Shared.Contracts.MoneyDTO;
                    DateCreated: string;
                }
                export enum WealthItemTypeDTO {
                    Asset = 0,
                    Liability = 1
                }
            }
        }
    }
    export namespace Imports {
        export namespace Contracts {
            /**
             * @attribute LeanCode.Contracts.Security.AllowUnauthorizedAttribute
             */
            export interface ExampleQuery extends Query<string> {
            }
            export interface Permissions {
            }
            export namespace Permissions {
                export const SystemApiAccess = \\"SystemApiAccess\\";
                export const KontomatikImports = \\"KontomatikImports\\";
                export const DebugApiAccess = \\"DebugApiAccess\\";
                export const OldKontomierzMigration = \\"OldKontomierzMigration\\";
            }
            export namespace Imports {
                export interface KontomatikImportRequestExceptionDTO {
                    Error: KontomatikImportRequestErrorDTO;
                    InternalKontomatikError: string;
                }
                export interface KontomatikImportResponseDTO {
                    Exceptions: KontomatikImportRequestExceptionDTO[];
                }
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 */
                export interface RequestImportFromKontomatik extends Command {
                    SessionId: string;
                    SessionIdSignature: string;
                    MultipleAccessId?: string | null;
                    Target: string;
                    OfficialName: string;
                    Since: string;
                }
                export namespace RequestImportFromKontomatik {
                    export const ErrorCodes = {
                        SessionIdRequired: 1,
                        SessionIdSignatureRequired: 2,
                        TargetRequired: 3,
                        OfficialNameRequired: 4
                    } as const;
                    export type ErrorCodes = typeof ErrorCodes;
                }
                /**
                 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
                 */
                export interface StartImportingAllBankAccountsWithMultipleAccess extends Command {
                }
                export namespace StartImportingAllBankAccountsWithMultipleAccess {
                    export const ErrorCodes = {
                        NoMultipleSessionAccessAreActive: 1,
                        SomeImportsAreAlreadyInProgress: 2
                    } as const;
                    export type ErrorCodes = typeof ErrorCodes;
                }
                export enum KontomatikImportRequestErrorDTO {
                    General = 0,
                    SessionExpired = 1,
                    ConcurrentSessionsLimitExceed = 2,
                    ServiceMaintenance = 3,
                    MultipleAccessLimitExceeded = 4
                }
            }
        }
    }
    export namespace Shared {
        export namespace Contracts {
            export interface AuthConsts {
            }
            export interface BankDTO {
                Target: string;
                Name: string;
            }
            export interface MoneyDTO {
                AmountSmallestUnit: number;
                CurrencyCode: string;
            }
            export interface PaginatedQuery<TResult> extends Query<PaginatedResult<TResult>> {
                /**
                 * Zero-based.
                 */
                PageNumber: number;
                PageSize: number;
            }
            export namespace PaginatedQuery {
                export const MinPageSize = 1;
                export const MaxPageSize = 100;
            }
            export interface PaginatedResult<TResult> {
                Items: TResult[];
                TotalCount: number;
            }
            export interface SortedQuery<TResult, TSort> extends PaginatedQuery<TResult> {
                SortBy: TSort;
                SortByDescending: boolean;
            }
            export namespace AuthConsts {
                export interface InternalIdentities {
                }
                export namespace InternalIdentities {
                    export const ServerToServerApiKeyHeader = \\"X-Api-Key\\";
                }
                export interface KnownClaims {
                }
                export namespace KnownClaims {
                    export const UserId = \\"sub\\";
                    export const Role = \\"role\\";
                }
                export interface Roles {
                }
                export namespace Roles {
                    export const System = \\"system\\";
                    export const Admin = \\"admin\\";
                    export const User = \\"user\\";
                    export const DemoUser = \\"demo_user\\";
                }
                export interface Scopes {
                }
                export namespace Scopes {
                    export const InternalApi = \\"internal_api\\";
                }
            }
        }
    }
}
export namespace LeanCode {
    export namespace Contracts {
        export namespace Admin {
            export interface AdminFilterRange<T> {
                From?: T | null;
                To?: T | null;
            }
            export interface AdminQuery<TResult> extends Query<AdminQueryResult<TResult>> {
                Page: number;
                PageSize: number;
                SortOrder?: SortOrderDTO | null;
                SortBy?: string | null;
            }
            export interface AdminQueryResult<TResult> {
                Total: number;
                Items: TResult[];
            }
            export enum SortOrderDTO {
                Descending = 0,
                Ascending = 1
            }
        }
    }
}
",
}
`;

exports[`kontomierz generates contracts with name transforms 1`] = `
Object {
  "test.ts": "export interface IOwnBankAccount {
}
export interface IOwnBothWallets {
}
export interface IOwnCategory {
}
export interface IOwnCategoryGroup {
}
export interface IOwnCategoryOrCategoryGroup {
}
export interface IOwnSubtransaction {
}
export interface IOwnSubtransactions {
}
export interface IOwnTransaction {
}
export interface IOwnWallet {
}
export interface IOwnWealthItem {
}
/**
 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
 * @attribute Kontomierz.Finances.Contracts.AuthorizeWhenOwnsBankAccountAttribute
 */
export interface AssignCustomBankAccountName extends Command, IBankAccountRelated {
    Name?: string | null;
}
export namespace AssignCustomBankAccountName {
    export const ErrorCodes = {
        BankAccountIdInvalid: 1,
        BankAccountDoesNotExist: 2,
        NameTooLong: 3
    } as const;
    export type ErrorCodes = typeof ErrorCodes;
}
export interface BankAccountDTO {
    Id: string;
    Type: BankAccountTypeDTO;
    Iban?: string | null;
    IbanHash: string;
    Name: string;
    FriendlyName?: string | null;
    UserAssignedName?: string | null;
    CreditCardNumber?: string | null;
    CurrencyCode: string;
    BalanceSmallestUnit?: number | null;
    MultipleAccessType: MultipleAccessTypeDTO;
    MostRecentImport?: ImportDTO | null;
}
export interface BankAccountsDTO {
    Bank: BankDTO;
    Accounts: BankAccountDTO[];
}
/**
 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
 * @attribute Kontomierz.Finances.Contracts.AuthorizeWhenOwnsBankAccountAttribute
 */
export interface DeleteBankAccount extends Command, IBankAccountRelated {
}
export namespace DeleteBankAccount {
    export const ErrorCodes = {
        BankAccountIdInvalid: 1
    } as const;
    export type ErrorCodes = typeof ErrorCodes;
}
export interface ImportDTO {
    Id: string;
    KontomatikSessionId?: string | null;
    KontomatikMultipleAccess?: string | null;
    Status: BankAccountImportStatusDTO;
    Date: ApiDateTimeOffset;
    /**
     * If \`Status\` is \`Failed\` and this property is null it means it's an error on our side.
     */
    KontomatikErrorName?: string | null;
}
/**
 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
 */
export interface MyBankAccounts extends Query<MyBankAccountsDTO> {
}
export interface MyBankAccountsDTO {
    UnknownAccountsImportsInProgress: boolean;
    BanksWithAccounts: BankAccountsDTO[];
}
export interface BudgetDTO {
    CategoryBudgets: CategoryBudgetDTO[];
    OtherCategoriesPlannedBalancePlnSmallestUnit: number;
    OtherCategoriesBalancePlnSmallestUnit: number;
    OtherCategoryBalances: CategoryBalanceDTO[];
}
/**
 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
 */
export interface BudgetSummary extends Query<BudgetSummaryDTO> {
    /**
     * Day is ignored
     */
    BillingCycle: ApiDate;
}
export interface BudgetSummaryDTO {
    PlannedExpensesPlnSmallestUnit: number;
    ExpensesPlnSmallestUnit: number;
}
export interface CategoryBudgetDTO {
    /**
     * May be a CategoryGroup ID
     */
    CategoryId: string;
    PlannedBalancePlnSmallestUnit: number;
    Comment?: string | null;
    Type: CategoryBudgetTypeDTO;
    BalancePlnSmallestUnit: number;
}
/**
 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
 */
export interface CopyBudgetValidation extends Query<CopyBudgetValidationDTO> {
    /**
     * Day is ignored
     */
    NewBillingCycle: ApiDate;
}
/**
 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
 */
export interface CopyMostRecentBudgetPlan extends Command {
    /**
     * Day is ignored
     */
    NewBillingCycle: ApiDate;
}
export namespace CopyMostRecentBudgetPlan {
    export const ErrorCodes = {
        BudgetPlanAlreadyExistsForTheBillingCycle: 1,
        NoPreviousBudgetPlansExist: 2
    } as const;
    export type ErrorCodes = typeof ErrorCodes;
}
/**
 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
 * @attribute Kontomierz.Finances.Contracts.AuthorizeWhenOwnsCategoryOrCategoryGroupAttribute
 */
export interface DeleteCategoryBudgetPlan extends Command, ICategoryOrCategoryGroupRelated {
    /**
     * Day is ignored
     */
    BillingCycle: ApiDate;
}
export namespace DeleteCategoryBudgetPlan {
    export const ErrorCodes = {
        CategoryIdInvalid: 1
    } as const;
    export type ErrorCodes = typeof ErrorCodes;
}
/**
 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
 */
export interface MyBudgetInBillingCycle extends Query<BudgetDTO> {
    /**
     * Day is ignored
     */
    BillingCycle: ApiDate;
}
/**
 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
 * @attribute Kontomierz.Finances.Contracts.AuthorizeWhenOwnsCategoryOrCategoryGroupAttribute
 */
export interface PlanCategoryBudget extends Command, ICategoryOrCategoryGroupRelated {
    /**
     * Day is ignored
     */
    BillingCycle: ApiDate;
    PlannedBalancePlnSmallestUnit: number;
    Comment?: string | null;
}
export namespace PlanCategoryBudget {
    export const ErrorCodes = {
        CategoryIdInvalid: 1,
        CategoryDoesNotExist: 2,
        CategoryIsInAnotherBudgetPlanCategoryGroup: 3,
        InvalidCategoryKind: 4,
        BalanceIsNegative: 5,
        CommentIsTooLong: 6
    } as const;
    export type ErrorCodes = typeof ErrorCodes;
}
/**
 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
 */
export interface PlanOtherCategoriesBudget extends Command {
    /**
     * Day is ignored
     */
    BillingCycle: ApiDate;
    PlannedBalancePlnSmallestUnit: number;
}
export namespace PlanOtherCategoriesBudget {
    export const ErrorCodes = {
        BalanceIsNegative: 1
    } as const;
    export type ErrorCodes = typeof ErrorCodes;
}
/**
 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
 * @attribute Kontomierz.Finances.Contracts.AuthorizeWhenOwnsCategoryGroupAttribute
 */
export interface AddCategory extends Command, ICategoryGroupRelated {
    Name: string;
    Kind: CategoryKindDTO;
}
export namespace AddCategory {
    export const ErrorCodes = {
        InvalidCategoryGroupId: 1,
        CategoryGroupDoesNotExist: 2,
        NameRequired: 3,
        NameTooLong: 4,
        InvalidKind: 5
    } as const;
    export type ErrorCodes = typeof ErrorCodes;
}
/**
 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
 */
export interface AddCategoryGroup extends Command {
    Name: string;
    Color: string;
    Icon: CategoryGroupIconDTO;
}
export namespace AddCategoryGroup {
    export const ErrorCodes = {
        NameRequired: 1,
        NameTooLong: 2,
        ColorRequired: 3,
        ColorInvalid: 4,
        InvalidIcon: 5
    } as const;
    export type ErrorCodes = typeof ErrorCodes;
}
export interface CategoryBalanceDTO {
    Id: string;
    PlnBalanceSmallestUnit: number;
}
/**
 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
 */
export interface CategoryBalances extends Query<CategoryBalancesDTO> {
    TransactionDateInclusiveFrom?: ApiDate | null;
    TransactionDateInclusiveTo?: ApiDate | null;
    TransactionFilter?: string | null;
    RelevantFilter?: boolean | null;
    CategoryConfirmedFilter?: boolean | null;
    IncomeFilter?: boolean | null;
    BankAccountIdsFilter?: string[] | null;
    WalletIdsFilter?: string[] | null;
    TagIdsFilter?: string[] | null;
}
export interface CategoryBalancesDTO {
    TotalPlnBalanceSmallestUnit: number;
    CategoryGroups: CategoryGroupBalanceDTO[];
}
/**
 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
 */
export interface CategoryBalancesSummary extends Query<CategoryGroupBalanceSummaryDTO[]> {
    /**
     * Day is ignored
     */
    BillingCycle: ApiDate;
}
export interface CategoryDTO {
    Id: string;
    Name: string;
    Kind: CategoryKindDTO;
}
export interface CategoryGroupBalanceDTO {
    Id: string;
    PlnBalanceSmallestUnit: number;
    Categories: CategoryBalanceDTO[];
}
export interface CategoryGroupBalanceSummaryDTO {
    /**
     * Other categories if null
     */
    Id?: string | null;
    PlnBalanceSmallestUnit: number;
    TotalBalancePercent: number;
}
export interface CategoryGroupDTO {
    Id: string;
    Name: string;
    Color: string;
    Icon: CategoryGroupIconDTO;
    Categories: CategoryDTO[];
}
export interface CategoryGroupRelationsDTO {
    Id: string;
    CategoryIds: string[];
}
/**
 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
 * @attribute Kontomierz.Finances.Contracts.AuthorizeWhenOwnsCategoryAttribute
 */
export interface DeleteCategory extends Command, ICategoryRelated {
    CategorizationHandling: AfterCategoryDeletionCategorizationHandlingDTO;
    MoveTransactionsToCategoryId?: string | null;
}
export namespace DeleteCategory {
    export const ErrorCodes = {
        InvalidCategoryId: 1,
        CannotDeleteNoneCategory: 2,
        InvalidCategorizationHandling: 3,
        InvalidMoveTransactionsToCategoryId: 4,
        CategoryToMoveTransactionsToDoesNotExist: 5,
        CategoryToMoveTransactionsToMustBeDifferent: 6,
        CategoryToMoveTransactionsToHasDifferentKind: 7
    } as const;
    export type ErrorCodes = typeof ErrorCodes;
}
/**
 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
 * @attribute Kontomierz.Finances.Contracts.AuthorizeWhenOwnsCategoryGroupAttribute
 */
export interface DeleteCategoryGroup extends Command, ICategoryGroupRelated {
}
export namespace DeleteCategoryGroup {
    export const ErrorCodes = {
        InvalidCategoryGroupId: 1,
        CannotDeleteNoneCategoryGroup: 2,
        CategoryGroupHasSomeCategories: 3
    } as const;
    export type ErrorCodes = typeof ErrorCodes;
}
/**
 * Order in the lists resembles expected order.
 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
 */
export interface EditCategoriesRelations extends Command {
    CategoriesRelations: CategoryGroupRelationsDTO[];
}
export namespace EditCategoriesRelations {
    export const ErrorCodes = {
        CategoriesRelationsCantBeNull: 1,
        AllCategoryGroupRelationsCantBeNull: 2,
        SomeCategoryGroupIdsAreInvalid: 3,
        SomeCategoryIdsAreInvalid: 4,
        CategoryGroupsAreNotSetEqual: 5,
        CategoriesAreNotSetEqual: 6
    } as const;
    export type ErrorCodes = typeof ErrorCodes;
}
/**
 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
 * @attribute Kontomierz.Finances.Contracts.AuthorizeWhenOwnsCategoryAttribute
 */
export interface EditCategory extends Command, ICategoryRelated {
    Name: string;
}
export namespace EditCategory {
    export const ErrorCodes = {
        InvalidCategoryId: 1,
        CategoryDoesNotExist: 2,
        NameRequired: 3,
        NameTooLong: 4
    } as const;
    export type ErrorCodes = typeof ErrorCodes;
}
/**
 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
 * @attribute Kontomierz.Finances.Contracts.AuthorizeWhenOwnsCategoryGroupAttribute
 */
export interface EditCategoryGroup extends Command, ICategoryGroupRelated {
    Name: string;
    Color: string;
    Icon: CategoryGroupIconDTO;
}
export namespace EditCategoryGroup {
    export const ErrorCodes = {
        InvalidCategoryGroupId: 1,
        CategoryGroupDoesNotExist: 2,
        NameRequired: 3,
        NameTooLong: 4,
        ColorRequired: 5,
        ColorInvalid: 6,
        InvalidIcon: 7
    } as const;
    export type ErrorCodes = typeof ErrorCodes;
}
/**
 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
 */
export interface MyCategories extends Query<MyCategoriesDTO> {
}
export interface MyCategoriesDTO {
    Uncategorized: CategoryGroupDTO;
    CategoryGroups: CategoryGroupDTO[];
}
export interface IBankAccountRelated {
    BankAccountId: string;
}
export interface IBothWalletsRelated {
    SourceWalletId: string;
    TargetWalletId: string;
}
export interface ICategoryGroupRelated {
    CategoryGroupId: string;
}
export interface ICategoryOrCategoryGroupRelated {
    CategoryId: string;
}
export interface ICategoryRelated {
    CategoryId: string;
}
export interface ISubtransactionRelated {
    SubtransactionId: string;
}
export interface ISubtransactionsRelated {
    SubtransactionIds?: string[] | null;
}
export interface ITransactionRelated {
    TransactionId: string;
}
export interface IWalletRelated {
    WalletId: string;
}
export interface IWealthItemRelated {
    WealthItemId: string;
}
/**
 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
 */
export interface MigrationState extends Query<MigrationStateDTO> {
}
export interface MigrationStateDTO {
    Status: MigrationStatusDTO;
}
/**
 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
 */
export interface StartMigration extends Command {
    Email: string;
}
export namespace StartMigration {
    export const ErrorCodes = {
        EmailNotConfirmed: 1,
        NoOldKontomierzUserFound: 2,
        MigrationAlreadyInProgress: 3
    } as const;
    export type ErrorCodes = typeof ErrorCodes;
}
export interface Permissions {
}
export namespace Permissions {
    export const SystemApiAccess = \\"SystemApiAccess\\";
    export const AdminApiAccess = \\"AdminApiAccess\\";
    export const FinancesApiAccess = \\"FinancesApiAccess\\";
    export const DebugApiAccess = \\"DebugApiAccess\\";
    export const OldKontomierzMigration = \\"OldKontomierzMigration\\";
    export const Billtech = \\"Billtech\\";
}
/**
 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
 * @attribute Kontomierz.Finances.Contracts.AuthorizeWhenOwnsSubtransactionAttribute
 */
export interface AssignCustomSubtransactionTitle extends Command, ISubtransactionRelated {
    Title?: string | null;
}
export namespace AssignCustomSubtransactionTitle {
    export const ErrorCodes = {
        SubtransactionIdNotValid: 1,
        SubtransactionDoesNotExist: 2,
        TitleTooLong: 3
    } as const;
    export type ErrorCodes = typeof ErrorCodes;
}
/**
 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
 * @attribute Kontomierz.Finances.Contracts.AuthorizeWhenOwnsTransactionAttribute
 */
export interface AssignCustomTransactionTitle extends Command, ITransactionRelated {
    Title?: string | null;
}
export namespace AssignCustomTransactionTitle {
    export const ErrorCodes = {
        TransactionIdNotValid: 1,
        TransactionDoesNotExist: 2,
        TitleTooLong: 3
    } as const;
    export type ErrorCodes = typeof ErrorCodes;
}
/**
 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
 */
export interface BalanceInBillingCycle extends Query<BalanceInBillingCycleWithComparisonDTO> {
    /**
     * Day is ignored
     */
    BillingCycle: ApiDate;
}
export interface BalanceInBillingCycleDTO {
    BillingCycle: ApiDate;
    BalancePlnSmallestUnit: number;
    ExpensesPlnSmallestUnit: number;
    IncomesPlnSmallestUnit: number;
}
export interface BalanceInBillingCycleWithComparisonDTO {
    BalancePlnSmallestUnit: number;
    ExpensesPlnSmallestUnit: number;
    ExpensesLastBillingCycleDifferencePercent?: number | null;
    IncomesPlnSmallestUnit: number;
    IncomesLastBillingCycleDifferencePercent?: number | null;
}
/**
 * Keep filters in sync with \`PaginatedTransactions\` query.
 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
 */
export interface BalanceSummary extends Query<BalanceSummaryDTO> {
    TransactionDateInclusiveFrom?: ApiDate | null;
    TransactionDateInclusiveTo?: ApiDate | null;
    Filter?: string | null;
    RelevantFilter?: boolean | null;
    CategoryConfirmedFilter?: boolean | null;
    IncomeFilter?: boolean | null;
    /**
     * Possibly a group category ID
     */
    CategoryIdFilter?: string | null;
    BankAccountIdsFilter?: string[] | null;
    WalletIdsFilter?: string[] | null;
    TagIdsFilter?: string[] | null;
}
export interface BalanceSummaryDTO {
    ExpensesPlnSmallestUnit: number;
    IncomesPlnSmallestUnit: number;
}
/**
 * Up to 12 billing cycles ordered ascending.
 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
 */
export interface BalancesByBillingCycles extends Query<BalanceInBillingCycleDTO[]> {
    /**
     * Day is ignored
     */
    BillingCycle: ApiDate;
}
/**
 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
 * @attribute Kontomierz.Finances.Contracts.AuthorizeWhenOwnsSubtransactionsAttribute
 */
export interface BulkDeleteTransactions extends Command, ISubtransactionsRelated {
}
export namespace BulkDeleteTransactions {
    export const ErrorCodes = {
        SomeSubtransactionIdsNotValid: 1,
        TooManySubtransactions: 2
    } as const;
    export type ErrorCodes = typeof ErrorCodes;
}
/**
 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
 * @attribute Kontomierz.Finances.Contracts.AuthorizeWhenOwnsSubtransactionsAttribute
 */
export interface BulkMarkAsIrrelevant extends Command, ISubtransactionsRelated {
}
export namespace BulkMarkAsIrrelevant {
    export const ErrorCodes = {
        SomeSubtransactionIdsNotValid: 1,
        SomeSubtransactionsDoNotExist: 2,
        TooManySubtransactions: 3
    } as const;
    export type ErrorCodes = typeof ErrorCodes;
}
/**
 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
 * @attribute Kontomierz.Finances.Contracts.AuthorizeWhenOwnsSubtransactionsAttribute
 */
export interface BulkMarkAsRelevant extends Command, ISubtransactionsRelated {
}
export namespace BulkMarkAsRelevant {
    export const ErrorCodes = {
        SomeSubtransactionIdsNotValid: 1,
        SomeSubtransactionsDoNotExist: 2,
        TooManySubtransactions: 3
    } as const;
    export type ErrorCodes = typeof ErrorCodes;
}
/**
 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
 * @attribute Kontomierz.Finances.Contracts.AuthorizeWhenOwnsSubtransactionsAttribute
 * @attribute Kontomierz.Finances.Contracts.AuthorizeWhenOwnsCategoryAttribute
 */
export interface BulkOverrideTransactionCategories extends Command, ISubtransactionsRelated, ICategoryRelated {
}
export namespace BulkOverrideTransactionCategories {
    export const ErrorCodes = {
        SomeSubtransactionIdsNotValid: 1,
        SomeSubtransactionsDoNotExist: 2,
        TooManySubtransactions: 3,
        CategoryIdIsInvalid: 4,
        CategoryDoesNotExist: 5,
        SubtransactionsDoNotMatchCategoryKind: 6
    } as const;
    export type ErrorCodes = typeof ErrorCodes;
}
/**
 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
 * @attribute Kontomierz.Finances.Contracts.AuthorizeWhenOwnsSubtransactionAttribute
 */
export interface ConfirmTransactionCategory extends Command, ISubtransactionRelated {
}
export namespace ConfirmTransactionCategory {
    export const ErrorCodes = {
        SubtransactionIdInvalid: 1,
        SubtransactionDoesNotExist: 2,
        CannotConfirmTransactionsCategory: 3
    } as const;
    export type ErrorCodes = typeof ErrorCodes;
}
/**
 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
 * @attribute Kontomierz.Finances.Contracts.AuthorizeWhenOwnsWalletAttribute
 */
export interface CreateWalletTransaction extends Command, IWalletRelated {
    Name: string;
    CategoryId: string;
    TransactionDate: ApiDate;
    AmountSmallestUnit: number;
}
export namespace CreateWalletTransaction {
    export const ErrorCodes = {
        WalletIdNotValid: 1,
        WalletDoesNotExist: 2,
        NameRequired: 3,
        NameTooLong: 4,
        CategoryIdNotValid: 5,
        CategoryDoesNotExist: 6,
        AmountDoesNotMatchCategoryKind: 7
    } as const;
    export type ErrorCodes = typeof ErrorCodes;
}
/**
 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
 * @attribute Kontomierz.Finances.Contracts.AuthorizeWhenOwnsTransactionAttribute
 */
export interface DeleteTransaction extends Command, ITransactionRelated {
}
export namespace DeleteTransaction {
    export const ErrorCodes = {
        TransactionIdNotValid: 1
    } as const;
    export type ErrorCodes = typeof ErrorCodes;
}
/**
 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
 * @attribute Kontomierz.Finances.Contracts.AuthorizeWhenOwnsTransactionAttribute
 * @attribute Kontomierz.Finances.Contracts.AuthorizeWhenOwnsWalletAttribute
 */
export interface EditWalletTransaction extends Command, ITransactionRelated, IWalletRelated {
    Name: string;
    CategoryId: string;
    TransactionDate: ApiDate;
    AmountSmallestUnit: number;
}
export namespace EditWalletTransaction {
    export const ErrorCodes = {
        TransactionIdNotValid: 1,
        TransactionDoesNotExist: 2,
        TransactionTypeNotValid: 3,
        SplitTransactionsCannotBeEdited: 4,
        WalletIdNotValid: 5,
        WalletDoesNotExist: 6,
        NameRequired: 7,
        NameTooLong: 8,
        CategoryIdNotValid: 9,
        CategoryDoesNotExist: 10,
        AmountDoesNotMatchCategoryKind: 11
    } as const;
    export type ErrorCodes = typeof ErrorCodes;
}
/**
 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
 * @attribute Kontomierz.Finances.Contracts.AuthorizeWhenOwnsSubtransactionAttribute
 */
export interface MarkAsIrrelevant extends Command, ISubtransactionRelated {
}
export namespace MarkAsIrrelevant {
    export const ErrorCodes = {
        SubtransactionIdNotValid: 1,
        SubtransactionDoesNotExist: 2
    } as const;
    export type ErrorCodes = typeof ErrorCodes;
}
/**
 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
 * @attribute Kontomierz.Finances.Contracts.AuthorizeWhenOwnsSubtransactionAttribute
 */
export interface MarkAsRelevant extends Command, ISubtransactionRelated {
}
export namespace MarkAsRelevant {
    export const ErrorCodes = {
        SubtransactionIdNotValid: 1,
        SubtransactionDoesNotExist: 2
    } as const;
    export type ErrorCodes = typeof ErrorCodes;
}
export interface NewSubtransactionDTO {
    Id: string;
    /**
     * In the same currency as parent transaction.
     */
    AmountSmallestUnit: number;
    CategoryId?: string | null;
    UserAssignedTitle?: string | null;
    Irrelevant: boolean;
}
/**
 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
 * @attribute Kontomierz.Finances.Contracts.AuthorizeWhenOwnsSubtransactionAttribute
 * @attribute Kontomierz.Finances.Contracts.AuthorizeWhenOwnsCategoryAttribute
 */
export interface OverrideTransactionCategory extends Command, ISubtransactionRelated, ICategoryRelated {
}
export namespace OverrideTransactionCategory {
    export const ErrorCodes = {
        SubtransactionIdIsInvalid: 1,
        SubtransactionDoesNotExist: 2,
        CategoryIdIsInvalid: 3,
        CategoryDoesNotExist: 4,
        SubtransactionDoesNotMatchCategoryKind: 5
    } as const;
    export type ErrorCodes = typeof ErrorCodes;
}
/**
 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
 */
export interface PaginatedTransactions extends SortedQuery<TransactionDTO, PaginatedTransactionsSortFieldDTO> {
    TransactionDateInclusiveFrom?: ApiDate | null;
    TransactionDateInclusiveTo?: ApiDate | null;
    Filter?: string | null;
    RelevantFilter?: boolean | null;
    CategoryConfirmedFilter?: boolean | null;
    IncomeFilter?: boolean | null;
    /**
     * Possibly a group category ID
     */
    CategoryIdFilter?: string | null;
    BankAccountIdsFilter?: string[] | null;
    WalletIdsFilter?: string[] | null;
    TagIdsFilter?: string[] | null;
}
/**
 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
 * @attribute Kontomierz.Finances.Contracts.AuthorizeWhenOwnsTransactionAttribute
 */
export interface SplitTransaction extends Command, ITransactionRelated {
    Subtransactions?: NewSubtransactionDTO[] | null;
}
export namespace SplitTransaction {
    export const ErrorCodes = {
        TransactionIdNotValid: 1,
        TransactionDoesNotExist: 2,
        SubtransactionIdNotValid: 3,
        SubtransactionIdNotUnique: 4,
        SubtransactionAlreadyExists: 5,
        CategoryIdNotValid: 6,
        CategoryDoesNotExist: 7,
        CategoryKindDoesNotMatch: 8,
        AmountIncorrectSign: 9,
        AmountSumDoesNotMatch: 10,
        SubtransactionTitleTooLong: 11
    } as const;
    export type ErrorCodes = typeof ErrorCodes;
}
export interface SubtransactionDTO {
    Id: string;
    /**
     * In the same currency as parent transaction.
     */
    AmountSmallestUnit: number;
    AmountPlnSmallestUnit?: number | null;
    CategoryId?: string | null;
    CanConfirmCategory: boolean;
    UserAssignedTitle?: string | null;
    Irrelevant: boolean;
}
/**
 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
 */
export interface MyTags extends Query<TagDTO[]> {
    FilterByTransactions: boolean;
    TransactionDateInclusiveFrom?: ApiDate | null;
    TransactionDateInclusiveTo?: ApiDate | null;
    TransactionFilter?: string | null;
    RelevantFilter?: boolean | null;
    CategoryConfirmedFilter?: boolean | null;
    IncomeFilter?: boolean | null;
    /**
     * Possibly a group category ID
     */
    CategoryIdFilter?: string | null;
    BankAccountIdsFilter?: string[] | null;
    WalletIdsFilter?: string[] | null;
}
export interface TagDTO {
    Id: string;
    Name: string;
}
/**
 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
 * @attribute Kontomierz.Finances.Contracts.AuthorizeWhenOwnsTransactionAttribute
 */
export interface TagTransaction extends Command, ITransactionRelated {
    Tags?: string[] | null;
}
export namespace TagTransaction {
    export const ErrorCodes = {
        TransactionIdNotValid: 1,
        TransactionDoesNotExist: 2
    } as const;
    export type ErrorCodes = typeof ErrorCodes;
}
export interface TransactionDTO {
    Id: string;
    WalletId?: string | null;
    WalletName?: string | null;
    BankAccountId?: string | null;
    BankAccountName?: string | null;
    Bank?: BankDTO | null;
    TransactionDate: ApiDate;
    OriginalTransactionDate: ApiDate;
    BookedOnDate?: ApiDate | null;
    AmountPlnSmallestUnit?: number | null;
    AmountSmallestUnit: number;
    OriginalAmountSmallestUnit: number;
    CurrencyCode: string;
    AccountBalanceAfterTransactionSmallestUnit?: number | null;
    Title?: string | null;
    OtherPartyName?: string | null;
    OtherPartyIban?: string | null;
    Kind?: string | null;
    Status?: TransactionStatusDTO | null;
    Comment?: string | null;
    UserAssignedTitle?: string | null;
    Subtransactions: SubtransactionDTO[];
    Tags: TagDTO[];
}
/**
 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
 * @attribute Kontomierz.Finances.Contracts.AuthorizeWhenOwnsTransactionAttribute
 */
export interface UpdateTransactionAmount extends Command, ITransactionRelated {
    AmountSmallestUnit: number;
}
export namespace UpdateTransactionAmount {
    export const ErrorCodes = {
        TransactionIdNotValid: 1,
        TransactionDoesNotExist: 2,
        SplitTransactionsCannotBeUpdated: 3,
        AmountSignDoesNotMatch: 4
    } as const;
    export type ErrorCodes = typeof ErrorCodes;
}
/**
 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
 * @attribute Kontomierz.Finances.Contracts.AuthorizeWhenOwnsTransactionAttribute
 */
export interface UpdateTransactionComment extends Command, ITransactionRelated {
    Comment?: string | null;
}
export namespace UpdateTransactionComment {
    export const ErrorCodes = {
        TransactionIdNotValid: 1,
        TransactionDoesNotExist: 2,
        CommentTooLong: 3
    } as const;
    export type ErrorCodes = typeof ErrorCodes;
}
/**
 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
 * @attribute Kontomierz.Finances.Contracts.AuthorizeWhenOwnsTransactionAttribute
 */
export interface UpdateTransactionDate extends Command, ITransactionRelated {
    TransactionDate: ApiDate;
}
export namespace UpdateTransactionDate {
    export const ErrorCodes = {
        TransactionIdNotValid: 1,
        TransactionDoesNotExist: 2
    } as const;
    export type ErrorCodes = typeof ErrorCodes;
}
/**
 * @attribute LeanCode.Contracts.Security.AllowUnauthorizedAttribute
 */
export interface CreateDemoSession extends Operation<string> {
}
/**
 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
 */
export interface DismissMigrationsBanner extends Command {
}
export interface RegulationsDTO {
    TermsOfService: string;
    PrivacyPolicy: string;
}
/**
 * @attribute LeanCode.Contracts.Security.AllowUnauthorizedAttribute
 */
export interface RegulationsLinks extends Query<RegulationsDTO> {
}
/**
 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
 */
export interface Settings extends Query<UserSettingsDTO> {
}
/**
 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
 */
export interface UpdateBillingCycleStartDay extends Command {
    BillingCycleStartDay: number;
    BillingCycleEndsWithStartDay: boolean;
}
export namespace UpdateBillingCycleStartDay {
    export const ErrorCodes = {
        InvalidStartDay: 1
    } as const;
    export type ErrorCodes = typeof ErrorCodes;
}
export interface UserSettingsDTO {
    BillingCycleStartDay: number;
    BillingCycleEndsWithStartDay: boolean;
    MigrationsBannerDismissed: boolean;
}
/**
 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
 */
export interface VerifyAdditionalEmailForMigration extends Operation<VerifyAdditionalEmailForMigrationResultDTO> {
    Email: string;
}
export interface VerifyAdditionalEmailForMigrationResultDTO {
    ValidationError?: VerifyAdditionalEmailForMigrationErrorDTO | null;
    VerificationFlowId?: string | null;
}
/**
 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
 */
export interface CreateWallet extends Command {
    Name: string;
    InitialBalance: MoneyDTO;
}
export namespace CreateWallet {
    export const ErrorCodes = {
        NameRequired: 1,
        NameTooLong: 2,
        InitialBalanceRequired: 3,
        InitialBalanceCurrencyCodeRequired: 5,
        UnknownInitialBalanceCurrencyCode: 6
    } as const;
    export type ErrorCodes = typeof ErrorCodes;
}
/**
 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
 * @attribute Kontomierz.Finances.Contracts.AuthorizeWhenOwnsWalletAttribute
 */
export interface DeleteWallet extends Command, IWalletRelated {
}
export namespace DeleteWallet {
    export const ErrorCodes = {
        WalletIdInvalid: 1
    } as const;
    export type ErrorCodes = typeof ErrorCodes;
}
/**
 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
 * @attribute Kontomierz.Finances.Contracts.AuthorizeWhenOwnsWalletAttribute
 */
export interface EditWallet extends Command, IWalletRelated {
    Name: string;
}
export namespace EditWallet {
    export const ErrorCodes = {
        InvalidWalletId: 1,
        WalletDoesNotExist: 2,
        NameRequired: 3,
        NameTooLong: 4
    } as const;
    export type ErrorCodes = typeof ErrorCodes;
}
/**
 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
 * @attribute Kontomierz.Finances.Contracts.AuthorizeWhenOwnsWalletAttribute
 */
export interface EditWalletBalance extends Command, IWalletRelated {
    BalanceAmountSmallestUnit: number;
}
export namespace EditWalletBalance {
    export const ErrorCodes = {
        InvalidWalletId: 1,
        WalletDoesNotExist: 2
    } as const;
    export type ErrorCodes = typeof ErrorCodes;
}
/**
 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
 */
export interface MyWallets extends AdminQuery<WalletDTO> {
    /**
     * @attribute LeanCode.Contracts.Admin.AdminFilterFor
     */
    NameFilter: AdminFilterRange<string>;
}
/**
 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
 * @attribute Kontomierz.Finances.Contracts.AuthorizeWhenOwnsBothWalletsAttribute
 */
export interface TransferMoneyBetweenWallets extends Command, IBothWalletsRelated {
    Name: string;
    TransactionDate: ApiDate;
    AmountSmallestUnit: number;
}
export namespace TransferMoneyBetweenWallets {
    export const ErrorCodes = {
        SourceWalletIdNotValid: 1,
        SourceWalletDoesNotExist: 2,
        TargetWalletIdNotValid: 3,
        TargetWalletDoesNotExist: 4,
        SourceAndTargetMustBeDifferent: 5,
        CurrencyMismatch: 6,
        NameRequired: 7,
        NameTooLong: 8,
        AmountIsNotPositive: 9
    } as const;
    export type ErrorCodes = typeof ErrorCodes;
}
export interface WalletDTO {
    Id: string;
    /**
     * @attribute LeanCode.Contracts.Admin.AdminColumn
     */
    Name: string;
    Balance: MoneyDTO;
    /**
     * @attribute LeanCode.Contracts.Admin.AdminColumn
     */
    DateCreated: ApiDateTimeOffset;
    /**
     * @attribute LeanCode.Contracts.Admin.AdminColumn
     */
    MigrationStatus: MigrationStatusDTO;
}
/**
 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
 */
export interface CreateWealthItem extends Command {
    Type: WealthItemTypeDTO;
    Name: string;
    Value: MoneyDTO;
}
export namespace CreateWealthItem {
    export const ErrorCodes = {
        InvalidType: 1,
        NameRequired: 2,
        NameTooLong: 3,
        ValueRequired: 4,
        ValueCurrencyCodeRequired: 5,
        UnknownValueCurrencyCode: 6,
        ValueSignWealthItemTypeMismatch: 7
    } as const;
    export type ErrorCodes = typeof ErrorCodes;
}
/**
 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
 * @attribute Kontomierz.Finances.Contracts.AuthorizeWhenOwnsWealthItemAttribute
 */
export interface DeleteWealthItem extends Command, IWealthItemRelated {
}
export namespace DeleteWealthItem {
    export const ErrorCodes = {
        InvalidWealthItemId: 1
    } as const;
    export type ErrorCodes = typeof ErrorCodes;
}
/**
 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
 * @attribute Kontomierz.Finances.Contracts.AuthorizeWhenOwnsWealthItemAttribute
 */
export interface EditWealthItem extends Command, IWealthItemRelated {
    Type: WealthItemTypeDTO;
    Name: string;
    Value: MoneyDTO;
}
export namespace EditWealthItem {
    export const ErrorCodes = {
        InvalidWealthItemId: 1,
        WealthItemDoesNotExist: 2,
        InvalidType: 3,
        NameRequired: 4,
        NameTooLong: 5,
        ValueRequired: 6,
        ValueCurrencyCodeRequired: 7,
        UnknownValueCurrencyCode: 8,
        ValueSignWealthItemTypeMismatch: 9
    } as const;
    export type ErrorCodes = typeof ErrorCodes;
}
/**
 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
 */
export interface MyTotalWealth extends Query<MyTotalWealthDTO> {
}
export interface MyTotalWealthDTO {
    BankAccountsPlnSmallestUnit: number;
    WalletsPlnSmallestUnit: number;
    WealthItemsPlnSmallestUnit: number;
    GrandTotalPlnSmallestUnit: number;
}
/**
 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
 */
export interface MyWealthItems extends Query<MyWealthItemsDTO> {
}
export interface MyWealthItemsDTO {
    Assets: WealthItemDTO[];
    Liabilities: WealthItemDTO[];
}
export interface WealthItemDTO {
    Id: string;
    Name: string;
    Value: MoneyDTO;
    DateCreated: ApiDateTimeOffset;
}
/**
 * @attribute LeanCode.Contracts.Security.AllowUnauthorizedAttribute
 */
export interface ExampleQuery extends Query<string> {
}
export interface KontomatikImportRequestExceptionDTO {
    Error: KontomatikImportRequestErrorDTO;
    InternalKontomatikError: string;
}
export interface KontomatikImportResponseDTO {
    Exceptions: KontomatikImportRequestExceptionDTO[];
}
/**
 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
 */
export interface RequestImportFromKontomatik extends Command {
    SessionId: string;
    SessionIdSignature: string;
    MultipleAccessId?: string | null;
    Target: string;
    OfficialName: string;
    Since: ApiDate;
}
export namespace RequestImportFromKontomatik {
    export const ErrorCodes = {
        SessionIdRequired: 1,
        SessionIdSignatureRequired: 2,
        TargetRequired: 3,
        OfficialNameRequired: 4
    } as const;
    export type ErrorCodes = typeof ErrorCodes;
}
/**
 * @attribute LeanCode.Contracts.Security.AuthorizeWhenHasAnyOfAttribute
 */
export interface StartImportingAllBankAccountsWithMultipleAccess extends Command {
}
export namespace StartImportingAllBankAccountsWithMultipleAccess {
    export const ErrorCodes = {
        NoMultipleSessionAccessAreActive: 1,
        SomeImportsAreAlreadyInProgress: 2
    } as const;
    export type ErrorCodes = typeof ErrorCodes;
}
export interface Permissions {
}
export namespace Permissions {
    export const SystemApiAccess = \\"SystemApiAccess\\";
    export const KontomatikImports = \\"KontomatikImports\\";
    export const DebugApiAccess = \\"DebugApiAccess\\";
    export const OldKontomierzMigration = \\"OldKontomierzMigration\\";
}
export interface AuthConsts {
}
export interface InternalIdentities {
}
export namespace InternalIdentities {
    export const ServerToServerApiKeyHeader = \\"X-Api-Key\\";
}
export interface KnownClaims {
}
export namespace KnownClaims {
    export const UserId = \\"sub\\";
    export const Role = \\"role\\";
}
export interface Roles {
}
export namespace Roles {
    export const System = \\"system\\";
    export const Admin = \\"admin\\";
    export const User = \\"user\\";
    export const DemoUser = \\"demo_user\\";
}
export interface Scopes {
}
export namespace Scopes {
    export const InternalApi = \\"internal_api\\";
}
export interface BankDTO {
    Target: string;
    Name: string;
}
export interface MoneyDTO {
    AmountSmallestUnit: number;
    CurrencyCode: string;
}
export interface PaginatedQuery<TResult> extends Query<PaginatedResult<TResult>> {
    /**
     * Zero-based.
     */
    PageNumber: number;
    PageSize: number;
}
export namespace PaginatedQuery {
    export const MinPageSize = 1;
    export const MaxPageSize = 100;
}
export interface PaginatedResult<TResult> {
    Items: TResult[];
    TotalCount: number;
}
export interface SortedQuery<TResult, TSort> extends PaginatedQuery<TResult> {
    SortBy: TSort;
    SortByDescending: boolean;
}
export interface AdminFilterRange<T> {
    From?: T | null;
    To?: T | null;
}
export interface AdminQuery<TResult> extends Query<AdminQueryResult<TResult>> {
    Page: number;
    PageSize: number;
    SortOrder?: SortOrderDTO | null;
    SortBy?: string | null;
}
export interface AdminQueryResult<TResult> {
    Total: number;
    Items: TResult[];
}
export enum BankAccountImportStatusDTO {
    Completed = 0,
    InProgress = 1,
    Failed = 2
}
export enum BankAccountTypeDTO {
    Account = 0,
    CreditCard = 1
}
export enum MultipleAccessTypeDTO {
    Unknown = -1,
    Active = 0,
    Expired = 1,
    Unsupported = 2
}
export enum CategoryBudgetTypeDTO {
    Category = 0,
    CategoryGroup = 1
}
export enum CopyBudgetValidationDTO {
    Valid = 0,
    BudgetPlanAlreadyExistsForTheBillingCycle = 1,
    NoPreviousBudgetPlansExist = 2
}
export enum AfterCategoryDeletionCategorizationHandlingDTO {
    MoveToAnotherCategory = 0,
    Recategorize = 1
}
export enum CategoryGroupIconDTO {
    ShoppingBag = 0,
    Home = 1,
    Kid = 2,
    Personal = 3,
    Balance = 4,
    Gift = 5,
    Briefcase = 6,
    CircleFull = 7,
    CircleEmpty = 8,
    GamingPad = 9,
    Flag = 10,
    FaceSmile = 11,
    Key = 12,
    Star = 13,
    Atom = 14,
    ActivityHeart = 15,
    MedicalCross = 16,
    PuzzlePiece = 17,
    GraduationHat = 18,
    Plane = 19,
    Sun = 20,
    Image = 21,
    Palette = 22,
    Building = 23,
    Tag = 24,
    Anchor = 25,
    Mail = 26,
    HeartRounded = 27,
    Camera = 28,
    ShoppingCart = 29,
    File = 30,
    MusicNote = 31,
    CoinsHand = 32,
    Car = 33,
    Archive = 34,
    HelpCircle = 35
}
export enum CategoryKindDTO {
    Expense = 0,
    Income = 1
}
export enum MigrationStatusDTO {
    NotStarted = 0,
    InProgress = 1
}
export enum PaginatedTransactionsSortFieldDTO {
    Date = 0,
    Amount = 1
}
export enum TransactionStatusDTO {
    Done = 0,
    Pending = 1,
    Rejected = 2,
    Scheduled = 3,
    Hold = 4
}
export enum VerifyAdditionalEmailForMigrationErrorDTO {
    EmailNotValid = 0,
    NoSuchEmailInOldKontomierz = 1,
    EmailVerificationConflict = 2
}
export enum WealthItemTypeDTO {
    Asset = 0,
    Liability = 1
}
export enum KontomatikImportRequestErrorDTO {
    General = 0,
    SessionExpired = 1,
    ConcurrentSessionsLimitExceed = 2,
    ServiceMaintenance = 3,
    MultipleAccessLimitExceeded = 4
}
export enum SortOrderDTO {
    Descending = 0,
    Ascending = 1
}
",
}
`;
